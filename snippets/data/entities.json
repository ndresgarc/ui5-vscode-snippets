{
    "name": "",
    "type": "sap.ui.model.json.JSONModel",
    "mode": "TwoWay",
    "path": "/entities",
    "data": [
      {
        "id": "sap.ui.core.BusyIndicator",
        "name": "Global Busy Indicator",
        "category": "Display",
        "since": "1.0",
        "samples": [
          {
            "id": "sap.ui.core.sample.BusyIndicator",
            "name": "Busy Indicator",
            "description": "A busy indicator can be used to block the entire screen until an operation has finished.",
            "entityId": "sap.ui.core.BusyIndicator",
            "contexts": {
              "sap.ui.core.BusyIndicator": {}
            },
            "key": "#/sample/sap.ui.core.sample.BusyIndicator/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core",
        "library": "sap.ui.core",
        "searchTags": "Global Busy Indicator GlobalBusyIndicator Display Busy Indicator A busy indicator can be used to block the entire screen until an operation has finished. Busy Indicator",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.core.BusyIndicator"
      },
      {
        "id": "sap.ui.core.Control",
        "name": "Control",
        "category": "Display",
        "since": "1.0",
        "samples": [
          {
            "id": "sap.ui.core.sample.ControlBusyIndicator",
            "name": "Control Busy Indicator",
            "description": "A control's busy indicator can be used to block parts of the screen until an operation has finished. In this example we block the content of only one out of two panels.",
            "entityId": "sap.ui.core.Control",
            "contexts": {
              "sap.ui.core.Control": {
                "nextSampleId": "sap.ui.core.sample.FieldGroup"
              }
            },
            "key": "#/sample/sap.ui.core.sample.ControlBusyIndicator/preview"
          },
          {
            "id": "sap.ui.core.sample.FieldGroup",
            "name": "Field Groups",
            "description": "A control's field group id can be used to define a virtual group of fields that should be validated together. Field groups can be validated usinf the ValidateFieldGroup event if the user presses the enter key in a field belonging to the field group or focusses a control outside of the field group.",
            "entityId": "sap.ui.core.Control",
            "contexts": {
              "sap.ui.core.Control": {
                "previousSampleId": "sap.ui.core.sample.ControlBusyIndicator"
              }
            },
            "key": "#/sample/sap.ui.core.sample.FieldGroup/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core",
        "library": "sap.ui.core",
        "searchTags": "Control Control Display Control Busy Indicator A control's busy indicator can be used to block parts of the screen until an operation has finished. In this example we block the content of only one out of two panels. Field Groups A control's field group id can be used to define a virtual group of fields that should be validated together. Field groups can be validated usinf the ValidateFieldGroup event if the user presses the enter key in a field belonging to the field group or focusses a control outside of the field group. Control Busy Indicator Field Groups",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.core.Control"
      },
      {
        "id": "sap.ui.core.mvc.ControllerExtension",
        "name": "Controller Extensions",
        "category": "Display",
        "since": "1.56",
        "samples": [],
        "formFactors": "Independent",
        "namespace": "sap.ui.core.mvc",
        "library": "sap.ui.core",
        "searchTags": "Controller Extensions ControllerExtensions Display",
        "sampleCount": 0,
        "key": "#/entity/sap.ui.core.mvc.ControllerExtension"
      },
      {
        "id": "sap.ui.core.HTML",
        "name": "HTML",
        "category": "Display",
        "since": "1.0",
        "samples": [
          {
            "id": "sap.ui.core.sample.Html",
            "name": "HTML",
            "description": "With the HTML controls you can easily embed any kind of HTML content into your UI5 mobile application.",
            "entityId": "sap.ui.core.HTML",
            "contexts": {
              "sap.ui.core.HTML": {
                "nextSampleId": "sap.ui.core.sample.Html.static"
              }
            },
            "key": "#/sample/sap.ui.core.sample.Html/preview"
          },
          {
            "id": "sap.ui.core.sample.Html.static",
            "name": "Static HTML Provided as a String",
            "description": "This is the simple use case for the HTML control: Some - usually decorative - HTML fragment is specified as a string and set to the content property. Without further configuration, the HTML control will convert this string to DOM nodes whenever it has to render.",
            "entityId": "sap.ui.core.HTML",
            "contexts": {
              "sap.ui.core.HTML": {
                "previousSampleId": "sap.ui.core.sample.Html",
                "nextSampleId": "sap.ui.core.sample.Html.preserveDOM"
              }
            },
            "key": "#/sample/sap.ui.core.sample.Html.static/preview"
          },
          {
            "id": "sap.ui.core.sample.Html.preserveDOM",
            "name": "Static HTML Provided With Preserved DOM",
            "description": "The second use case is similar to the first one: The HTML fragment is specified as a string. The difference is that after the first rendering, the HTML control tries to preserve the created DOM nodes as long as possible. Before each re-rendering step, the existing DOM is preserved in some hidden page area, and then the control and its relatives (parents, siblings) are rendered - this creates a new DOM node hierarchy. After the rendering, the preserved DOM content of the controls is integrated in the newly created DOM tree.",
            "entityId": "sap.ui.core.HTML",
            "contexts": {
              "sap.ui.core.HTML": {
                "previousSampleId": "sap.ui.core.sample.Html.static"
              }
            },
            "key": "#/sample/sap.ui.core.sample.Html.preserveDOM/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core",
        "library": "sap.ui.core",
        "searchTags": "HTML HTML Display HTML With the HTML controls you can easily embed any kind of HTML content into your UI5 mobile application. Static HTML Provided as a String This is the simple use case for the HTML control: Some - usually decorative - HTML fragment is specified as a string and set to the content property. Without further configuration, the HTML control will convert this string to DOM nodes whenever it has to render. Static HTML Provided With Preserved DOM The second use case is similar to the first one: The HTML fragment is specified as a string. The difference is that after the first rendering, the HTML control tries to preserve the created DOM nodes as long as possible. Before each re-rendering step, the existing DOM is preserved in some hidden page area, and then the control and its relatives (parents, siblings) are rendered - this creates a new DOM node hierarchy. After the rendering, the preserved DOM content of the controls is integrated in the newly created DOM tree. HTML Static HTML Provided as a String Static HTML Provided With Preserved DOM",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.core.HTML"
      },
      {
        "id": "sap.ui.core.Icon",
        "name": "Icon",
        "category": "Display",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.ui.core.sample.Icon",
            "name": "Icon",
            "description": "Built with an embedded font, icons scale well, and can be altered with CSS. They can also fire a press event. See the Icon Explorer for more icons.",
            "entityId": "sap.ui.core.Icon",
            "contexts": {
              "sap.ui.core.Icon": {}
            },
            "key": "#/sample/sap.ui.core.sample.Icon/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core",
        "library": "sap.ui.core",
        "searchTags": "Icon Icon Display Icon Built with an embedded font, icons scale well, and can be altered with CSS. They can also fire a press event. See the Icon Explorer for more icons. Icon",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.core.Icon"
      },
      {
        "id": "sap.ui.core.InvisibleText",
        "name": "InvisibleText",
        "category": "Display",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.InvisibleText",
            "name": "InvisibleText",
            "description": "Many controls provide the associations ariaLabelledBy and ariaDescribedBy for accessibility purposes. The InvisibleText control can be used by application to provide hidden texts on the UI which can be referenced via these associations.",
            "entityId": "sap.ui.core.InvisibleText",
            "contexts": {
              "sap.ui.core.InvisibleText": {}
            },
            "key": "#/sample/sap.ui.core.sample.InvisibleText/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core",
        "library": "sap.ui.core",
        "searchTags": "InvisibleText InvisibleText Display InvisibleText Many controls provide the associations ariaLabelledBy and ariaDescribedBy for accessibility purposes. The InvisibleText control can be used by application to provide hidden texts on the UI which can be referenced via these associations. InvisibleText",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.core.InvisibleText"
      },
      {
        "id": "sap.ui.core.mvc.View",
        "name": "View",
        "category": "Display",
        "formFactors": "Independent",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.ui.core.sample.View.async",
            "name": "Async View loading and rendering",
            "description": "Example for Views with async source loading and the impact on rendering.",
            "entityId": "sap.ui.core.mvc.View",
            "contexts": {
              "sap.ui.core.mvc.View": {
                "nextSampleId": "sap.ui.core.sample.View.preprocessor"
              }
            },
            "key": "#/sample/sap.ui.core.sample.View.async/preview"
          },
          {
            "id": "sap.ui.core.sample.View.preprocessor",
            "name": "Preprocessor example with XMLView",
            "description": "A small example for View Preprocessor usage with XMLViews.",
            "entityId": "sap.ui.core.mvc.View",
            "contexts": {
              "sap.ui.core.mvc.View": {
                "previousSampleId": "sap.ui.core.sample.View.async"
              }
            },
            "key": "#/sample/sap.ui.core.sample.View.preprocessor/preview"
          }
        ],
        "namespace": "sap.ui.core.mvc",
        "library": "sap.ui.core",
        "searchTags": "View View Display Async View loading and rendering Example for Views with async source loading and the impact on rendering. Preprocessor example with XMLView A small example for View Preprocessor usage with XMLViews. Async View loading and rendering Preprocessor example with XMLView",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.core.mvc.View"
      },
      {
        "id": "sap.ui.core.XMLComposite",
        "name": "XML Composite Control",
        "category": "Display",
        "since": "1.56",
        "samples": [
          {
            "id": "sap.ui.core.sample.XMLComposite.01",
            "name": "XMLComposite: basic example",
            "description": "Basic example to show the structure of an XML composite control",
            "entityId": "sap.ui.core.XMLComposite",
            "contexts": {
              "sap.ui.core.XMLComposite": {
                "nextSampleId": "sap.ui.core.sample.XMLComposite.02"
              }
            },
            "key": "#/sample/sap.ui.core.sample.XMLComposite.01/preview"
          },
          {
            "id": "sap.ui.core.sample.XMLComposite.02",
            "name": "XMLComposite: example showing usage of aggregation",
            "description": "Example showing how aggregations can be dealt with in an XML composite control",
            "entityId": "sap.ui.core.XMLComposite",
            "contexts": {
              "sap.ui.core.XMLComposite": {
                "previousSampleId": "sap.ui.core.sample.XMLComposite.01"
              }
            },
            "key": "#/sample/sap.ui.core.sample.XMLComposite.02/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core",
        "library": "sap.ui.core",
        "searchTags": "XML Composite Control XMLCompositeControl Display XMLComposite: basic example Basic example to show the structure of an XML composite control XMLComposite: example showing usage of aggregation Example showing how aggregations can be dealt with in an XML composite control XMLComposite: basic example XMLComposite: example showing usage of aggregation",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.core.XMLComposite"
      },
      {
        "id": "sap.ui.core.mvc.XMLView",
        "name": "XMLView",
        "category": "Display",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.ui.core.sample.ViewTemplate.scenario",
            "name": "XML Templating: demo scenario",
            "description": "Complete demo scenario for XML Templating based on OData V4 annotations",
            "entityId": "sap.ui.core.mvc.XMLView",
            "contexts": {
              "sap.ui.core.mvc.XMLView": {
                "nextSampleId": "sap.ui.core.sample.ViewTemplate.scenario.extension"
              }
            },
            "key": "#/sample/sap.ui.core.sample.ViewTemplate.scenario/preview"
          },
          {
            "id": "sap.ui.core.sample.ViewTemplate.scenario.extension",
            "name": "XML Templating: demo scenario extension",
            "description": "Complete demo scenario for XML Templating based on OData V4 annotations incl. custom extensions",
            "entityId": "sap.ui.core.mvc.XMLView",
            "contexts": {
              "sap.ui.core.mvc.XMLView": {
                "previousSampleId": "sap.ui.core.sample.ViewTemplate.scenario",
                "nextSampleId": "sap.ui.core.sample.ViewTemplate.tiny"
              }
            },
            "key": "#/sample/sap.ui.core.sample.ViewTemplate.scenario.extension/preview"
          },
          {
            "id": "sap.ui.core.sample.ViewTemplate.tiny",
            "name": "XML Templating: minimal sample",
            "description": "Minimal sample for XML Templating. BEWARE: This is meant to be a pure code sample. (To run it, you would need a proxy which is configured properly.)",
            "entityId": "sap.ui.core.mvc.XMLView",
            "contexts": {
              "sap.ui.core.mvc.XMLView": {
                "previousSampleId": "sap.ui.core.sample.ViewTemplate.scenario.extension",
                "nextSampleId": "sap.ui.core.sample.ViewTemplate.types"
              }
            },
            "key": "#/sample/sap.ui.core.sample.ViewTemplate.tiny/preview"
          },
          {
            "id": "sap.ui.core.sample.ViewTemplate.types",
            "name": "XML Templating: UI5 OData types",
            "description": "XML Templating sample with UI5 core primitive OData types",
            "entityId": "sap.ui.core.mvc.XMLView",
            "contexts": {
              "sap.ui.core.mvc.XMLView": {
                "previousSampleId": "sap.ui.core.sample.ViewTemplate.tiny",
                "nextSampleId": "sap.ui.core.sample.ViewTemplate.valuelist"
              }
            },
            "key": "#/sample/sap.ui.core.sample.ViewTemplate.types/preview"
          },
          {
            "id": "sap.ui.core.sample.ViewTemplate.valuelist",
            "name": "Separate Value List Loading",
            "description": "Separate loading of value lists to reduce size of OData service metadata to be loaded",
            "entityId": "sap.ui.core.mvc.XMLView",
            "contexts": {
              "sap.ui.core.mvc.XMLView": {
                "previousSampleId": "sap.ui.core.sample.ViewTemplate.types"
              }
            },
            "key": "#/sample/sap.ui.core.sample.ViewTemplate.valuelist/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core.mvc",
        "library": "sap.ui.core",
        "searchTags": "XMLView XMLView Display XML Templating: demo scenario Complete demo scenario for XML Templating based on OData V4 annotations XML Templating: demo scenario extension Complete demo scenario for XML Templating based on OData V4 annotations incl. custom extensions XML Templating: minimal sample Minimal sample for XML Templating. BEWARE: This is meant to be a pure code sample. (To run it, you would need a proxy which is configured properly.) XML Templating: UI5 OData types XML Templating sample with UI5 core primitive OData types Separate Value List Loading Separate loading of value lists to reduce size of OData service metadata to be loaded XML Templating: demo scenario XML Templating: demo scenario extension XML Templating: minimal sample XML Templating: UI5 OData types Separate Value List Loading",
        "sampleCount": 5,
        "key": "#/entity/sap.ui.core.mvc.XMLView"
      },
      {
        "id": "sap.ui.test.Opa5",
        "name": "OPA5",
        "category": "Testing",
        "since": "1.24",
        "samples": [
          {
            "id": "sap.ui.core.sample.OpaGetStarted",
            "name": "Simulating a simple backend request with OPA5",
            "description": "This example is complementary to the OPA get started section in the developer guide. It shows how to simulate a simple backend server request with OPA5 and Sinon.JS",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "nextSampleId": "sap.ui.core.sample.OpaMatchers"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaGetStarted/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaMatchers",
            "name": "Using Matchers",
            "description": "Matchers are used in OPA tests to retrieve controls that have to match a condition, eg: Property matching a value",
            "entityId": "sap.ui.test.matchers",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaGetStarted",
                "nextSampleId": "sap.ui.core.sample.OpaById"
              },
              "sap.ui.test.matchers": {
                "previousSampleId": "sap.ui.core.sample.matcher.Descendant"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaMatchers/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaById",
            "name": "Finding controls by id",
            "description": "OPA finds a control by its id, triggers a tap and then finds multiple controls by their ids",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaMatchers",
                "nextSampleId": "sap.ui.core.sample.OpaDynamicWait"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaById/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaDynamicWait",
            "name": "How to write nested actions",
            "description": "If you have complex control structures you are able to add actions based on the result of previous actions.",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaById",
                "nextSampleId": "sap.ui.core.sample.OpaPageObject"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaDynamicWait/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaPageObject",
            "name": "How to structure your OPA tests with Page Objects",
            "description": "If you have multiple pages or UI areas that have several operations, you should place reuse functions in Page Objects to make your OPA tests maintainable. The example shows as well how to share and reuse functionality within and across page objects.",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaDynamicWait",
                "nextSampleId": "sap.ui.core.sample.OpaStartup.iStartMyUIComponent"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaPageObject/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaStartup.iStartMyUIComponent",
            "name": "Starting a UIComponent",
            "description": "Use this function if you would like to run OPA tests for a single UIComponent (a component which creates entries in the DOM tree)",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaPageObject",
                "nextSampleId": "sap.ui.core.sample.OpaStartup.iStartMyAppInAFrame"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaStartup.iStartMyUIComponent/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaStartup.iStartMyAppInAFrame",
            "name": "Starting an app in an iFrame",
            "description": "Use this function if you would like to run your app isolated from the other tests and your app starts with a html file.",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaStartup.iStartMyUIComponent",
                "nextSampleId": "sap.ui.core.sample.OpaAction"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaStartup.iStartMyAppInAFrame/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaAction",
            "name": "Simulating user interactions on UI5 controls with OPA5",
            "description": "There are built-in actions for OPA and you are also able to write custom actions if they do not fit the control you are using.",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaStartup.iStartMyAppInAFrame",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithOPA5"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaAction/preview"
          },
          {
            "id": "sap.ui.core.sample.gherkin.GherkinWithOPA5",
            "name": "Using Gherkin with OPA5",
            "description": "How to combine Gherkin and OPA5 to run behavior driven development tests",
            "entityId": "sap.ui.test.gherkin",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaAction",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects"
              },
              "sap.ui.test.gherkin": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithQUnit",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects"
              }
            },
            "key": "#/sample/sap.ui.core.sample.gherkin.GherkinWithOPA5/preview"
          },
          {
            "id": "sap.ui.core.sample.gherkin.GherkinWithPageObjects",
            "name": "Using Gherkin with OPA5 Page Objects",
            "description": "How to combine Gherkin and OPA5 page objects to run behavior driven development tests",
            "entityId": "sap.ui.test.gherkin",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithOPA5",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithUIComponent"
              },
              "sap.ui.test.gherkin": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithOPA5",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithUIComponent"
              }
            },
            "key": "#/sample/sap.ui.core.sample.gherkin.GherkinWithPageObjects/preview"
          },
          {
            "id": "sap.ui.core.sample.gherkin.GherkinWithUIComponent",
            "name": "Using Gherkin to load and test a UIComponent",
            "description": "How to use Gherkin and OPA5 to load a UIComponent and run behavior driven development tests on it",
            "entityId": "sap.ui.test.gherkin",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects",
                "nextSampleId": "sap.ui.core.sample.OpaURLParameters.iStartMyUIComponentWithURLParameters"
              },
              "sap.ui.test.gherkin": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects"
              }
            },
            "key": "#/sample/sap.ui.core.sample.gherkin.GherkinWithUIComponent/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaURLParameters.iStartMyUIComponentWithURLParameters",
            "name": "Starting a UIComponent with URL parameters",
            "description": "Passing URL parameters from configurations when using UIComponent",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithUIComponent",
                "nextSampleId": "sap.ui.core.sample.OpaURLParameters.iStartMyAppInAFrameWithURLParameters"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaURLParameters.iStartMyUIComponentWithURLParameters/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaURLParameters.iStartMyAppInAFrameWithURLParameters",
            "name": "Starting an app in an iFrame with passing URL parameters to the iFrame",
            "description": "Passing URL parameters to an app in an iFrame from configuration",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaURLParameters.iStartMyUIComponentWithURLParameters",
                "nextSampleId": "sap.ui.core.sample.OpaWithSupportAssistant"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaURLParameters.iStartMyAppInAFrameWithURLParameters/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaWithSupportAssistant",
            "name": "Running OPA tests with Support Assistant checks",
            "description": "This sample demonstrates how to extend existing OPA test/journey by plugging calls to Support Assistant extension assertions, with different severity and check scope parameters",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaURLParameters.iStartMyAppInAFrameWithURLParameters",
                "nextSampleId": "sap.ui.core.sample.OpaTestLibrary"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaWithSupportAssistant/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaTestLibrary",
            "name": "Creating and using OPA5 test libraries",
            "description": "This sample demonstrates how to create and use a simple OPA5 test library",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaWithSupportAssistant",
                "nextSampleId": "sap.ui.core.sample.OpaStaticAreaControls"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaTestLibrary/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaStaticAreaControls",
            "name": "Retrieving controls located in the static area with OPA5",
            "description": "This sample demonstrates how to locate static area controls with OPA5",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaTestLibrary",
                "nextSampleId": "sap.ui.core.sample.OpaBusyIndicator"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaStaticAreaControls/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaBusyIndicator",
            "name": "Testing busy controls with OPA5",
            "description": "This sample demonstrates how to test busy controls with OPA5",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaStaticAreaControls",
                "nextSampleId": "sap.ui.core.sample.OpaAutoWaitParams"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaBusyIndicator/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaAutoWaitParams",
            "name": "OPA5 autoWait parameters",
            "description": "This sample demonstrates how to take advantage of OPA5 autoWait parameters",
            "entityId": "sap.ui.test.Opa5",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaBusyIndicator",
                "nextSampleId": "sap.ushell.sample.OpaFLPSandbox"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaAutoWaitParams/preview"
          },
          {
            "id": "sap.ushell.sample.OpaFLPSandbox",
            "name": "Starting an application in a FLP sandbox",
            "description": "How to test a Fiori application in FLP sandbox with OPA",
            "entityId": "sap.ushell.sample.OpaFLPSandbox",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaAutoWaitParams"
              },
              "sap.ushell.sample.OpaFLPSandbox": {}
            },
            "key": "#/sample/sap.ushell.sample.OpaFLPSandbox/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.test",
        "library": "sap.ui.core",
        "searchTags": "OPA5 OPA5 Testing Simulating a simple backend request with OPA5 This example is complementary to the OPA get started section in the developer guide. It shows how to simulate a simple backend server request with OPA5 and Sinon.JS Using Matchers Matchers are used in OPA tests to retrieve controls that have to match a condition, eg: Property matching a value Finding controls by id OPA finds a control by its id, triggers a tap and then finds multiple controls by their ids How to write nested actions If you have complex control structures you are able to add actions based on the result of previous actions. How to structure your OPA tests with Page Objects If you have multiple pages or UI areas that have several operations, you should place reuse functions in Page Objects to make your OPA tests maintainable. The example shows as well how to share and reuse functionality within and across page objects. Starting a UIComponent Use this function if you would like to run OPA tests for a single UIComponent (a component which creates entries in the DOM tree) Starting an app in an iFrame Use this function if you would like to run your app isolated from the other tests and your app starts with a html file. Simulating user interactions on UI5 controls with OPA5 There are built-in actions for OPA and you are also able to write custom actions if they do not fit the control you are using. Using Gherkin with OPA5 How to combine Gherkin and OPA5 to run behavior driven development tests Using Gherkin with OPA5 Page Objects How to combine Gherkin and OPA5 page objects to run behavior driven development tests Using Gherkin to load and test a UIComponent How to use Gherkin and OPA5 to load a UIComponent and run behavior driven development tests on it Starting a UIComponent with URL parameters Passing URL parameters from configurations when using UIComponent Starting an app in an iFrame with passing URL parameters to the iFrame Passing URL parameters to an app in an iFrame from configuration Running OPA tests with Support Assistant checks This sample demonstrates how to extend existing OPA test/journey by plugging calls to Support Assistant extension assertions, with different severity and check scope parameters Creating and using OPA5 test libraries This sample demonstrates how to create and use a simple OPA5 test library Retrieving controls located in the static area with OPA5 This sample demonstrates how to locate static area controls with OPA5 Testing busy controls with OPA5 This sample demonstrates how to test busy controls with OPA5 OPA5 autoWait parameters This sample demonstrates how to take advantage of OPA5 autoWait parameters Starting an application in a FLP sandbox How to test a Fiori application in FLP sandbox with OPA Simulating a simple backend request with OPA5 Using Matchers Finding controls by id How to write nested actions How to structure your OPA tests with Page Objects Starting a UIComponent Starting an app in an iFrame Simulating user interactions on UI5 controls with OPA5 Using Gherkin with OPA5 Using Gherkin with OPA5 Page Objects Using Gherkin to load and test a UIComponent Starting a UIComponent with URL parameters Starting an app in an iFrame with passing URL parameters to the iFrame Running OPA tests with Support Assistant checks Creating and using OPA5 test libraries Retrieving controls located in the static area with OPA5 Testing busy controls with OPA5 OPA5 autoWait parameters Starting an application in a FLP sandbox",
        "sampleCount": 19,
        "key": "#/entity/sap.ui.test.Opa5"
      },
      {
        "id": "sap.ui.core.hyphenation.Hyphenation",
        "name": "Hyphenation API",
        "category": "Display",
        "since": "1.60",
        "samples": [
          {
            "id": "sap.ui.core.sample.HyphenationAPI",
            "name": "Hyphenation API",
            "description": "This sample demonstrates usage of the Hyphenation API",
            "entityId": "sap.ui.core.hyphenation.Hyphenation",
            "contexts": {
              "sap.ui.core.hyphenation.Hyphenation": {}
            },
            "key": "#/sample/sap.ui.core.sample.HyphenationAPI/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core.hyphenation",
        "library": "sap.ui.core",
        "searchTags": "Hyphenation API HyphenationAPI Display Hyphenation API This sample demonstrates usage of the Hyphenation API Hyphenation API",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.core.hyphenation.Hyphenation"
      },
      {
        "id": "sap.ui.test.matchers",
        "name": "Matcher",
        "category": "Testing",
        "since": "1.32",
        "samples": [
          {
            "id": "sap.ui.core.sample.matcher.BindingPath",
            "name": "Binding Path Matcher",
            "description": "The binding path matcher checks if a control has a binding with the exact same binding context and/or binding property path in OPA tests.",
            "entityId": "sap.ui.test.matchers",
            "contexts": {
              "sap.ui.test.matchers": {
                "nextSampleId": "sap.ui.core.sample.matcher.I18NText"
              }
            },
            "key": "#/sample/sap.ui.core.sample.matcher.BindingPath/preview"
          },
          {
            "id": "sap.ui.core.sample.matcher.I18NText",
            "name": "I18N Text Matcher",
            "description": "The I18N text matcher checks if a control property has the same value as a text of an I18N file in OPA tests.",
            "entityId": "sap.ui.test.matchers",
            "contexts": {
              "sap.ui.test.matchers": {
                "previousSampleId": "sap.ui.core.sample.matcher.BindingPath",
                "nextSampleId": "sap.ui.core.sample.matcher.LabelFor"
              }
            },
            "key": "#/sample/sap.ui.core.sample.matcher.I18NText/preview"
          },
          {
            "id": "sap.ui.core.sample.matcher.LabelFor",
            "name": "Label For Matcher",
            "description": "The LabelFor matcher searches for given control associated with labelFor property in OPA tests.",
            "entityId": "sap.ui.test.matchers",
            "contexts": {
              "sap.ui.test.matchers": {
                "previousSampleId": "sap.ui.core.sample.matcher.I18NText",
                "nextSampleId": "sap.ui.core.sample.matcher.Descendant"
              }
            },
            "key": "#/sample/sap.ui.core.sample.matcher.LabelFor/preview"
          },
          {
            "id": "sap.ui.core.sample.matcher.Descendant",
            "name": "Descendant Matcher",
            "description": "The descendant matcher checks if a control has a given descendant.",
            "entityId": "sap.ui.test.matchers",
            "contexts": {
              "sap.ui.test.matchers": {
                "previousSampleId": "sap.ui.core.sample.matcher.LabelFor",
                "nextSampleId": "sap.ui.core.sample.OpaMatchers"
              }
            },
            "key": "#/sample/sap.ui.core.sample.matcher.Descendant/preview"
          },
          {
            "id": "sap.ui.core.sample.OpaMatchers",
            "name": "Using Matchers",
            "description": "Matchers are used in OPA tests to retrieve controls that have to match a condition, eg: Property matching a value",
            "entityId": "sap.ui.test.matchers",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaGetStarted",
                "nextSampleId": "sap.ui.core.sample.OpaById"
              },
              "sap.ui.test.matchers": {
                "previousSampleId": "sap.ui.core.sample.matcher.Descendant"
              }
            },
            "key": "#/sample/sap.ui.core.sample.OpaMatchers/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.test",
        "library": "sap.ui.core",
        "searchTags": "Matcher Matcher Testing Binding Path Matcher The binding path matcher checks if a control has a binding with the exact same binding context and/or binding property path in OPA tests. I18N Text Matcher The I18N text matcher checks if a control property has the same value as a text of an I18N file in OPA tests. Label For Matcher The LabelFor matcher searches for given control associated with labelFor property in OPA tests. Descendant Matcher The descendant matcher checks if a control has a given descendant. Using Matchers Matchers are used in OPA tests to retrieve controls that have to match a condition, eg: Property matching a value Binding Path Matcher I18N Text Matcher Label For Matcher Descendant Matcher Using Matchers",
        "sampleCount": 5,
        "key": "#/entity/sap.ui.test.matchers"
      },
      {
        "id": "sap.ui.core.message.MessageManager",
        "name": "Message Manager",
        "category": "Display",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.ui.core.sample.MessageManager.BasicMessages",
            "name": "Basic Messages",
            "description": "Shows how to create messages on the frontend and display them afterwards. This can be used for form validation on the frontend.",
            "entityId": "sap.ui.core.message.MessageManager",
            "contexts": {
              "sap.ui.core.message.MessageManager": {
                "nextSampleId": "sap.ui.core.sample.MessageManager.BasicODataMessages"
              }
            },
            "key": "#/sample/sap.ui.core.sample.MessageManager.BasicMessages/preview"
          },
          {
            "id": "sap.ui.core.sample.MessageManager.BasicODataMessages",
            "name": "Basic OData Messages",
            "description": "Uses the MockServer to simulate an OData response containing different types of server side messages (error, warning, info, success).",
            "entityId": "sap.ui.core.message.MessageManager",
            "contexts": {
              "sap.ui.core.message.MessageManager": {
                "previousSampleId": "sap.ui.core.sample.MessageManager.BasicMessages",
                "nextSampleId": "sap.ui.core.sample.MessageManager.ODataBackendMessagesComp"
              }
            },
            "key": "#/sample/sap.ui.core.sample.MessageManager.BasicODataMessages/preview"
          },
          {
            "id": "sap.ui.core.sample.MessageManager.ODataBackendMessagesComp",
            "name": "OData Messages Component",
            "description": "Shows how to handle OData responses containing server side messages in component based apps. Also illustrates how the sap-message header works.",
            "entityId": "sap.ui.core.message.MessageManager",
            "contexts": {
              "sap.ui.core.message.MessageManager": {
                "previousSampleId": "sap.ui.core.sample.MessageManager.BasicODataMessages"
              }
            },
            "key": "#/sample/sap.ui.core.sample.MessageManager.ODataBackendMessagesComp/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core.message",
        "library": "sap.ui.core",
        "searchTags": "Message Manager MessageManager Display Basic Messages Shows how to create messages on the frontend and display them afterwards. This can be used for form validation on the frontend. Basic OData Messages Uses the MockServer to simulate an OData response containing different types of server side messages (error, warning, info, success). OData Messages Component Shows how to handle OData responses containing server side messages in component based apps. Also illustrates how the sap-message header works. Basic Messages Basic OData Messages OData Messages Component",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.core.message.MessageManager"
      },
      {
        "id": "sap.ui.test.gherkin",
        "name": "Gherkin",
        "category": "Testing",
        "since": "1.40",
        "samples": [
          {
            "id": "sap.ui.core.sample.gherkin.GherkinWithQUnit",
            "name": "Using Gherkin with QUnit",
            "description": "How to combine Gherkin and QUnit to run behavior driven development tests",
            "entityId": "sap.ui.test.gherkin",
            "contexts": {
              "sap.ui.test.gherkin": {
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithOPA5"
              }
            },
            "key": "#/sample/sap.ui.core.sample.gherkin.GherkinWithQUnit/preview"
          },
          {
            "id": "sap.ui.core.sample.gherkin.GherkinWithOPA5",
            "name": "Using Gherkin with OPA5",
            "description": "How to combine Gherkin and OPA5 to run behavior driven development tests",
            "entityId": "sap.ui.test.gherkin",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaAction",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects"
              },
              "sap.ui.test.gherkin": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithQUnit",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects"
              }
            },
            "key": "#/sample/sap.ui.core.sample.gherkin.GherkinWithOPA5/preview"
          },
          {
            "id": "sap.ui.core.sample.gherkin.GherkinWithPageObjects",
            "name": "Using Gherkin with OPA5 Page Objects",
            "description": "How to combine Gherkin and OPA5 page objects to run behavior driven development tests",
            "entityId": "sap.ui.test.gherkin",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithOPA5",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithUIComponent"
              },
              "sap.ui.test.gherkin": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithOPA5",
                "nextSampleId": "sap.ui.core.sample.gherkin.GherkinWithUIComponent"
              }
            },
            "key": "#/sample/sap.ui.core.sample.gherkin.GherkinWithPageObjects/preview"
          },
          {
            "id": "sap.ui.core.sample.gherkin.GherkinWithUIComponent",
            "name": "Using Gherkin to load and test a UIComponent",
            "description": "How to use Gherkin and OPA5 to load a UIComponent and run behavior driven development tests on it",
            "entityId": "sap.ui.test.gherkin",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects",
                "nextSampleId": "sap.ui.core.sample.OpaURLParameters.iStartMyUIComponentWithURLParameters"
              },
              "sap.ui.test.gherkin": {
                "previousSampleId": "sap.ui.core.sample.gherkin.GherkinWithPageObjects"
              }
            },
            "key": "#/sample/sap.ui.core.sample.gherkin.GherkinWithUIComponent/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.test",
        "library": "sap.ui.core",
        "searchTags": "Gherkin Gherkin Testing Using Gherkin with QUnit How to combine Gherkin and QUnit to run behavior driven development tests Using Gherkin with OPA5 How to combine Gherkin and OPA5 to run behavior driven development tests Using Gherkin with OPA5 Page Objects How to combine Gherkin and OPA5 page objects to run behavior driven development tests Using Gherkin to load and test a UIComponent How to use Gherkin and OPA5 to load a UIComponent and run behavior driven development tests on it Using Gherkin with QUnit Using Gherkin with OPA5 Using Gherkin with OPA5 Page Objects Using Gherkin to load and test a UIComponent",
        "sampleCount": 4,
        "key": "#/entity/sap.ui.test.gherkin"
      },
      {
        "id": "sap.ui.core.theming",
        "name": "Theming",
        "category": "Theming",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.ui.core.sample.ThemeCustomClasses",
            "name": "Theme-independent CSS-classes",
            "description": "Sample display of 'sapTheme'-prefixed CSS classes for theme-independent styling of custom HTML/Controls. The set displayed is to be used to style static HTML elements.",
            "entityId": "sap.ui.core.theming",
            "contexts": {
              "sap.ui.core.theming": {
                "nextSampleId": "sap.ui.core.sample.BasicThemeParameters"
              }
            },
            "key": "#/sample/sap.ui.core.sample.ThemeCustomClasses/preview"
          },
          {
            "id": "sap.ui.core.sample.BasicThemeParameters",
            "name": "Basic Theme Parameters",
            "description": "Sample provides a link to the Theme Parameter Toolbox. There you can easily search, preview, and filter semantic theme parameters.",
            "entityId": "sap.ui.core.theming",
            "contexts": {
              "sap.ui.core.theming": {
                "previousSampleId": "sap.ui.core.sample.ThemeCustomClasses"
              }
            },
            "key": "#/sample/sap.ui.core.sample.BasicThemeParameters/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core",
        "library": "sap.ui.core",
        "searchTags": "Theming Theming Theming Theme-independent CSS-classes Sample display of 'sapTheme'-prefixed CSS classes for theme-independent styling of custom HTML/Controls. The set displayed is to be used to style static HTML elements. Basic Theme Parameters Sample provides a link to the Theme Parameter Toolbox. There you can easily search, preview, and filter semantic theme parameters. Theme-independent CSS-classes Basic Theme Parameters",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.core.theming"
      },
      {
        "id": "sap.ui.core.routing.Targets",
        "name": "Targets",
        "category": "Routing",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.TargetsStandalone",
            "name": "Targets without a Router",
            "description": "If you do not need bookmarks, a router is too complicated you can use Targets to lazy load your views and navigate through your application.",
            "entityId": "sap.ui.core.routing.Targets",
            "contexts": {
              "sap.ui.core.routing.Targets": {}
            },
            "key": "#/sample/sap.ui.core.sample.TargetsStandalone/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core.routing",
        "library": "sap.ui.core",
        "searchTags": "Targets Targets Routing Targets without a Router If you do not need bookmarks, a router is too complicated you can use Targets to lazy load your views and navigate through your application. Targets without a Router",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.core.routing.Targets"
      },
      {
        "id": "sap.ui.core.routing.Route",
        "name": "Route",
        "category": "Routing",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.ui.core.sample.PatternMatching",
            "name": "Route Patterns",
            "description": "Syntax for the Route pattern property.",
            "entityId": "sap.ui.core.routing.Route",
            "contexts": {
              "sap.ui.core.routing.Route": {}
            },
            "key": "#/sample/sap.ui.core.sample.PatternMatching/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core.routing",
        "library": "sap.ui.core",
        "searchTags": "Route Route Routing Route Patterns Syntax for the Route pattern property. Route Patterns",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.core.routing.Route"
      },
      {
        "id": "sap.ui.core.routing.Router",
        "name": "Router",
        "category": "Routing",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.ui.core.sample.RoutingFullscreen",
            "name": "Routing between Fullscreen pages a simple sample",
            "description": "A mini app with 2 pages. Both are bookmarkable.",
            "entityId": "sap.ui.core.routing.Router",
            "contexts": {
              "sap.ui.core.routing.Router": {
                "nextSampleId": "sap.ui.core.sample.RoutingMasterDetail"
              }
            },
            "key": "#/sample/sap.ui.core.sample.RoutingFullscreen/preview"
          },
          {
            "id": "sap.ui.core.sample.RoutingMasterDetail",
            "name": "Routing in a split screen layout with the master detail pattern",
            "description": "A mini app with 2 detail pages. Both are bookmarkable.",
            "entityId": "sap.ui.core.routing.Router",
            "contexts": {
              "sap.ui.core.routing.Router": {
                "previousSampleId": "sap.ui.core.sample.RoutingFullscreen"
              }
            },
            "key": "#/sample/sap.ui.core.sample.RoutingMasterDetail/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.core.routing",
        "library": "sap.ui.core",
        "searchTags": "Router Router Routing Routing between Fullscreen pages a simple sample A mini app with 2 pages. Both are bookmarkable. Routing in a split screen layout with the master detail pattern A mini app with 2 detail pages. Both are bookmarkable. Routing between Fullscreen pages a simple sample Routing in a split screen layout with the master detail pattern",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.core.routing.Router"
      },
      {
        "id": "sap.ui.model.odata.v4.ODataModel",
        "name": "OData V4 Model",
        "category": "Data Binding",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.ui.core.sample.odata.v4.ConsumeV2Service",
            "name": "OData V2 Service Consumption",
            "description": "Example for OData V2 service consumption with an OData V4 model",
            "entityId": "sap.ui.model.odata.v4.ODataModel",
            "contexts": {
              "sap.ui.model.odata.v4.ODataModel": {
                "nextSampleId": "sap.ui.core.sample.odata.v4.ListBinding"
              }
            },
            "key": "#/sample/sap.ui.core.sample.odata.v4.ConsumeV2Service/preview"
          },
          {
            "id": "sap.ui.core.sample.odata.v4.ListBinding",
            "name": "Operation Binding",
            "description": "OData V4 model operation bindings example; refer to the Sales Orders example to understand other OData V4 model features",
            "entityId": "sap.ui.model.odata.v4.ODataModel",
            "contexts": {
              "sap.ui.model.odata.v4.ODataModel": {
                "previousSampleId": "sap.ui.core.sample.odata.v4.ConsumeV2Service",
                "nextSampleId": "sap.ui.core.sample.odata.v4.SalesOrders"
              }
            },
            "key": "#/sample/sap.ui.core.sample.odata.v4.ListBinding/preview"
          },
          {
            "id": "sap.ui.core.sample.odata.v4.SalesOrders",
            "name": "Sales Orders",
            "description": "Example for OData V4 EPM Sales Orders",
            "entityId": "sap.ui.model.odata.v4.ODataModel",
            "contexts": {
              "sap.ui.model.odata.v4.ODataModel": {
                "previousSampleId": "sap.ui.core.sample.odata.v4.ListBinding",
                "nextSampleId": "sap.ui.core.sample.odata.v4.SalesOrdersTemplate"
              }
            },
            "key": "#/sample/sap.ui.core.sample.odata.v4.SalesOrders/preview"
          },
          {
            "id": "sap.ui.core.sample.odata.v4.SalesOrdersTemplate",
            "name": "Sales Orders Template",
            "description": "Example for OData V4 EPM Sales Orders using XML Templating",
            "entityId": "sap.ui.model.odata.v4.ODataModel",
            "contexts": {
              "sap.ui.model.odata.v4.ODataModel": {
                "previousSampleId": "sap.ui.core.sample.odata.v4.SalesOrders",
                "nextSampleId": "sap.ui.core.sample.odata.v4.SalesOrderTP100_V4"
              }
            },
            "key": "#/sample/sap.ui.core.sample.odata.v4.SalesOrdersTemplate/preview"
          },
          {
            "id": "sap.ui.core.sample.odata.v4.SalesOrderTP100_V4",
            "name": "Sales Orders TP100",
            "description": "Example for consuming an OData V4 Service",
            "entityId": "sap.ui.model.odata.v4.ODataModel",
            "contexts": {
              "sap.ui.model.odata.v4.ODataModel": {
                "previousSampleId": "sap.ui.core.sample.odata.v4.SalesOrdersTemplate",
                "nextSampleId": "sap.ui.core.sample.odata.v4.SalesOrderTP100_V2"
              }
            },
            "key": "#/sample/sap.ui.core.sample.odata.v4.SalesOrderTP100_V4/preview"
          },
          {
            "id": "sap.ui.core.sample.odata.v4.SalesOrderTP100_V2",
            "name": "Sales Orders TP100 via OData V2 Service",
            "description": "Example for consuming an OData V2 Service via an OData V4 Model",
            "entityId": "sap.ui.model.odata.v4.ODataModel",
            "contexts": {
              "sap.ui.model.odata.v4.ODataModel": {
                "previousSampleId": "sap.ui.core.sample.odata.v4.SalesOrderTP100_V4"
              }
            },
            "key": "#/sample/sap.ui.core.sample.odata.v4.SalesOrderTP100_V2/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.odata.v4",
        "library": "sap.ui.core",
        "searchTags": "OData V4 Model ODataV4Model Data Binding OData V2 Service Consumption Example for OData V2 service consumption with an OData V4 model Operation Binding OData V4 model operation bindings example; refer to the Sales Orders example to understand other OData V4 model features Sales Orders Example for OData V4 EPM Sales Orders Sales Orders Template Example for OData V4 EPM Sales Orders using XML Templating Sales Orders TP100 Example for consuming an OData V4 Service Sales Orders TP100 via OData V2 Service Example for consuming an OData V2 Service via an OData V4 Model OData V2 Service Consumption Operation Binding Sales Orders Sales Orders Template Sales Orders TP100 Sales Orders TP100 via OData V2 Service",
        "sampleCount": 6,
        "key": "#/entity/sap.ui.model.odata.v4.ODataModel"
      },
      {
        "id": "sap.ui.model.type.Date",
        "name": "Date Type",
        "category": "Data Binding",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.ui.core.sample.TypeDateAsDate",
            "name": "Date Type - Source As Date",
            "description": "This sample explains the formatting options of the date type with the date being available as date object.",
            "entityId": "sap.ui.model.type.Date",
            "contexts": {
              "sap.ui.model.type.Date": {
                "nextSampleId": "sap.ui.core.sample.TypeDateAsString"
              }
            },
            "key": "#/sample/sap.ui.core.sample.TypeDateAsDate/preview"
          },
          {
            "id": "sap.ui.core.sample.TypeDateAsString",
            "name": "Date Type - Source As String",
            "description": "This sample explains the formatting options of the date type with the date being available as string.",
            "entityId": "sap.ui.model.type.Date",
            "contexts": {
              "sap.ui.model.type.Date": {
                "previousSampleId": "sap.ui.core.sample.TypeDateAsDate"
              }
            },
            "key": "#/sample/sap.ui.core.sample.TypeDateAsString/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.type",
        "library": "sap.ui.core",
        "searchTags": "Date Type DateType Data Binding Date Type - Source As Date This sample explains the formatting options of the date type with the date being available as date object. Date Type - Source As String This sample explains the formatting options of the date type with the date being available as string. Date Type - Source As Date Date Type - Source As String",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.model.type.Date"
      },
      {
        "id": "sap.ui.model.type.DateTime",
        "name": "DateTime Type",
        "category": "Data Binding",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.TypeDateTimeAsDate",
            "name": "DateTime Type - Source As Date",
            "description": "This sample explains the formatting options of the datetime type.",
            "entityId": "sap.ui.model.type.DateTime",
            "contexts": {
              "sap.ui.model.type.DateTime": {
                "nextSampleId": "sap.ui.core.sample.TypeDateTimeAsString"
              }
            },
            "key": "#/sample/sap.ui.core.sample.TypeDateTimeAsDate/preview"
          },
          {
            "id": "sap.ui.core.sample.TypeDateTimeAsString",
            "name": "DateTime Type - Source As String",
            "description": "This sample explains the formatting options of the datetime type.",
            "entityId": "sap.ui.model.type.DateTime",
            "contexts": {
              "sap.ui.model.type.DateTime": {
                "previousSampleId": "sap.ui.core.sample.TypeDateTimeAsDate"
              }
            },
            "key": "#/sample/sap.ui.core.sample.TypeDateTimeAsString/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.type",
        "library": "sap.ui.core",
        "searchTags": "DateTime Type DateTimeType Data Binding DateTime Type - Source As Date This sample explains the formatting options of the datetime type. DateTime Type - Source As String This sample explains the formatting options of the datetime type. DateTime Type - Source As Date DateTime Type - Source As String",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.model.type.DateTime"
      },
      {
        "id": "sap.ui.model.type.Time",
        "name": "Time Type",
        "category": "Data Binding",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.TypeTimeAsTime",
            "name": "Time Type - Source As Time",
            "description": "This sample explains the formatting options of the time type.",
            "entityId": "sap.ui.model.type.Time",
            "contexts": {
              "sap.ui.model.type.Time": {}
            },
            "key": "#/sample/sap.ui.core.sample.TypeTimeAsTime/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.type",
        "library": "sap.ui.core",
        "searchTags": "Time Type TimeType Data Binding Time Type - Source As Time This sample explains the formatting options of the time type. Time Type - Source As Time",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.model.type.Time"
      },
      {
        "id": "sap.ui.model.type.Integer",
        "name": "Integer Type",
        "category": "Data Binding",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.TypeInteger",
            "name": "Integer Format",
            "description": "Formats and parses only the integer digits. The decimal digits are ignored.",
            "entityId": "sap.ui.model.type.Integer",
            "contexts": {
              "sap.ui.model.type.Integer": {}
            },
            "key": "#/sample/sap.ui.core.sample.TypeInteger/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.type",
        "library": "sap.ui.core",
        "searchTags": "Integer Type IntegerType Data Binding Integer Format Formats and parses only the integer digits. The decimal digits are ignored. Integer Format",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.model.type.Integer"
      },
      {
        "id": "sap.ui.model.type.Float",
        "name": "Float Type",
        "category": "Data Binding",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.TypeFloat",
            "name": "Float Format",
            "description": "Formats and parses both integer and decimal digits.",
            "entityId": "sap.ui.model.type.Float",
            "contexts": {
              "sap.ui.model.type.Float": {}
            },
            "key": "#/sample/sap.ui.core.sample.TypeFloat/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.type",
        "library": "sap.ui.core",
        "searchTags": "Float Type FloatType Data Binding Float Format Formats and parses both integer and decimal digits. Float Format",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.model.type.Float"
      },
      {
        "id": "sap.ui.model.type.Currency",
        "name": "Currency Type",
        "category": "Data Binding",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.TypeCurrency",
            "name": "Currency Format",
            "description": "Formats the number by using the parameters defined for the given currency code. Either currency symbol, currency code or none of them can be included in the final formatted string. It parses the given string into an array which contains both the currency number and currency code.",
            "entityId": "sap.ui.model.type.Currency",
            "contexts": {
              "sap.ui.model.type.Currency": {}
            },
            "key": "#/sample/sap.ui.core.sample.TypeCurrency/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.type",
        "library": "sap.ui.core",
        "searchTags": "Currency Type CurrencyType Data Binding Currency Format Formats the number by using the parameters defined for the given currency code. Either currency symbol, currency code or none of them can be included in the final formatted string. It parses the given string into an array which contains both the currency number and currency code. Currency Format",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.model.type.Currency"
      },
      {
        "id": "sap.ui.model.type.FileSize",
        "name": "FileSize Type",
        "category": "Data Binding",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.core.sample.TypeFileSize",
            "name": "FileSize Type",
            "description": "This sample explains the formatting options of the filesize type.",
            "entityId": "sap.ui.model.type.FileSize",
            "contexts": {
              "sap.ui.model.type.FileSize": {}
            },
            "key": "#/sample/sap.ui.core.sample.TypeFileSize/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model.type",
        "library": "sap.ui.core",
        "searchTags": "FileSize Type FileSizeType Data Binding FileSize Type This sample explains the formatting options of the filesize type. FileSize Type",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.model.type.FileSize"
      },
      {
        "id": "sap.ui.model.DataState",
        "name": "Data State",
        "category": "Data Binding",
        "since": "1.32",
        "samples": [
          {
            "id": "sap.ui.core.sample.DataState",
            "name": "Data State",
            "description": "A control can react on data state changes of a Binding and update it's states accordingly.",
            "entityId": "sap.ui.model.DataState",
            "contexts": {
              "sap.ui.model.DataState": {}
            },
            "key": "#/sample/sap.ui.core.sample.DataState/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model",
        "library": "sap.ui.core",
        "searchTags": "Data State DataState Data Binding Data State A control can react on data state changes of a Binding and update it's states accordingly. Data State",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.model.DataState"
      },
      {
        "id": "sap.ui.model.DataStateOData",
        "name": "OData Data State",
        "category": "Data Binding",
        "since": "1.32",
        "samples": [
          {
            "id": "sap.ui.core.sample.DataStateOData",
            "name": "OData Data State",
            "description": "A control can react on data state changes of a Binding and update it's states accordingly.",
            "entityId": "sap.ui.model.DataStateOData",
            "contexts": {
              "sap.ui.model.DataStateOData": {}
            },
            "key": "#/sample/sap.ui.core.sample.DataStateOData/preview"
          }
        ],
        "formFactors": "Independent",
        "namespace": "sap.ui.model",
        "library": "sap.ui.core",
        "searchTags": "OData Data State ODataDataState Data Binding OData Data State A control can react on data state changes of a Binding and update it's states accordingly. OData Data State",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.model.DataStateOData"
      },
      {
        "id": "sap.ui.core.tutorial.navigation",
        "name": "Navigation and Routing",
        "category": "Tutorial",
        "since": "1.30",
        "formFactors": "Independent",
        "description": "This tutorial illustrates the major features of navigation and routing inside SAPUI5 apps.",
        "docuLink": "#/topic/1b6dcd39a6a74f528b27ddb22f15af0d",
        "samplesAsSteps": [
          "Set Up the Initial App",
          "Enable Routing",
          "Catch Invalid Hashes",
          "Add a Back Button to the Not Found Page",
          "Display a Target Without Changing the Hash",
          "Navigate to Routes with Hard-Coded Patterns",
          "Navigate to Routes with Mandatory Parameters",
          "Navigate with Flip Transition",
          "Allow Bookmarkable Tabs with Optional Query Parameters",
          "Implement Lazy Loading",
          "Assign Multiple Targets",
          "Make a Search Bookmarkable",
          "Make Table Sorting Bookmarkable",
          "Make Dialogs Bookmarkable",
          "Reuse an Existing Route",
          "Handle Invalid Hashes by Listening to Bypassed Events",
          "Listen to Matched Events of Any Route"
        ],
        "namespace": "sap.ui.core.tutorial",
        "library": "sap.ui.core",
        "searchTags": "Navigation and Routing NavigationandRouting Tutorial Navigation and Routing - Step 1 - Set Up the Initial App Navigation and Routing - Step 2 - Enable Routing Navigation and Routing - Step 3 - Catch Invalid Hashes Navigation and Routing - Step 4 - Add a Back Button to the Not Found Page Navigation and Routing - Step 5 - Display a Target Without Changing the Hash Navigation and Routing - Step 6 - Navigate to Routes with Hard-Coded Patterns Navigation and Routing - Step 7 - Navigate to Routes with Mandatory Parameters Navigation and Routing - Step 8 - Navigate with Flip Transition Navigation and Routing - Step 9 - Allow Bookmarkable Tabs with Optional Query Parameters Navigation and Routing - Step 10 - Implement Lazy Loading Navigation and Routing - Step 11 - Assign Multiple Targets Navigation and Routing - Step 12 - Make a Search Bookmarkable Navigation and Routing - Step 13 - Make Table Sorting Bookmarkable Navigation and Routing - Step 14 - Make Dialogs Bookmarkable Navigation and Routing - Step 15 - Reuse an Existing Route Navigation and Routing - Step 16 - Handle Invalid Hashes by Listening to Bypassed Events Navigation and Routing - Step 17 - Listen to Matched Events of Any Route",
        "samples": [
          {
            "id": "sap.ui.core.tutorial.navigation.01",
            "name": "Navigation and Routing - Step 1 - Set Up the Initial App",
            "nextSampleId": "sap.ui.core.tutorial.navigation.02",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.01/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.02",
            "name": "Navigation and Routing - Step 2 - Enable Routing",
            "previousSampleId": "sap.ui.core.tutorial.navigation.01",
            "nextSampleId": "sap.ui.core.tutorial.navigation.03",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.02/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.03",
            "name": "Navigation and Routing - Step 3 - Catch Invalid Hashes",
            "previousSampleId": "sap.ui.core.tutorial.navigation.02",
            "nextSampleId": "sap.ui.core.tutorial.navigation.04",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.03/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.04",
            "name": "Navigation and Routing - Step 4 - Add a Back Button to the Not Found Page",
            "previousSampleId": "sap.ui.core.tutorial.navigation.03",
            "nextSampleId": "sap.ui.core.tutorial.navigation.05",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.04/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.05",
            "name": "Navigation and Routing - Step 5 - Display a Target Without Changing the Hash",
            "previousSampleId": "sap.ui.core.tutorial.navigation.04",
            "nextSampleId": "sap.ui.core.tutorial.navigation.06",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.05/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.06",
            "name": "Navigation and Routing - Step 6 - Navigate to Routes with Hard-Coded Patterns",
            "previousSampleId": "sap.ui.core.tutorial.navigation.05",
            "nextSampleId": "sap.ui.core.tutorial.navigation.07",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.06/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.07",
            "name": "Navigation and Routing - Step 7 - Navigate to Routes with Mandatory Parameters",
            "previousSampleId": "sap.ui.core.tutorial.navigation.06",
            "nextSampleId": "sap.ui.core.tutorial.navigation.08",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.07/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.08",
            "name": "Navigation and Routing - Step 8 - Navigate with Flip Transition",
            "previousSampleId": "sap.ui.core.tutorial.navigation.07",
            "nextSampleId": "sap.ui.core.tutorial.navigation.09",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.08/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.09",
            "name": "Navigation and Routing - Step 9 - Allow Bookmarkable Tabs with Optional Query Parameters",
            "previousSampleId": "sap.ui.core.tutorial.navigation.08",
            "nextSampleId": "sap.ui.core.tutorial.navigation.10",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.09/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.10",
            "name": "Navigation and Routing - Step 10 - Implement Lazy Loading",
            "previousSampleId": "sap.ui.core.tutorial.navigation.09",
            "nextSampleId": "sap.ui.core.tutorial.navigation.11",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.10/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.11",
            "name": "Navigation and Routing - Step 11 - Assign Multiple Targets",
            "previousSampleId": "sap.ui.core.tutorial.navigation.10",
            "nextSampleId": "sap.ui.core.tutorial.navigation.12",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.11/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.12",
            "name": "Navigation and Routing - Step 12 - Make a Search Bookmarkable",
            "previousSampleId": "sap.ui.core.tutorial.navigation.11",
            "nextSampleId": "sap.ui.core.tutorial.navigation.13",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.12/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.13",
            "name": "Navigation and Routing - Step 13 - Make Table Sorting Bookmarkable",
            "previousSampleId": "sap.ui.core.tutorial.navigation.12",
            "nextSampleId": "sap.ui.core.tutorial.navigation.14",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.13/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.14",
            "name": "Navigation and Routing - Step 14 - Make Dialogs Bookmarkable",
            "previousSampleId": "sap.ui.core.tutorial.navigation.13",
            "nextSampleId": "sap.ui.core.tutorial.navigation.15",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.14/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.15",
            "name": "Navigation and Routing - Step 15 - Reuse an Existing Route",
            "previousSampleId": "sap.ui.core.tutorial.navigation.14",
            "nextSampleId": "sap.ui.core.tutorial.navigation.16",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.15/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.16",
            "name": "Navigation and Routing - Step 16 - Handle Invalid Hashes by Listening to Bypassed Events",
            "previousSampleId": "sap.ui.core.tutorial.navigation.15",
            "nextSampleId": "sap.ui.core.tutorial.navigation.17",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.16/preview"
          },
          {
            "id": "sap.ui.core.tutorial.navigation.17",
            "name": "Navigation and Routing - Step 17 - Listen to Matched Events of Any Route",
            "previousSampleId": "sap.ui.core.tutorial.navigation.16",
            "entityId": "sap.ui.core.tutorial.navigation",
            "key": "#/sample/sap.ui.core.tutorial.navigation.17/preview"
          }
        ],
        "sampleCount": 17,
        "key": "#/entity/sap.ui.core.tutorial.navigation"
      },
      {
        "id": "sap.ui.core.tutorial.troubleshooting",
        "name": "Troubleshooting",
        "category": "Tutorial",
        "since": "1.48",
        "formFactors": "Independent",
        "description": "In this tutorial, we will show you some tools that will help you when you run into problems with your SAPUI5 app.",
        "docuLink": "#/topic/5661952e72df471b932eddc10350c081",
        "samplesAsSteps": [
          "Heap of Shards"
        ],
        "namespace": "sap.ui.core.tutorial",
        "library": "sap.ui.core",
        "searchTags": "Troubleshooting Troubleshooting Tutorial Troubleshooting - Step 1 - Heap of Shards",
        "samples": [
          {
            "id": "sap.ui.core.tutorial.troubleshooting.01",
            "name": "Troubleshooting - Step 1 - Heap of Shards",
            "entityId": "sap.ui.core.tutorial.troubleshooting",
            "key": "#/sample/sap.ui.core.tutorial.troubleshooting.01/preview"
          }
        ],
        "sampleCount": 1,
        "key": "#/entity/sap.ui.core.tutorial.troubleshooting"
      },
      {
        "id": "sap.ui.core.tutorial.databinding",
        "name": "Data Binding",
        "category": "Tutorial",
        "since": "1.30",
        "formFactors": "Independent",
        "description": "In this tutorial, we will explain the concepts of data binding in SAPUI5.",
        "docuLink": "#/topic/e5310932a71f42daa41f3a6143efca9c",
        "samplesAsSteps": [
          "No Data Binding",
          "Creating a Model",
          "Create Property Binding",
          "Two-Way Data Binding",
          "One-way Data Binding",
          "Resource Models",
          "(Optional) Resource Bundles and Multiple Languages",
          "Binding Paths: Accessing Properties in Hierarchically Structured Models",
          "Formatting Values",
          "Property Formatting Using Data Types",
          "Validation Using the Message Manager",
          "Aggregation Binding Using Templates",
          "Element Binding",
          "Expression Binding",
          "Aggregation Binding Using A Factory Function"
        ],
        "namespace": "sap.ui.core.tutorial",
        "library": "sap.ui.core",
        "searchTags": "Data Binding DataBinding Tutorial Data Binding - Step 1 - No Data Binding Data Binding - Step 2 - Creating a Model Data Binding - Step 3 - Create Property Binding Data Binding - Step 4 - Two-Way Data Binding Data Binding - Step 5 - One-way Data Binding Data Binding - Step 6 - Resource Models Data Binding - Step 7 - (Optional) Resource Bundles and Multiple Languages Data Binding - Step 8 - Binding Paths: Accessing Properties in Hierarchically Structured Models Data Binding - Step 9 - Formatting Values Data Binding - Step 10 - Property Formatting Using Data Types Data Binding - Step 11 - Validation Using the Message Manager Data Binding - Step 12 - Aggregation Binding Using Templates Data Binding - Step 13 - Element Binding Data Binding - Step 14 - Expression Binding Data Binding - Step 15 - Aggregation Binding Using A Factory Function",
        "samples": [
          {
            "id": "sap.ui.core.tutorial.databinding.01",
            "name": "Data Binding - Step 1 - No Data Binding",
            "nextSampleId": "sap.ui.core.tutorial.databinding.02",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.01/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.02",
            "name": "Data Binding - Step 2 - Creating a Model",
            "previousSampleId": "sap.ui.core.tutorial.databinding.01",
            "nextSampleId": "sap.ui.core.tutorial.databinding.03",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.02/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.03",
            "name": "Data Binding - Step 3 - Create Property Binding",
            "previousSampleId": "sap.ui.core.tutorial.databinding.02",
            "nextSampleId": "sap.ui.core.tutorial.databinding.04",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.03/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.04",
            "name": "Data Binding - Step 4 - Two-Way Data Binding",
            "previousSampleId": "sap.ui.core.tutorial.databinding.03",
            "nextSampleId": "sap.ui.core.tutorial.databinding.05",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.04/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.05",
            "name": "Data Binding - Step 5 - One-way Data Binding",
            "previousSampleId": "sap.ui.core.tutorial.databinding.04",
            "nextSampleId": "sap.ui.core.tutorial.databinding.06",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.05/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.06",
            "name": "Data Binding - Step 6 - Resource Models",
            "previousSampleId": "sap.ui.core.tutorial.databinding.05",
            "nextSampleId": "sap.ui.core.tutorial.databinding.07",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.06/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.07",
            "name": "Data Binding - Step 7 - (Optional) Resource Bundles and Multiple Languages",
            "previousSampleId": "sap.ui.core.tutorial.databinding.06",
            "nextSampleId": "sap.ui.core.tutorial.databinding.08",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.07/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.08",
            "name": "Data Binding - Step 8 - Binding Paths: Accessing Properties in Hierarchically Structured Models",
            "previousSampleId": "sap.ui.core.tutorial.databinding.07",
            "nextSampleId": "sap.ui.core.tutorial.databinding.09",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.08/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.09",
            "name": "Data Binding - Step 9 - Formatting Values",
            "previousSampleId": "sap.ui.core.tutorial.databinding.08",
            "nextSampleId": "sap.ui.core.tutorial.databinding.10",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.09/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.10",
            "name": "Data Binding - Step 10 - Property Formatting Using Data Types",
            "previousSampleId": "sap.ui.core.tutorial.databinding.09",
            "nextSampleId": "sap.ui.core.tutorial.databinding.11",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.10/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.11",
            "name": "Data Binding - Step 11 - Validation Using the Message Manager",
            "previousSampleId": "sap.ui.core.tutorial.databinding.10",
            "nextSampleId": "sap.ui.core.tutorial.databinding.12",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.11/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.12",
            "name": "Data Binding - Step 12 - Aggregation Binding Using Templates",
            "previousSampleId": "sap.ui.core.tutorial.databinding.11",
            "nextSampleId": "sap.ui.core.tutorial.databinding.13",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.12/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.13",
            "name": "Data Binding - Step 13 - Element Binding",
            "previousSampleId": "sap.ui.core.tutorial.databinding.12",
            "nextSampleId": "sap.ui.core.tutorial.databinding.14",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.13/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.14",
            "name": "Data Binding - Step 14 - Expression Binding",
            "previousSampleId": "sap.ui.core.tutorial.databinding.13",
            "nextSampleId": "sap.ui.core.tutorial.databinding.15",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.14/preview"
          },
          {
            "id": "sap.ui.core.tutorial.databinding.15",
            "name": "Data Binding - Step 15 - Aggregation Binding Using A Factory Function",
            "previousSampleId": "sap.ui.core.tutorial.databinding.14",
            "entityId": "sap.ui.core.tutorial.databinding",
            "key": "#/sample/sap.ui.core.tutorial.databinding.15/preview"
          }
        ],
        "sampleCount": 15,
        "key": "#/entity/sap.ui.core.tutorial.databinding"
      },
      {
        "id": "sap.ui.core.tutorial.mockserver",
        "name": "Mock Server",
        "category": "Tutorial",
        "since": "1.34",
        "formFactors": "Independent",
        "description": "In this tutorial, we will explore some advanced features of the mock server.",
        "docuLink": "#/topic/3a9728ec31f94ca18a7d543ce419d85d",
        "samplesAsSteps": [
          "Initial App Without Data",
          "Creating a Mock Server to Simulate Data",
          "Handling Custom URL Parameters",
          "Calling a Function Import"
        ],
        "namespace": "sap.ui.core.tutorial",
        "library": "sap.ui.core",
        "searchTags": "Mock Server MockServer Tutorial Mock Server - Step 1 - Initial App Without Data Mock Server - Step 2 - Creating a Mock Server to Simulate Data Mock Server - Step 3 - Handling Custom URL Parameters Mock Server - Step 4 - Calling a Function Import",
        "samples": [
          {
            "id": "sap.ui.core.tutorial.mockserver.01",
            "name": "Mock Server - Step 1 - Initial App Without Data",
            "nextSampleId": "sap.ui.core.tutorial.mockserver.02",
            "entityId": "sap.ui.core.tutorial.mockserver",
            "key": "#/sample/sap.ui.core.tutorial.mockserver.01/preview"
          },
          {
            "id": "sap.ui.core.tutorial.mockserver.02",
            "name": "Mock Server - Step 2 - Creating a Mock Server to Simulate Data",
            "previousSampleId": "sap.ui.core.tutorial.mockserver.01",
            "nextSampleId": "sap.ui.core.tutorial.mockserver.03",
            "entityId": "sap.ui.core.tutorial.mockserver",
            "key": "#/sample/sap.ui.core.tutorial.mockserver.02/preview"
          },
          {
            "id": "sap.ui.core.tutorial.mockserver.03",
            "name": "Mock Server - Step 3 - Handling Custom URL Parameters",
            "previousSampleId": "sap.ui.core.tutorial.mockserver.02",
            "nextSampleId": "sap.ui.core.tutorial.mockserver.04",
            "entityId": "sap.ui.core.tutorial.mockserver",
            "key": "#/sample/sap.ui.core.tutorial.mockserver.03/preview"
          },
          {
            "id": "sap.ui.core.tutorial.mockserver.04",
            "name": "Mock Server - Step 4 - Calling a Function Import",
            "previousSampleId": "sap.ui.core.tutorial.mockserver.03",
            "entityId": "sap.ui.core.tutorial.mockserver",
            "key": "#/sample/sap.ui.core.tutorial.mockserver.04/preview"
          }
        ],
        "sampleCount": 4,
        "key": "#/entity/sap.ui.core.tutorial.mockserver"
      },
      {
        "id": "sap.ui.core.tutorial.odatav4",
        "name": "OData V4",
        "category": "Tutorial",
        "since": "1.54",
        "formFactors": "Independent",
        "description": "In this tutorial, we will show you how to build a simple application using an OData V4 service.",
        "docuLink": "#/topic/bcdbde6911bd4fc68fd435cf8e306ed0",
        "samplesAsSteps": [
          "Set Up the Initial App",
          "Data Access and Client-Server Communication",
          "Automatic Type Detection",
          "Filtering, Sorting, and Counting",
          "Batch Groups",
          "Create and Edit",
          "Delete",
          "OData Operations"
        ],
        "namespace": "sap.ui.core.tutorial",
        "library": "sap.ui.core",
        "searchTags": "OData V4 ODataV4 Tutorial OData V4 - Step 1 - Set Up the Initial App OData V4 - Step 2 - Data Access and Client-Server Communication OData V4 - Step 3 - Automatic Type Detection OData V4 - Step 4 - Filtering, Sorting, and Counting OData V4 - Step 5 - Batch Groups OData V4 - Step 6 - Create and Edit OData V4 - Step 7 - Delete OData V4 - Step 8 - OData Operations",
        "samples": [
          {
            "id": "sap.ui.core.tutorial.odatav4.01",
            "name": "OData V4 - Step 1 - Set Up the Initial App",
            "nextSampleId": "sap.ui.core.tutorial.odatav4.02",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.01/preview"
          },
          {
            "id": "sap.ui.core.tutorial.odatav4.02",
            "name": "OData V4 - Step 2 - Data Access and Client-Server Communication",
            "previousSampleId": "sap.ui.core.tutorial.odatav4.01",
            "nextSampleId": "sap.ui.core.tutorial.odatav4.03",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.02/preview"
          },
          {
            "id": "sap.ui.core.tutorial.odatav4.03",
            "name": "OData V4 - Step 3 - Automatic Type Detection",
            "previousSampleId": "sap.ui.core.tutorial.odatav4.02",
            "nextSampleId": "sap.ui.core.tutorial.odatav4.04",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.03/preview"
          },
          {
            "id": "sap.ui.core.tutorial.odatav4.04",
            "name": "OData V4 - Step 4 - Filtering, Sorting, and Counting",
            "previousSampleId": "sap.ui.core.tutorial.odatav4.03",
            "nextSampleId": "sap.ui.core.tutorial.odatav4.05",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.04/preview"
          },
          {
            "id": "sap.ui.core.tutorial.odatav4.05",
            "name": "OData V4 - Step 5 - Batch Groups",
            "previousSampleId": "sap.ui.core.tutorial.odatav4.04",
            "nextSampleId": "sap.ui.core.tutorial.odatav4.06",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.05/preview"
          },
          {
            "id": "sap.ui.core.tutorial.odatav4.06",
            "name": "OData V4 - Step 6 - Create and Edit",
            "previousSampleId": "sap.ui.core.tutorial.odatav4.05",
            "nextSampleId": "sap.ui.core.tutorial.odatav4.07",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.06/preview"
          },
          {
            "id": "sap.ui.core.tutorial.odatav4.07",
            "name": "OData V4 - Step 7 - Delete",
            "previousSampleId": "sap.ui.core.tutorial.odatav4.06",
            "nextSampleId": "sap.ui.core.tutorial.odatav4.08",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.07/preview"
          },
          {
            "id": "sap.ui.core.tutorial.odatav4.08",
            "name": "OData V4 - Step 8 - OData Operations",
            "previousSampleId": "sap.ui.core.tutorial.odatav4.07",
            "entityId": "sap.ui.core.tutorial.odatav4",
            "key": "#/sample/sap.ui.core.tutorial.odatav4.08/preview"
          }
        ],
        "sampleCount": 8,
        "key": "#/entity/sap.ui.core.tutorial.odatav4"
      },
      {
        "id": "sap.ca.ui.AddPicture",
        "name": "Add Picture",
        "category": "User Input",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "formFactors": "Cozy",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "Add Picture AddPicture User Input",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.AddPicture"
      },
      {
        "id": "sap.ca.ui.PictureViewer",
        "name": "Picture Viewer",
        "category": "Display",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "formFactors": "Cozy",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "Picture Viewer PictureViewer Display",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.PictureViewer"
      },
      {
        "id": "sap.ca.ui.Hierarchy",
        "name": "Hierarchy",
        "category": "Display",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "formFactors": "Cozy",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "Hierarchy Hierarchy Display",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.Hierarchy"
      },
      {
        "id": "sap.ca.ui.OverflowContainer",
        "name": "Overflow Container",
        "category": "Container",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "formFactors": "Cozy",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "Overflow Container OverflowContainer Container",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.OverflowContainer"
      },
      {
        "id": "sap.ca.ui.FileUpload",
        "name": "File Upload",
        "category": "User Input",
        "formFactors": "Compact, Cozy",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "File Upload FileUpload User Input",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.FileUpload"
      },
      {
        "id": "sap.ca.ui.HierarchicalSelectDialog",
        "name": "Hierarchical Select Dialog",
        "category": "Popup",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "formFactors": "Cozy",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "Hierarchical Select Dialog HierarchicalSelectDialog Popup",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.HierarchicalSelectDialog"
      },
      {
        "id": "sap.ca.ui.OverviewTile",
        "name": "Overview Tile",
        "category": "Tile",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "formFactors": "Cozy",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "Overview Tile OverviewTile Tile",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.OverviewTile"
      },
      {
        "id": "sap.ca.ui.GrowingTileContainer",
        "name": "Growing Tile Container",
        "category": "Tile",
        "samples": [],
        "appComponent": "MOB-UIA-LIB-CC",
        "formFactors": "Cozy",
        "since": "1.16",
        "namespace": "sap.ca.ui",
        "library": "sap.ca.ui",
        "searchTags": "Growing Tile Container GrowingTileContainer Tile",
        "sampleCount": 0,
        "key": "#/entity/sap.ca.ui.GrowingTileContainer"
      },
      {
        "id": "sap.collaboration.components.fiori.sharing.dialog.Component",
        "name": "Share Dialog Component",
        "category": "Display",
        "appComponent": "CA-UI5-BS-SM",
        "formFactors": "Condensed, Cozy",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.collaboration.sample.ShareLinkAndComments",
            "name": "Share Link and Comments",
            "description": "This sample shows how to share a link and comments through the share dialog component.",
            "entityId": "sap.collaboration.components.fiori.sharing.dialog.Component",
            "contexts": {
              "sap.collaboration.components.fiori.sharing.dialog.Component": {
                "nextSampleId": "sap.collaboration.sample.ShareAttachmentsLinkAndComments"
              }
            },
            "key": "#/sample/sap.collaboration.sample.ShareLinkAndComments/preview"
          },
          {
            "id": "sap.collaboration.sample.ShareAttachmentsLinkAndComments",
            "name": "Share Attachments, Link and Comments",
            "description": "This sample shows how to share attachments, link and comments through the share dialog component.",
            "entityId": "sap.collaboration.components.fiori.sharing.dialog.Component",
            "contexts": {
              "sap.collaboration.components.fiori.sharing.dialog.Component": {
                "previousSampleId": "sap.collaboration.sample.ShareLinkAndComments",
                "nextSampleId": "sap.collaboration.sample.ShareExternalObject"
              }
            },
            "key": "#/sample/sap.collaboration.sample.ShareAttachmentsLinkAndComments/preview"
          },
          {
            "id": "sap.collaboration.sample.ShareExternalObject",
            "name": "Share External Object",
            "description": "This sample shows how to share an external object to SAP Jam.",
            "entityId": "sap.collaboration.components.fiori.sharing.dialog.Component",
            "contexts": {
              "sap.collaboration.components.fiori.sharing.dialog.Component": {
                "previousSampleId": "sap.collaboration.sample.ShareAttachmentsLinkAndComments"
              }
            },
            "key": "#/sample/sap.collaboration.sample.ShareExternalObject/preview"
          }
        ],
        "namespace": "sap.collaboration.components.fiori.sharing.dialog",
        "library": "sap.collaboration",
        "searchTags": "Share Dialog Component ShareDialogComponent Display Share Link and Comments This sample shows how to share a link and comments through the share dialog component. Share Attachments, Link and Comments This sample shows how to share attachments, link and comments through the share dialog component. Share External Object This sample shows how to share an external object to SAP Jam. Share Link and Comments Share Attachments, Link and Comments Share External Object",
        "sampleCount": 3,
        "key": "#/entity/sap.collaboration.components.fiori.sharing.dialog.Component"
      },
      {
        "id": "sap.collaboration.components.feed.Component",
        "name": "Group Feed Component",
        "category": "Display",
        "appComponent": "CA-UI5-BS-SM",
        "formFactors": "Condensed, Cozy",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.collaboration.sample.FeedComponentGroupIdMode",
            "name": "Group Feed Component - Group Id Mode",
            "description": "This sample shows how the feed component looks in Group Id mode.",
            "entityId": "sap.collaboration.components.feed.Component",
            "contexts": {
              "sap.collaboration.components.feed.Component": {
                "nextSampleId": "sap.collaboration.sample.FeedComponentUserMode"
              }
            },
            "key": "#/sample/sap.collaboration.sample.FeedComponentGroupIdMode/preview"
          },
          {
            "id": "sap.collaboration.sample.FeedComponentUserMode",
            "name": "Group Feed Component - User Mode",
            "description": "This sample shows how the feed component looks in User mode.",
            "entityId": "sap.collaboration.components.feed.Component",
            "contexts": {
              "sap.collaboration.components.feed.Component": {
                "previousSampleId": "sap.collaboration.sample.FeedComponentGroupIdMode",
                "nextSampleId": "sap.collaboration.sample.FeedComponentBOMode"
              }
            },
            "key": "#/sample/sap.collaboration.sample.FeedComponentUserMode/preview"
          },
          {
            "id": "sap.collaboration.sample.FeedComponentBOMode",
            "name": "Group Feed Component - Business Object Mode",
            "description": "This sample shows how the feed component looks in Business Object mode.",
            "entityId": "sap.collaboration.components.feed.Component",
            "contexts": {
              "sap.collaboration.components.feed.Component": {
                "previousSampleId": "sap.collaboration.sample.FeedComponentUserMode"
              }
            },
            "key": "#/sample/sap.collaboration.sample.FeedComponentBOMode/preview"
          }
        ],
        "namespace": "sap.collaboration.components.feed",
        "library": "sap.collaboration",
        "searchTags": "Group Feed Component GroupFeedComponent Display Group Feed Component - Group Id Mode This sample shows how the feed component looks in Group Id mode. Group Feed Component - User Mode This sample shows how the feed component looks in User mode. Group Feed Component - Business Object Mode This sample shows how the feed component looks in Business Object mode. Group Feed Component - Group Id Mode Group Feed Component - User Mode Group Feed Component - Business Object Mode",
        "sampleCount": 3,
        "key": "#/entity/sap.collaboration.components.feed.Component"
      },
      {
        "id": "sap.f.Avatar",
        "name": "Avatar",
        "category": "Display",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.f.sample.Avatar",
            "name": "Avatar",
            "description": "This sample demonstrates different combinations of types, shapes, and sizes of the Avatar.",
            "entityId": "sap.f.Avatar",
            "contexts": {
              "sap.f.Avatar": {}
            },
            "key": "#/sample/sap.f.sample.Avatar/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.f",
        "library": "sap.f",
        "searchTags": "Avatar Avatar Display Avatar This sample demonstrates different combinations of types, shapes, and sizes of the Avatar. Avatar",
        "sampleCount": 1,
        "key": "#/entity/sap.f.Avatar"
      },
      {
        "id": "sap.f.DynamicPage",
        "name": "Dynamic Page",
        "category": "Container",
        "since": "1.42",
        "samples": [
          {
            "id": "sap.f.sample.DynamicPageFreeStyle",
            "name": "Dynamic Page Freestyle Example",
            "description": "Dynamic Page freestyle example with a responsive <code>sap.m.Table</code> in the content area, showing that each control can be placed in the title and the header content areas.",
            "entityId": "sap.m.GenericTag",
            "contexts": {
              "sap.f.DynamicPage": {
                "nextSampleId": "sap.f.sample.DynamicPageAnalyticalTable"
              },
              "sap.m.GenericTag": {
                "previousSampleId": "sap.uxap.sample.ObjectPageHeaderActionButtons",
                "nextSampleId": "sap.m.sample.OverflowToolbarSimple"
              }
            },
            "key": "#/sample/sap.f.sample.DynamicPageFreeStyle/preview"
          },
          {
            "id": "sap.f.sample.DynamicPageAnalyticalTable",
            "name": "Dynamic Page with Analytical Table",
            "description": "Dynamic Page containing an Analytical Table in the content area and filters in the header aligned with the SAP Fiori 2 List Report floorplan.",
            "entityId": "sap.f.DynamicPage",
            "contexts": {
              "sap.f.DynamicPage": {
                "previousSampleId": "sap.f.sample.DynamicPageFreeStyle",
                "nextSampleId": "sap.f.sample.DynamicPageWithStickySubheader"
              }
            },
            "key": "#/sample/sap.f.sample.DynamicPageAnalyticalTable/preview"
          },
          {
            "id": "sap.f.sample.DynamicPageWithStickySubheader",
            "name": "Dynamic Page with Sticky Subheader",
            "description": "Dynamic Page containing an sap.m.IconTabBar in the sticky subheader content area.",
            "entityId": "sap.f.DynamicPage",
            "contexts": {
              "sap.f.DynamicPage": {
                "previousSampleId": "sap.f.sample.DynamicPageAnalyticalTable"
              }
            },
            "key": "#/sample/sap.f.sample.DynamicPageWithStickySubheader/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.f",
        "library": "sap.f",
        "searchTags": "Dynamic Page DynamicPage Container Dynamic Page Freestyle Example Dynamic Page freestyle example with a responsive <code>sap.m.Table</code> in the content area, showing that each control can be placed in the title and the header content areas. Dynamic Page with Analytical Table Dynamic Page containing an Analytical Table in the content area and filters in the header aligned with the SAP Fiori 2 List Report floorplan. Dynamic Page with Sticky Subheader Dynamic Page containing an sap.m.IconTabBar in the sticky subheader content area. Dynamic Page Freestyle Example Dynamic Page with Analytical Table Dynamic Page with Sticky Subheader",
        "sampleCount": 3,
        "key": "#/entity/sap.f.DynamicPage"
      },
      {
        "id": "sap.f.FlexibleColumnLayout",
        "name": "Flexible Column Layout",
        "category": "Container",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.f.sample.FlexibleColumnLayoutWithOneColumnStart",
            "name": "Flexible Column Layout with Routing and One Initial Column",
            "description": "Flexible Column Layout as an app with routing that starts with a single initial column.",
            "entityId": "sap.f.FlexibleColumnLayout",
            "contexts": {
              "sap.f.FlexibleColumnLayout": {
                "nextSampleId": "sap.f.sample.FlexibleColumnLayoutWithTwoColumnStart"
              }
            },
            "key": "#/sample/sap.f.sample.FlexibleColumnLayoutWithOneColumnStart/preview"
          },
          {
            "id": "sap.f.sample.FlexibleColumnLayoutWithTwoColumnStart",
            "name": "Flexible Column Layout with Routing and Two Initial Columns",
            "description": "Flexible Column Layout as an app with routing that starts with two initial columns.",
            "entityId": "sap.f.FlexibleColumnLayout",
            "contexts": {
              "sap.f.FlexibleColumnLayout": {
                "previousSampleId": "sap.f.sample.FlexibleColumnLayoutWithOneColumnStart",
                "nextSampleId": "sap.f.sample.FlexibleColumnLayoutWithFullscreenPage"
              }
            },
            "key": "#/sample/sap.f.sample.FlexibleColumnLayoutWithTwoColumnStart/preview"
          },
          {
            "id": "sap.f.sample.FlexibleColumnLayoutWithFullscreenPage",
            "name": "Flexible Column Layout with Routing and first page in fullscreen only",
            "description": "Flexible Column Layout as an app with routing that displays different pages in the initial column. The first page is only displayed in OneColumn layout type",
            "entityId": "sap.f.FlexibleColumnLayout",
            "contexts": {
              "sap.f.FlexibleColumnLayout": {
                "previousSampleId": "sap.f.sample.FlexibleColumnLayoutWithTwoColumnStart",
                "nextSampleId": "sap.f.sample.FlexibleColumnLayoutSimple"
              }
            },
            "key": "#/sample/sap.f.sample.FlexibleColumnLayoutWithFullscreenPage/preview"
          },
          {
            "id": "sap.f.sample.FlexibleColumnLayoutSimple",
            "name": "Flexible Column Layout (with Event Bus)",
            "description": "Clicking on a link in a column opens the next column.",
            "entityId": "sap.f.FlexibleColumnLayout",
            "contexts": {
              "sap.f.FlexibleColumnLayout": {
                "previousSampleId": "sap.f.sample.FlexibleColumnLayoutWithFullscreenPage"
              }
            },
            "key": "#/sample/sap.f.sample.FlexibleColumnLayoutSimple/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.f",
        "library": "sap.f",
        "searchTags": "Flexible Column Layout FlexibleColumnLayout Container Flexible Column Layout with Routing and One Initial Column Flexible Column Layout as an app with routing that starts with a single initial column. Flexible Column Layout with Routing and Two Initial Columns Flexible Column Layout as an app with routing that starts with two initial columns. Flexible Column Layout with Routing and first page in fullscreen only Flexible Column Layout as an app with routing that displays different pages in the initial column. The first page is only displayed in OneColumn layout type Flexible Column Layout (with Event Bus) Clicking on a link in a column opens the next column. Flexible Column Layout with Routing and One Initial Column Flexible Column Layout with Routing and Two Initial Columns Flexible Column Layout with Routing and first page in fullscreen only Flexible Column Layout (with Event Bus)",
        "sampleCount": 4,
        "key": "#/entity/sap.f.FlexibleColumnLayout"
      },
      {
        "id": "sap.f.semantic.SemanticPage",
        "name": "Semantic Page (sap.f)",
        "category": "Container",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.f.sample.SemanticPage",
            "name": "Semantic Page using Draft Indicator",
            "description": "This sample demonstrates the use of a <code>DraftIndicator</code> in the footer area.",
            "entityId": "sap.f.semantic.SemanticPage",
            "contexts": {
              "sap.f.semantic.SemanticPage": {
                "nextSampleId": "sap.f.sample.SemanticPageFreeStyle"
              }
            },
            "key": "#/sample/sap.f.sample.SemanticPage/preview"
          },
          {
            "id": "sap.f.sample.SemanticPageFreeStyle",
            "name": "Semantic Page - Freestyle Sample",
            "description": "This sample demonstrates a <code>SemanticPage</code> with all semantic-specific actions both in the title and in the footer areas.",
            "entityId": "sap.f.semantic.SemanticPage",
            "contexts": {
              "sap.f.semantic.SemanticPage": {
                "previousSampleId": "sap.f.sample.SemanticPage"
              }
            },
            "key": "#/sample/sap.f.sample.SemanticPageFreeStyle/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.f.semantic",
        "library": "sap.f",
        "searchTags": "Semantic Page (sap.f) SemanticPage(sap.f) Container Semantic Page using Draft Indicator This sample demonstrates the use of a <code>DraftIndicator</code> in the footer area. Semantic Page - Freestyle Sample This sample demonstrates a <code>SemanticPage</code> with all semantic-specific actions both in the title and in the footer areas. Semantic Page using Draft Indicator Semantic Page - Freestyle Sample",
        "sampleCount": 2,
        "key": "#/entity/sap.f.semantic.SemanticPage"
      },
      {
        "id": "sap.f.tutorial.fiori2",
        "name": "SAP Fiori 2.0 App",
        "category": "Tutorial",
        "since": "1.56",
        "formFactors": "Independent",
        "description": "In this tutorial, we showcase how to structure your UI5 app using the layout patterns that comply with the latest SAP Fiori guidelines.",
        "docuLink": "#docs/guide/c4de2df385174e58a689d9847c7553bd.html",
        "samplesAsSteps": [
          "Setting Up the Initial App",
          "Creating an Empty Flexible Column Layout",
          "Using Dynamic Page for the Master View",
          "Adding a Detail Page",
          "Using Object Page Layout as a Detail Page",
          "Adding a Floating Footer",
          "Routing",
          "Enhancing the Detail Page",
          "Adding a Detail-Detail Page",
          "Adding More Pages",
          "Using the Flexible Column Layout Semantic Helper",
          "Starting with Two Columns",
          "Setting the Master-Detail Pattern"
        ],
        "appComponent": "CA-UI5-CTR",
        "namespace": "sap.f.tutorial",
        "library": "sap.f",
        "searchTags": "SAP Fiori 2.0 App SAPFiori2.0App Tutorial SAP Fiori 2.0 App - Step 1 - Setting Up the Initial App SAP Fiori 2.0 App - Step 2 - Creating an Empty Flexible Column Layout SAP Fiori 2.0 App - Step 3 - Using Dynamic Page for the Master View SAP Fiori 2.0 App - Step 4 - Adding a Detail Page SAP Fiori 2.0 App - Step 5 - Using Object Page Layout as a Detail Page SAP Fiori 2.0 App - Step 6 - Adding a Floating Footer SAP Fiori 2.0 App - Step 7 - Routing SAP Fiori 2.0 App - Step 8 - Enhancing the Detail Page SAP Fiori 2.0 App - Step 9 - Adding a Detail-Detail Page SAP Fiori 2.0 App - Step 10 - Adding More Pages SAP Fiori 2.0 App - Step 11 - Using the Flexible Column Layout Semantic Helper SAP Fiori 2.0 App - Step 12 - Starting with Two Columns SAP Fiori 2.0 App - Step 13 - Setting the Master-Detail Pattern",
        "samples": [
          {
            "id": "sap.f.tutorial.fiori2.01",
            "name": "SAP Fiori 2.0 App - Step 1 - Setting Up the Initial App",
            "nextSampleId": "sap.f.tutorial.fiori2.02",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.01/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.02",
            "name": "SAP Fiori 2.0 App - Step 2 - Creating an Empty Flexible Column Layout",
            "previousSampleId": "sap.f.tutorial.fiori2.01",
            "nextSampleId": "sap.f.tutorial.fiori2.03",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.02/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.03",
            "name": "SAP Fiori 2.0 App - Step 3 - Using Dynamic Page for the Master View",
            "previousSampleId": "sap.f.tutorial.fiori2.02",
            "nextSampleId": "sap.f.tutorial.fiori2.04",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.03/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.04",
            "name": "SAP Fiori 2.0 App - Step 4 - Adding a Detail Page",
            "previousSampleId": "sap.f.tutorial.fiori2.03",
            "nextSampleId": "sap.f.tutorial.fiori2.05",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.04/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.05",
            "name": "SAP Fiori 2.0 App - Step 5 - Using Object Page Layout as a Detail Page",
            "previousSampleId": "sap.f.tutorial.fiori2.04",
            "nextSampleId": "sap.f.tutorial.fiori2.06",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.05/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.06",
            "name": "SAP Fiori 2.0 App - Step 6 - Adding a Floating Footer",
            "previousSampleId": "sap.f.tutorial.fiori2.05",
            "nextSampleId": "sap.f.tutorial.fiori2.07",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.06/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.07",
            "name": "SAP Fiori 2.0 App - Step 7 - Routing",
            "previousSampleId": "sap.f.tutorial.fiori2.06",
            "nextSampleId": "sap.f.tutorial.fiori2.08",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.07/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.08",
            "name": "SAP Fiori 2.0 App - Step 8 - Enhancing the Detail Page",
            "previousSampleId": "sap.f.tutorial.fiori2.07",
            "nextSampleId": "sap.f.tutorial.fiori2.09",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.08/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.09",
            "name": "SAP Fiori 2.0 App - Step 9 - Adding a Detail-Detail Page",
            "previousSampleId": "sap.f.tutorial.fiori2.08",
            "nextSampleId": "sap.f.tutorial.fiori2.10",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.09/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.10",
            "name": "SAP Fiori 2.0 App - Step 10 - Adding More Pages",
            "previousSampleId": "sap.f.tutorial.fiori2.09",
            "nextSampleId": "sap.f.tutorial.fiori2.11",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.10/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.11",
            "name": "SAP Fiori 2.0 App - Step 11 - Using the Flexible Column Layout Semantic Helper",
            "previousSampleId": "sap.f.tutorial.fiori2.10",
            "nextSampleId": "sap.f.tutorial.fiori2.12",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.11/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.12",
            "name": "SAP Fiori 2.0 App - Step 12 - Starting with Two Columns",
            "previousSampleId": "sap.f.tutorial.fiori2.11",
            "nextSampleId": "sap.f.tutorial.fiori2.13",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.12/preview"
          },
          {
            "id": "sap.f.tutorial.fiori2.13",
            "name": "SAP Fiori 2.0 App - Step 13 - Setting the Master-Detail Pattern",
            "previousSampleId": "sap.f.tutorial.fiori2.12",
            "entityId": "sap.f.tutorial.fiori2",
            "key": "#/sample/sap.f.tutorial.fiori2.13/preview"
          }
        ],
        "sampleCount": 13,
        "key": "#/entity/sap.f.tutorial.fiori2"
      },
      {
        "id": "sap.f.GridList",
        "name": "Grid List",
        "category": "List",
        "since": "1.60",
        "samples": [
          {
            "id": "sap.f.sample.GridListBasic",
            "name": "Grid List - Basic examples",
            "description": "",
            "entityId": "sap.f.GridList",
            "contexts": {
              "sap.f.GridList": {
                "nextSampleId": "sap.f.sample.GridListBreakPoints"
              }
            },
            "key": "#/sample/sap.f.sample.GridListBasic/preview"
          },
          {
            "id": "sap.f.sample.GridListBreakPoints",
            "name": "Grid List - Break point examples - S, M, L, XL",
            "description": "This sample illustrates how to configure the responsive settings for different container sizes.",
            "entityId": "sap.f.GridList",
            "contexts": {
              "sap.f.GridList": {
                "previousSampleId": "sap.f.sample.GridListBasic",
                "nextSampleId": "sap.f.sample.GridListBoxContainer"
              }
            },
            "key": "#/sample/sap.f.sample.GridListBreakPoints/preview"
          },
          {
            "id": "sap.f.sample.GridListBoxContainer",
            "name": "Grid List with GridBoxLayout",
            "description": "This layout allows to display same height grid items with configurable width.",
            "entityId": "sap.f.GridList",
            "contexts": {
              "sap.f.GridList": {
                "previousSampleId": "sap.f.sample.GridListBreakPoints",
                "nextSampleId": "sap.f.sample.GridListBoxContainerGrouping"
              }
            },
            "key": "#/sample/sap.f.sample.GridListBoxContainer/preview"
          },
          {
            "id": "sap.f.sample.GridListBoxContainerGrouping",
            "name": "Grid List features - Grouping, Header, Growing",
            "description": "This sample illustrates subgroups with headers, custom header and lazy loading of GridList items.",
            "entityId": "sap.f.GridList",
            "contexts": {
              "sap.f.GridList": {
                "previousSampleId": "sap.f.sample.GridListBoxContainer",
                "nextSampleId": "sap.f.sample.GridListBoxContainerReal"
              }
            },
            "key": "#/sample/sap.f.sample.GridListBoxContainerGrouping/preview"
          },
          {
            "id": "sap.f.sample.GridListBoxContainerReal",
            "name": "Grid List - Recommended Item Designs",
            "description": "This is a sample for GridList item templates representing a typical tools page dashboard style.",
            "entityId": "sap.f.GridList",
            "contexts": {
              "sap.f.GridList": {
                "previousSampleId": "sap.f.sample.GridListBoxContainerGrouping"
              }
            },
            "key": "#/sample/sap.f.sample.GridListBoxContainerReal/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.f",
        "library": "sap.f",
        "searchTags": "Grid List GridList List Grid List - Basic examples  Grid List - Break point examples - S, M, L, XL This sample illustrates how to configure the responsive settings for different container sizes. Grid List with GridBoxLayout This layout allows to display same height grid items with configurable width. Grid List features - Grouping, Header, Growing This sample illustrates subgroups with headers, custom header and lazy loading of GridList items. Grid List - Recommended Item Designs This is a sample for GridList item templates representing a typical tools page dashboard style. Grid List - Basic examples Grid List - Break point examples - S, M, L, XL Grid List with GridBoxLayout Grid List features - Grouping, Header, Growing Grid List - Recommended Item Designs",
        "sampleCount": 5,
        "key": "#/entity/sap.f.GridList"
      },
      {
        "id": "sap.f.ShellBar",
        "name": "Shell Bar",
        "category": "Display",
        "since": "1.63",
        "samples": [
          {
            "id": "sap.f.sample.ShellBar",
            "name": "Shell Bar with title mega menu",
            "description": "Shell Bar example showing the control title as part of a mega menu, configurable by the app developer.",
            "entityId": "sap.f.ShellBar",
            "contexts": {
              "sap.f.ShellBar": {
                "nextSampleId": "sap.f.sample.ShellBarWIthMenuButton"
              }
            },
            "key": "#/sample/sap.f.sample.ShellBar/preview"
          },
          {
            "id": "sap.f.sample.ShellBarWIthMenuButton",
            "name": "Shell Bar with menu button",
            "description": "Shell Bar example with a menu button and a plain title.",
            "entityId": "sap.f.ShellBar",
            "contexts": {
              "sap.f.ShellBar": {
                "previousSampleId": "sap.f.sample.ShellBar",
                "nextSampleId": "sap.f.sample.ShellBarWithSearch"
              }
            },
            "key": "#/sample/sap.f.sample.ShellBarWIthMenuButton/preview"
          },
          {
            "id": "sap.f.sample.ShellBarWithSearch",
            "name": "Shell Bar with search",
            "description": "Shell Bar example with configured search functionality.",
            "entityId": "sap.f.ShellBar",
            "contexts": {
              "sap.f.ShellBar": {
                "previousSampleId": "sap.f.sample.ShellBarWIthMenuButton",
                "nextSampleId": "sap.f.sample.ShellBarWithFlexibleColumnLayout"
              }
            },
            "key": "#/sample/sap.f.sample.ShellBarWithSearch/preview"
          },
          {
            "id": "sap.f.sample.ShellBarWithFlexibleColumnLayout",
            "name": "Shell Bar with Flexible Column Layout",
            "description": "Example of Shell Bar in combination with Flexible Column Layout.",
            "entityId": "sap.f.ShellBar",
            "contexts": {
              "sap.f.ShellBar": {
                "previousSampleId": "sap.f.sample.ShellBarWithSearch",
                "nextSampleId": "sap.f.sample.ShellBarWithSplitApp"
              }
            },
            "key": "#/sample/sap.f.sample.ShellBarWithFlexibleColumnLayout/preview"
          },
          {
            "id": "sap.f.sample.ShellBarWithSplitApp",
            "name": "Shell Bar with Split App",
            "description": "Example of Shell Bar in combination with Split App.",
            "entityId": "sap.f.ShellBar",
            "contexts": {
              "sap.f.ShellBar": {
                "previousSampleId": "sap.f.sample.ShellBarWithFlexibleColumnLayout"
              }
            },
            "key": "#/sample/sap.f.sample.ShellBarWithSplitApp/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.f",
        "library": "sap.f",
        "searchTags": "Shell Bar ShellBar Display Shell Bar with title mega menu Shell Bar example showing the control title as part of a mega menu, configurable by the app developer. Shell Bar with menu button Shell Bar example with a menu button and a plain title. Shell Bar with search Shell Bar example with configured search functionality. Shell Bar with Flexible Column Layout Example of Shell Bar in combination with Flexible Column Layout. Shell Bar with Split App Example of Shell Bar in combination with Split App. Shell Bar with title mega menu Shell Bar with menu button Shell Bar with search Shell Bar with Flexible Column Layout Shell Bar with Split App",
        "sampleCount": 5,
        "key": "#/entity/sap.f.ShellBar"
      },
      {
        "id": "sap.f.Card",
        "name": "Card (sap.f)",
        "category": "Display",
        "since": "1.64",
        "samples": [
          {
            "id": "sap.f.sample.Card",
            "name": "Card Control",
            "description": "This sample illustrates how to specify the predefined header and the content of the Card control.",
            "entityId": "sap.f.Card",
            "contexts": {
              "sap.f.Card": {}
            },
            "key": "#/sample/sap.f.sample.Card/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.f",
        "library": "sap.f",
        "searchTags": "Card (sap.f) Card(sap.f) Display Card Control This sample illustrates how to specify the predefined header and the content of the Card control. Card Control",
        "sampleCount": 1,
        "key": "#/entity/sap.f.Card"
      },
      {
        "id": "sap.f.GridContainer",
        "name": "Grid Container (Experimental)",
        "category": "Container",
        "formFactors": "Independent",
        "since": "1.65",
        "samples": [
          {
            "id": "sap.f.sample.GridContainer",
            "name": "Grid Container (Experimental)",
            "description": "This sample represents the general usage of GridContainer.",
            "entityId": "sap.f.GridContainer",
            "contexts": {
              "sap.f.GridContainer": {
                "nextSampleId": "sap.f.sample.GridContainerDragAndDrop"
              }
            },
            "key": "#/sample/sap.f.sample.GridContainer/preview"
          },
          {
            "id": "sap.f.sample.GridContainerDragAndDrop",
            "name": "Grid Container (Experimental) - Drag and Drop",
            "description": "This sample represents GridContainer with enabled Drag and Drop functionality.",
            "entityId": "sap.f.GridContainer",
            "contexts": {
              "sap.f.GridContainer": {
                "previousSampleId": "sap.f.sample.GridContainer"
              }
            },
            "key": "#/sample/sap.f.sample.GridContainerDragAndDrop/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "namespace": "sap.f",
        "library": "sap.f",
        "searchTags": "Grid Container (Experimental) GridContainer(Experimental) Container Grid Container (Experimental) This sample represents the general usage of GridContainer. Grid Container (Experimental) - Drag and Drop This sample represents GridContainer with enabled Drag and Drop functionality. Grid Container (Experimental) Grid Container (Experimental) - Drag and Drop",
        "sampleCount": 2,
        "key": "#/entity/sap.f.GridContainer"
      },
      {
        "id": "sap.gantt.GanttChartContainer",
        "name": "Gantt Chart",
        "category": "Data Visualization",
        "appComponent": "CA-UI5-CTR-GNT",
        "formFactors": "Compact, Cozy",
        "since": "1.36",
        "samples": [
          {
            "id": "sap.gantt.sample.BasicGanttChart",
            "name": "Gantt Chart",
            "description": "Displays a Gantt chart in combination with a tree table and a toolbar.",
            "entityId": "sap.gantt.GanttChartContainer",
            "contexts": {
              "sap.gantt.GanttChartContainer": {}
            },
            "key": "#/sample/sap.gantt.sample.BasicGanttChart/preview"
          }
        ],
        "namespace": "sap.gantt",
        "library": "sap.gantt",
        "searchTags": "Gantt Chart GanttChart Data Visualization Gantt Chart Displays a Gantt chart in combination with a tree table and a toolbar. Gantt Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.gantt.GanttChartContainer"
      },
      {
        "id": "sap.gantt.simple.GanttChartWithTable",
        "name": "Gantt Chart 2.0",
        "category": "Data Visualization",
        "appComponent": "CA-UI5-CTR-GNT",
        "formFactors": "Compact, Cozy",
        "since": "1.60",
        "samples": [
          {
            "id": "sap.gantt.sample.GanttChart2JSON",
            "name": "Gantt Chart with JSON Binding",
            "description": "Simple Gantt chart with JSON model binding.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "nextSampleId": "sap.gantt.sample.GanttChart2OData"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2JSON/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2OData",
            "name": "Gantt Chart with OData Binding",
            "description": "A new Gantt chart that can be manipulated using OData binding. The sample supports resizing, drag and drop, relationships management, and other actions.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2JSON",
                "nextSampleId": "sap.gantt.sample.GanttChart2ConditionalShape"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2OData/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2ConditionalShape",
            "name": "Conditional Shape",
            "description": "A simple Gantt chart with a conditional shape.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2OData",
                "nextSampleId": "sap.gantt.sample.GanttChart2Shapes"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2ConditionalShape/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2Shapes",
            "name": "Shapes",
            "description": "A Gantt chart with all standard shapes.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2ConditionalShape",
                "nextSampleId": "sap.gantt.sample.GanttChart2Resize"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2Shapes/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2Resize",
            "name": "Resize & Select",
            "description": "This sample demonstrates selection and resizing.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2Shapes",
                "nextSampleId": "sap.gantt.sample.GanttChart2Sorting"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2Resize/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2Sorting",
            "name": "Sorting",
            "description": "This sample shows how to sort shapes in a row.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2Resize",
                "nextSampleId": "sap.gantt.sample.GanttChart2Calendar"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2Sorting/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2Calendar",
            "name": "Calendar Definition",
            "description": "This sample shows how to define custom calendar shapes.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2Sorting",
                "nextSampleId": "sap.gantt.sample.GanttChart2ZoomingFullScreen"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2Calendar/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2ZoomingFullScreen",
            "name": "Full-Screen Zooming",
            "description": "Shows how to define full-screen zooming strategy. Full-screen zooming always shows the total horizon.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2Calendar",
                "nextSampleId": "sap.gantt.sample.GanttChart2ZoomingProportion"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2ZoomingFullScreen/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2ZoomingProportion",
            "name": "Proportional Zooming",
            "description": "Shows how to define proportional zooming strategy. Proportional zooming allows the users to zoom in or out by switching between arbitrary zoom levels.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2ZoomingFullScreen",
                "nextSampleId": "sap.gantt.sample.GanttChart2ZoomingStepWise"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2ZoomingProportion/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2ZoomingStepWise",
            "name": "Step-Wise Zooming",
            "description": "This sample shows how to define step-wise zooming strategy. Step-wise zooming allows the users to zoom in or out by switching between predefined zoom levels.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2ZoomingProportion",
                "nextSampleId": "sap.gantt.sample.GanttChart2Legend"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2ZoomingStepWise/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2Legend",
            "name": "Legends",
            "description": "This sample shows how to define legends in Gantt charts.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2ZoomingStepWise",
                "nextSampleId": "sap.gantt.sample.GanttChart2CustomShape"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2Legend/preview"
          },
          {
            "id": "sap.gantt.sample.GanttChart2CustomShape",
            "name": "Custom Shape Definition",
            "description": "This sample shows how to define a custom shape.",
            "entityId": "sap.gantt.simple.GanttChartWithTable",
            "contexts": {
              "sap.gantt.simple.GanttChartWithTable": {
                "previousSampleId": "sap.gantt.sample.GanttChart2Legend"
              }
            },
            "key": "#/sample/sap.gantt.sample.GanttChart2CustomShape/preview"
          }
        ],
        "namespace": "sap.gantt.simple",
        "library": "sap.gantt",
        "searchTags": "Gantt Chart 2.0 GanttChart2.0 Data Visualization Gantt Chart with JSON Binding Simple Gantt chart with JSON model binding. Gantt Chart with OData Binding A new Gantt chart that can be manipulated using OData binding. The sample supports resizing, drag and drop, relationships management, and other actions. Conditional Shape A simple Gantt chart with a conditional shape. Shapes A Gantt chart with all standard shapes. Resize & Select This sample demonstrates selection and resizing. Sorting This sample shows how to sort shapes in a row. Calendar Definition This sample shows how to define custom calendar shapes. Full-Screen Zooming Shows how to define full-screen zooming strategy. Full-screen zooming always shows the total horizon. Proportional Zooming Shows how to define proportional zooming strategy. Proportional zooming allows the users to zoom in or out by switching between arbitrary zoom levels. Step-Wise Zooming This sample shows how to define step-wise zooming strategy. Step-wise zooming allows the users to zoom in or out by switching between predefined zoom levels. Legends This sample shows how to define legends in Gantt charts. Custom Shape Definition This sample shows how to define a custom shape. Gantt Chart with JSON Binding Gantt Chart with OData Binding Conditional Shape Shapes Resize & Select Sorting Calendar Definition Full-Screen Zooming Proportional Zooming Step-Wise Zooming Legends Custom Shape Definition",
        "sampleCount": 12,
        "key": "#/entity/sap.gantt.simple.GanttChartWithTable"
      },
      {
        "id": "sap.gantt.simple.GanttChartContainer",
        "name": "Gantt Chart 2.0 Container",
        "category": "Data Visualization",
        "appComponent": "CA-UI5-CTR-GNT",
        "formFactors": "Compact, Cozy",
        "since": "1.60",
        "samples": [
          {
            "id": "sap.gantt.sample.GanttChartContainer",
            "name": "Gantt Chart Container",
            "description": "Displays complex Gantt charts in a container, which resembles SAP Transportation Management Planning. This sample supports drag and drop across the rows, switching layouts and hierarchy, and other actions.",
            "entityId": "sap.gantt.simple.GanttChartContainer",
            "contexts": {
              "sap.gantt.simple.GanttChartContainer": {}
            },
            "key": "#/sample/sap.gantt.sample.GanttChartContainer/preview"
          }
        ],
        "namespace": "sap.gantt.simple",
        "library": "sap.gantt",
        "searchTags": "Gantt Chart 2.0 Container GanttChart2.0Container Data Visualization Gantt Chart Container Displays complex Gantt charts in a container, which resembles SAP Transportation Management Planning. This sample supports drag and drop across the rows, switching layouts and hierarchy, and other actions. Gantt Chart Container",
        "sampleCount": 1,
        "key": "#/entity/sap.gantt.simple.GanttChartContainer"
      },
      {
        "id": "sap.gantt.simple.GanttPrinting",
        "name": "Gantt Chart 2.0 PDF Export",
        "category": "Data Visualization",
        "appComponent": "CA-UI5-CTR-GNT",
        "formFactors": "Compact, Cozy",
        "since": "1.66",
        "samples": [
          {
            "id": "sap.gantt.sample.GanttPrinting",
            "name": "Gantt Chart PDF Export",
            "description": "This sample shows export Gantt Chart to PDF",
            "entityId": "sap.gantt.simple.GanttPrinting",
            "contexts": {
              "sap.gantt.simple.GanttPrinting": {}
            },
            "key": "#/sample/sap.gantt.sample.GanttPrinting/preview"
          }
        ],
        "namespace": "sap.gantt.simple",
        "library": "sap.gantt",
        "searchTags": "Gantt Chart 2.0 PDF Export GanttChart2.0PDFExport Data Visualization Gantt Chart PDF Export This sample shows export Gantt Chart to PDF Gantt Chart PDF Export",
        "sampleCount": 1,
        "key": "#/entity/sap.gantt.simple.GanttPrinting"
      },
      {
        "id": "sap.me.Calendar",
        "name": "Calendar (sap.me)",
        "category": "User Input",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.me.sample.DurationCalendar",
            "name": "Calendar, time spans",
            "description": "Calendar with buttons that can change the display and show a period of a week, 2 weeks, a month, 2 months.",
            "entityId": "sap.me.Calendar",
            "contexts": {
              "sap.me.Calendar": {
                "nextSampleId": "sap.me.sample.SelectionCalendar"
              }
            },
            "key": "#/sample/sap.me.sample.DurationCalendar/preview"
          },
          {
            "id": "sap.me.sample.SelectionCalendar",
            "name": "Calendar, selection modes",
            "description": "Calendar with buttons that can change the selection mode of the calendar: single day selection, multi day selection and range selection.",
            "entityId": "sap.me.Calendar",
            "contexts": {
              "sap.me.Calendar": {
                "previousSampleId": "sap.me.sample.DurationCalendar"
              }
            },
            "key": "#/sample/sap.me.sample.SelectionCalendar/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.me",
        "library": "sap.me",
        "searchTags": "Calendar (sap.me) Calendar(sap.me) User Input Calendar, time spans Calendar with buttons that can change the display and show a period of a week, 2 weeks, a month, 2 months. Calendar, selection modes Calendar with buttons that can change the selection mode of the calendar: single day selection, multi day selection and range selection. Calendar, time spans Calendar, selection modes",
        "sampleCount": 2,
        "key": "#/entity/sap.me.Calendar"
      },
      {
        "id": "sap.rules.ui.RuleBuilder",
        "name": "Rule Builder",
        "category": "Tutorial",
        "since": "1.40.0",
        "samples": [
          {
            "id": "sap.rules.ui.sample.GuidedDecisionTable",
            "name": "Rule Builder - Basic Decision Table",
            "description": "Decision table example showing Basic input mode.",
            "entityId": "sap.rules.ui.RuleBuilder",
            "contexts": {
              "sap.rules.ui.RuleBuilder": {
                "nextSampleId": "sap.rules.ui.sample.TextDecisionTable"
              }
            },
            "key": "#/sample/sap.rules.ui.sample.GuidedDecisionTable/preview"
          },
          {
            "id": "sap.rules.ui.sample.TextDecisionTable",
            "name": "Rule Builder - Advanced Decision Table",
            "description": "Decision table example showing Advanced input mode.",
            "entityId": "sap.rules.ui.RuleBuilder",
            "contexts": {
              "sap.rules.ui.RuleBuilder": {
                "previousSampleId": "sap.rules.ui.sample.GuidedDecisionTable",
                "nextSampleId": "sap.rules.ui.sample.TextRule"
              }
            },
            "key": "#/sample/sap.rules.ui.sample.TextDecisionTable/preview"
          },
          {
            "id": "sap.rules.ui.sample.TextRule",
            "name": "Rule Builder - Text Rule",
            "description": "Text rule example showing Advanced input mode.",
            "entityId": "sap.rules.ui.RuleBuilder",
            "contexts": {
              "sap.rules.ui.RuleBuilder": {
                "previousSampleId": "sap.rules.ui.sample.TextDecisionTable",
                "nextSampleId": "sap.rules.ui.sample.TextRuleAst"
              }
            },
            "key": "#/sample/sap.rules.ui.sample.TextRule/preview"
          },
          {
            "id": "sap.rules.ui.sample.TextRuleAst",
            "name": "Rule Builder - Text Rule (Expression Language 2.0)",
            "description": "Text Rule example showing input mode using Expression Language 2.0.",
            "entityId": "sap.rules.ui.RuleBuilder",
            "contexts": {
              "sap.rules.ui.RuleBuilder": {
                "previousSampleId": "sap.rules.ui.sample.TextRule",
                "nextSampleId": "sap.rules.ui.sample.DecisionTableAst"
              }
            },
            "key": "#/sample/sap.rules.ui.sample.TextRuleAst/preview"
          },
          {
            "id": "sap.rules.ui.sample.DecisionTableAst",
            "name": "Rule Builder - Decision Table (Expression Language 2.0)",
            "description": "Decision Table example showing input mode using Expression Language 2.0.",
            "entityId": "sap.rules.ui.RuleBuilder",
            "contexts": {
              "sap.rules.ui.RuleBuilder": {
                "previousSampleId": "sap.rules.ui.sample.TextRuleAst"
              }
            },
            "key": "#/sample/sap.rules.ui.sample.DecisionTableAst/preview"
          }
        ],
        "appComponent": "CA-UI5-RUL",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.rules.ui",
        "library": "sap.rules.ui",
        "searchTags": "Rule Builder RuleBuilder Tutorial Rule Builder - Basic Decision Table Decision table example showing Basic input mode. Rule Builder - Advanced Decision Table Decision table example showing Advanced input mode. Rule Builder - Text Rule Text rule example showing Advanced input mode. Rule Builder - Text Rule (Expression Language 2.0) Text Rule example showing input mode using Expression Language 2.0. Rule Builder - Decision Table (Expression Language 2.0) Decision Table example showing input mode using Expression Language 2.0. Rule Builder - Basic Decision Table Rule Builder - Advanced Decision Table Rule Builder - Text Rule Rule Builder - Text Rule (Expression Language 2.0) Rule Builder - Decision Table (Expression Language 2.0)",
        "sampleCount": 5,
        "key": "#/entity/sap.rules.ui.RuleBuilder"
      },
      {
        "id": "sap.suite.ui.commons.ProcessFlow",
        "name": "Process Flow",
        "formFactors": "Compact, Cozy",
        "category": "Display",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlow",
            "name": "Process Flow",
            "description": "Process Flow is a complex control that enables you to display documents or other items in their flow (fixed position).",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowScrollable"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlow/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowScrollable",
            "name": "Scrollable Process Flow",
            "description": "Process Flow is a complex control that enables you to display documents or other items in their flow (smaller place with scrolling enablement).",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlow",
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowConnectionLabels"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowScrollable/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowConnectionLabels",
            "name": "Process Flow with Connection Labels",
            "description": "This sample shows the Process Flow control with connection labels.",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlowScrollable",
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowAggregation"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowConnectionLabels/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowAggregation",
            "name": "Process Flow with Aggregated Nodes",
            "description": "This sample shows the Process Flow control with aggregated nodes. You can use aggregated nodes to represent semantically equal nodes in the same path of your process flow (smaller place with scrolling enablement).",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlowConnectionLabels",
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowMultipleRootNodes"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowAggregation/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowMultipleRootNodes",
            "name": "Multiple Root Nodes",
            "description": "This sample for Process Flow shows the case where multiple root nodes are used. In this case, the layout can be optimized. This sample is built with sap.m.Page control.",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlowAggregation",
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowMergedLanes"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowMultipleRootNodes/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowMergedLanes",
            "name": "Process Flow Merged Lanes",
            "description": "This sample shows the Process Flow control with merged lanes and update of nodes.",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlowMultipleRootNodes",
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowUpdateLanes"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowMergedLanes/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowUpdateLanes",
            "name": "Process Flow Update Lanes",
            "description": "This sample shows the Process Flow control with an update of lanes.",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlowMergedLanes",
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowNodeContainer"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowUpdateLanes/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowNodeContainer",
            "name": "Process Flow Node as Container",
            "description": "This sample shows the Process Flow node being used as container.",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlowUpdateLanes",
                "nextSampleId": "sap.suite.ui.commons.sample.ProcessFlowImageContent"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowNodeContainer/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ProcessFlowImageContent",
            "name": "Process Flow with Image Content",
            "description": "This sample shows the Process Flow node container with custom image content.",
            "entityId": "sap.suite.ui.commons.ProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.ProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.ProcessFlowNodeContainer"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ProcessFlowImageContent/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "namespace": "sap.suite.ui.commons",
        "library": "sap.suite.ui.commons",
        "searchTags": "Process Flow ProcessFlow Display Process Flow Process Flow is a complex control that enables you to display documents or other items in their flow (fixed position). Scrollable Process Flow Process Flow is a complex control that enables you to display documents or other items in their flow (smaller place with scrolling enablement). Process Flow with Connection Labels This sample shows the Process Flow control with connection labels. Process Flow with Aggregated Nodes This sample shows the Process Flow control with aggregated nodes. You can use aggregated nodes to represent semantically equal nodes in the same path of your process flow (smaller place with scrolling enablement). Multiple Root Nodes This sample for Process Flow shows the case where multiple root nodes are used. In this case, the layout can be optimized. This sample is built with sap.m.Page control. Process Flow Merged Lanes This sample shows the Process Flow control with merged lanes and update of nodes. Process Flow Update Lanes This sample shows the Process Flow control with an update of lanes. Process Flow Node as Container This sample shows the Process Flow node being used as container. Process Flow with Image Content This sample shows the Process Flow node container with custom image content. Process Flow Scrollable Process Flow Process Flow with Connection Labels Process Flow with Aggregated Nodes Multiple Root Nodes Process Flow Merged Lanes Process Flow Update Lanes Process Flow Node as Container Process Flow with Image Content",
        "sampleCount": 9,
        "key": "#/entity/sap.suite.ui.commons.ProcessFlow"
      },
      {
        "id": "sap.suite.ui.commons.Timeline",
        "name": "Timeline",
        "category": "Display",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.Timeline",
            "name": "Basic",
            "description": "Provides an overview of the available layout options and features, such as grouping, filtering, sorting, and search. This sample uses JSON data binding.",
            "entityId": "sap.suite.ui.commons.Timeline",
            "contexts": {
              "sap.suite.ui.commons.Timeline": {
                "nextSampleId": "sap.suite.ui.commons.sample.TimelineOData"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.Timeline/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.TimelineOData",
            "name": "OData Binding",
            "description": "Shows how to use OData model binding.",
            "entityId": "sap.suite.ui.commons.Timeline",
            "contexts": {
              "sap.suite.ui.commons.Timeline": {
                "previousSampleId": "sap.suite.ui.commons.sample.Timeline",
                "nextSampleId": "sap.suite.ui.commons.sample.TimelineNoBinding"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.TimelineOData/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.TimelineNoBinding",
            "name": "No Binding",
            "description": "Shows a timeline where no data binding is used.",
            "entityId": "sap.suite.ui.commons.Timeline",
            "contexts": {
              "sap.suite.ui.commons.Timeline": {
                "previousSampleId": "sap.suite.ui.commons.sample.TimelineOData",
                "nextSampleId": "sap.suite.ui.commons.sample.TimelineScrolling"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.TimelineNoBinding/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.TimelineScrolling",
            "name": "Scrolling",
            "description": "Demonstrates the Lazy Loading feature that preloads posts as you scroll along the timeline axis.",
            "entityId": "sap.suite.ui.commons.Timeline",
            "contexts": {
              "sap.suite.ui.commons.Timeline": {
                "previousSampleId": "sap.suite.ui.commons.sample.TimelineNoBinding",
                "nextSampleId": "sap.suite.ui.commons.sample.TimelineCustomGrouping"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.TimelineScrolling/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.TimelineCustomGrouping",
            "name": "Custom Grouping",
            "description": "Shows a custom grouping function that groups posts by the first or second half of the year.",
            "entityId": "sap.suite.ui.commons.Timeline",
            "contexts": {
              "sap.suite.ui.commons.Timeline": {
                "previousSampleId": "sap.suite.ui.commons.sample.TimelineScrolling",
                "nextSampleId": "sap.suite.ui.commons.sample.TimelineTextHeight"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.TimelineCustomGrouping/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.TimelineTextHeight",
            "name": "Responsive Post Height",
            "description": "Shows how the number of visible lines in timeline posts can be adjusted automatically based on screen resolution.",
            "entityId": "sap.suite.ui.commons.Timeline",
            "contexts": {
              "sap.suite.ui.commons.Timeline": {
                "previousSampleId": "sap.suite.ui.commons.sample.TimelineCustomGrouping"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.TimelineTextHeight/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons",
        "library": "sap.suite.ui.commons",
        "searchTags": "Timeline Timeline Display Basic Provides an overview of the available layout options and features, such as grouping, filtering, sorting, and search. This sample uses JSON data binding. OData Binding Shows how to use OData model binding. No Binding Shows a timeline where no data binding is used. Scrolling Demonstrates the Lazy Loading feature that preloads posts as you scroll along the timeline axis. Custom Grouping Shows a custom grouping function that groups posts by the first or second half of the year. Responsive Post Height Shows how the number of visible lines in timeline posts can be adjusted automatically based on screen resolution. Basic OData Binding No Binding Scrolling Custom Grouping Responsive Post Height",
        "sampleCount": 6,
        "key": "#/entity/sap.suite.ui.commons.Timeline"
      },
      {
        "id": "sap.suite.ui.commons.ChartContainer",
        "name": "Chart Container",
        "category": "Container",
        "since": "1.24",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.ChartContainerSimpleToolbar",
            "name": "ChartContainer - Simple Toolbar",
            "description": "Shows a chart with a toolbar including a button for showing or hiding the legend, zoom buttons, and a fullscreen button.",
            "entityId": "sap.suite.ui.commons.ChartContainer",
            "contexts": {
              "sap.suite.ui.commons.ChartContainer": {
                "nextSampleId": "sap.suite.ui.commons.sample.ChartContainerToolbarEnhancement"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ChartContainerSimpleToolbar/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ChartContainerToolbarEnhancement",
            "name": "ChartContainer - Integration of an external toolbar",
            "description": "Shows a chart with an external toolbar (provided by the application) and with one option Dimension Switch control.",
            "entityId": "sap.suite.ui.commons.ChartContainer",
            "contexts": {
              "sap.suite.ui.commons.ChartContainer": {
                "previousSampleId": "sap.suite.ui.commons.sample.ChartContainerSimpleToolbar",
                "nextSampleId": "sap.suite.ui.commons.sample.ChartContainerFixFlexLayout"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ChartContainerToolbarEnhancement/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ChartContainerFixFlexLayout",
            "name": "ChartContainer - Simple Toolbar with FixFlex Layout",
            "description": "In addition to the basic features like zoom and legend, this sample shows a chart with responsive height (instead of fixed height) in ChartContainer. For this sample, the FixFlex layout is used.",
            "entityId": "sap.suite.ui.commons.ChartContainer",
            "contexts": {
              "sap.suite.ui.commons.ChartContainer": {
                "previousSampleId": "sap.suite.ui.commons.sample.ChartContainerToolbarEnhancement",
                "nextSampleId": "sap.suite.ui.commons.sample.ChartContainerDimensionsMultiCharts"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ChartContainerFixFlexLayout/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ChartContainerDimensionsMultiCharts",
            "name": "ChartContainer - Toolbar with Dimension Switch and Different Types of Charts",
            "description": "In addition to the basic features like zoom and legend, this sample shows a selection of different types of charts. For each chart, different dimensions can be chosen.",
            "entityId": "sap.suite.ui.commons.ChartContainer",
            "contexts": {
              "sap.suite.ui.commons.ChartContainer": {
                "previousSampleId": "sap.suite.ui.commons.sample.ChartContainerFixFlexLayout",
                "nextSampleId": "sap.suite.ui.commons.sample.ChartContainerCustomIconsOneChart"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ChartContainerDimensionsMultiCharts/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ChartContainerCustomIconsOneChart",
            "name": "ChartContainer - Toolbar with Dimension Switch and Customizable Icons",
            "description": "In addition to the basic features like zoom and legend, this sample shows one type of a chart with various dimensions. The toolbar can be enhanced with icons by the user to switch to related content.",
            "entityId": "sap.suite.ui.commons.ChartContainer",
            "contexts": {
              "sap.suite.ui.commons.ChartContainer": {
                "previousSampleId": "sap.suite.ui.commons.sample.ChartContainerDimensionsMultiCharts",
                "nextSampleId": "sap.suite.ui.commons.sample.ChartContainerActions"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ChartContainerCustomIconsOneChart/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ChartContainerActions",
            "name": "ChartContainer - SelectionDetails with list actions and item actions",
            "description": "Shows actions in SelectionDetails popover on the list level as well as on the item level.",
            "entityId": "sap.suite.ui.commons.ChartContainer",
            "contexts": {
              "sap.suite.ui.commons.ChartContainer": {
                "previousSampleId": "sap.suite.ui.commons.sample.ChartContainerCustomIconsOneChart",
                "nextSampleId": "sap.suite.ui.commons.sample.ChartContainerActionGroups"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ChartContainerActions/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ChartContainerActionGroups",
            "name": "ChartContainer - SelectionDetails with list action groups",
            "description": "Shows action groups in SelectionDetails popover on the list level.",
            "entityId": "sap.suite.ui.commons.ChartContainer",
            "contexts": {
              "sap.suite.ui.commons.ChartContainer": {
                "previousSampleId": "sap.suite.ui.commons.sample.ChartContainerActions"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ChartContainerActionGroups/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons",
        "library": "sap.suite.ui.commons",
        "searchTags": "Chart Container ChartContainer Container ChartContainer - Simple Toolbar Shows a chart with a toolbar including a button for showing or hiding the legend, zoom buttons, and a fullscreen button. ChartContainer - Integration of an external toolbar Shows a chart with an external toolbar (provided by the application) and with one option Dimension Switch control. ChartContainer - Simple Toolbar with FixFlex Layout In addition to the basic features like zoom and legend, this sample shows a chart with responsive height (instead of fixed height) in ChartContainer. For this sample, the FixFlex layout is used. ChartContainer - Toolbar with Dimension Switch and Different Types of Charts In addition to the basic features like zoom and legend, this sample shows a selection of different types of charts. For each chart, different dimensions can be chosen. ChartContainer - Toolbar with Dimension Switch and Customizable Icons In addition to the basic features like zoom and legend, this sample shows one type of a chart with various dimensions. The toolbar can be enhanced with icons by the user to switch to related content. ChartContainer - SelectionDetails with list actions and item actions Shows actions in SelectionDetails popover on the list level as well as on the item level. ChartContainer - SelectionDetails with list action groups Shows action groups in SelectionDetails popover on the list level. ChartContainer - Simple Toolbar ChartContainer - Integration of an external toolbar ChartContainer - Simple Toolbar with FixFlex Layout ChartContainer - Toolbar with Dimension Switch and Different Types of Charts ChartContainer - Toolbar with Dimension Switch and Customizable Icons ChartContainer - SelectionDetails with list actions and item actions ChartContainer - SelectionDetails with list action groups",
        "sampleCount": 7,
        "key": "#/entity/sap.suite.ui.commons.ChartContainer"
      },
      {
        "id": "sap.suite.ui.commons.statusindicator.StatusIndicator",
        "name": "Status Indicator",
        "category": "Data Visualization",
        "since": "1.50",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.StatusIndicator",
            "name": "Status Indicators",
            "description": "Shows status indicators that use different types of shapes and different animation settings. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'.",
            "entityId": "sap.suite.ui.commons.statusindicator.StatusIndicator",
            "contexts": {
              "sap.suite.ui.commons.statusindicator.StatusIndicator": {
                "nextSampleId": "sap.suite.ui.commons.sample.StatusIndicatorFillingAngle"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.StatusIndicator/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.StatusIndicatorFillingAngle",
            "name": "Status Indicators Filled at an Arbitrary Angle",
            "description": "Shows status indicators that use linear filling at different angles. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'.",
            "entityId": "sap.suite.ui.commons.statusindicator.StatusIndicator",
            "contexts": {
              "sap.suite.ui.commons.statusindicator.StatusIndicator": {
                "previousSampleId": "sap.suite.ui.commons.sample.StatusIndicator",
                "nextSampleId": "sap.suite.ui.commons.sample.StatusIndicatorCircularFill"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.StatusIndicatorFillingAngle/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.StatusIndicatorCircularFill",
            "name": "Status Indicators with Circular Filling",
            "description": "Shows status indicators that use circular fill. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'.",
            "entityId": "sap.suite.ui.commons.statusindicator.StatusIndicator",
            "contexts": {
              "sap.suite.ui.commons.statusindicator.StatusIndicator": {
                "previousSampleId": "sap.suite.ui.commons.sample.StatusIndicatorFillingAngle",
                "nextSampleId": "sap.suite.ui.commons.sample.StatusIndicatorSemanticColors"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.StatusIndicatorCircularFill/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.StatusIndicatorSemanticColors",
            "name": "Status Indicators Using Semantic Colors",
            "description": "Shows status indicators with semantic colors. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'.",
            "entityId": "sap.suite.ui.commons.statusindicator.StatusIndicator",
            "contexts": {
              "sap.suite.ui.commons.statusindicator.StatusIndicator": {
                "previousSampleId": "sap.suite.ui.commons.sample.StatusIndicatorCircularFill",
                "nextSampleId": "sap.suite.ui.commons.sample.StatusIndicatorSizes"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.StatusIndicatorSemanticColors/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.StatusIndicatorSizes",
            "name": "Status Indicators Sizes",
            "description": "Shows status indicators of different sizes. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'.",
            "entityId": "sap.suite.ui.commons.statusindicator.StatusIndicator",
            "contexts": {
              "sap.suite.ui.commons.statusindicator.StatusIndicator": {
                "previousSampleId": "sap.suite.ui.commons.sample.StatusIndicatorSemanticColors",
                "nextSampleId": "sap.suite.ui.commons.sample.StatusIndicatorChoreography"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.StatusIndicatorSizes/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.StatusIndicatorChoreography",
            "name": "Status Indicators Choreography",
            "description": "Shows content choreography features available for status indicators. This sample demonstrates how you can create a status indicator with different shapes that are filled in parallel, serial, and semi-parallel modes.",
            "entityId": "sap.suite.ui.commons.statusindicator.StatusIndicator",
            "contexts": {
              "sap.suite.ui.commons.statusindicator.StatusIndicator": {
                "previousSampleId": "sap.suite.ui.commons.sample.StatusIndicatorSizes",
                "nextSampleId": "sap.suite.ui.commons.sample.StatusIndicatorShapesLibrary"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.StatusIndicatorChoreography/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.StatusIndicatorShapesLibrary",
            "name": "Status Indicators Shapes Library",
            "description": "Shows predefined shapes available from the shapes library.",
            "entityId": "sap.suite.ui.commons.statusindicator.StatusIndicator",
            "contexts": {
              "sap.suite.ui.commons.statusindicator.StatusIndicator": {
                "previousSampleId": "sap.suite.ui.commons.sample.StatusIndicatorChoreography"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.StatusIndicatorShapesLibrary/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons.statusindicator",
        "library": "sap.suite.ui.commons",
        "searchTags": "Status Indicator StatusIndicator Data Visualization Status Indicators Shows status indicators that use different types of shapes and different animation settings. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'. Status Indicators Filled at an Arbitrary Angle Shows status indicators that use linear filling at different angles. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'. Status Indicators with Circular Filling Shows status indicators that use circular fill. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'. Status Indicators Using Semantic Colors Shows status indicators with semantic colors. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'. Status Indicators Sizes Shows status indicators of different sizes. To preview how a status indicator's percentage value affects the status indicator's appearance, type a value between 0 and 100 into the 'Value' field and click 'Update Status'. Status Indicators Choreography Shows content choreography features available for status indicators. This sample demonstrates how you can create a status indicator with different shapes that are filled in parallel, serial, and semi-parallel modes. Status Indicators Shapes Library Shows predefined shapes available from the shapes library. Status Indicators Status Indicators Filled at an Arbitrary Angle Status Indicators with Circular Filling Status Indicators Using Semantic Colors Status Indicators Sizes Status Indicators Choreography Status Indicators Shapes Library",
        "sampleCount": 7,
        "key": "#/entity/sap.suite.ui.commons.statusindicator.StatusIndicator"
      },
      {
        "id": "sap.suite.ui.commons.tutorial.icecream",
        "name": "Ice Cream Machine",
        "category": "Tutorial",
        "since": "1.50",
        "formFactors": "Independent",
        "description": "In this tutorial, you will learn about our controls like Generic Tiles, Micro Charts, and Process Flow.",
        "docuLink": "#docs/guide/e5b7f8a93e4b432198869b3ae75981b0.html",
        "samplesAsSteps": [
          "Initial application",
          "KPI Tile and Chart Tile in Start Page",
          "Launch Tile and Slide Tile",
          "Generic Tiles in Line Mode",
          "Navigating from the Start Page to Other Pages",
          "Chart Container",
          "Header Container and Radial Micro Chart",
          "Comparison Micro Chart",
          "Delta Micro Chart",
          "Line Micro Chart",
          "Process Flow",
          "Timeline"
        ],
        "appComponent": "CA-UI5-SC",
        "namespace": "sap.suite.ui.commons.tutorial",
        "library": "sap.suite.ui.commons",
        "searchTags": "Ice Cream Machine IceCreamMachine Tutorial Ice Cream Machine - Step 1 - Initial application Ice Cream Machine - Step 2 - KPI Tile and Chart Tile in Start Page Ice Cream Machine - Step 3 - Launch Tile and Slide Tile Ice Cream Machine - Step 4 - Generic Tiles in Line Mode Ice Cream Machine - Step 5 - Navigating from the Start Page to Other Pages Ice Cream Machine - Step 6 - Chart Container Ice Cream Machine - Step 7 - Header Container and Radial Micro Chart Ice Cream Machine - Step 8 - Comparison Micro Chart Ice Cream Machine - Step 9 - Delta Micro Chart Ice Cream Machine - Step 10 - Line Micro Chart Ice Cream Machine - Step 11 - Process Flow Ice Cream Machine - Step 12 - Timeline",
        "samples": [
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.01",
            "name": "Ice Cream Machine - Step 1 - Initial application",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.02",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.01/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.02",
            "name": "Ice Cream Machine - Step 2 - KPI Tile and Chart Tile in Start Page",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.01",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.03",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.02/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.03",
            "name": "Ice Cream Machine - Step 3 - Launch Tile and Slide Tile",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.02",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.04",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.03/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.04",
            "name": "Ice Cream Machine - Step 4 - Generic Tiles in Line Mode",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.03",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.05",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.04/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.05",
            "name": "Ice Cream Machine - Step 5 - Navigating from the Start Page to Other Pages",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.04",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.06",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.05/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.06",
            "name": "Ice Cream Machine - Step 6 - Chart Container",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.05",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.07",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.06/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.07",
            "name": "Ice Cream Machine - Step 7 - Header Container and Radial Micro Chart",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.06",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.08",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.07/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.08",
            "name": "Ice Cream Machine - Step 8 - Comparison Micro Chart",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.07",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.09",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.08/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.09",
            "name": "Ice Cream Machine - Step 9 - Delta Micro Chart",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.08",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.10",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.09/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.10",
            "name": "Ice Cream Machine - Step 10 - Line Micro Chart",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.09",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.11",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.10/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.11",
            "name": "Ice Cream Machine - Step 11 - Process Flow",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.10",
            "nextSampleId": "sap.suite.ui.commons.tutorial.icecream.12",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.11/preview"
          },
          {
            "id": "sap.suite.ui.commons.tutorial.icecream.12",
            "name": "Ice Cream Machine - Step 12 - Timeline",
            "previousSampleId": "sap.suite.ui.commons.tutorial.icecream.11",
            "entityId": "sap.suite.ui.commons.tutorial.icecream",
            "key": "#/sample/sap.suite.ui.commons.tutorial.icecream.12/preview"
          }
        ],
        "sampleCount": 12,
        "key": "#/entity/sap.suite.ui.commons.tutorial.icecream"
      },
      {
        "id": "sap.suite.ui.commons.networkgraph.Graph",
        "name": "Network Graph",
        "category": "Display",
        "since": "1.50",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraph",
            "name": "Basic",
            "description": "A basic network graph with a graph overview.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphStaticForce"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraph/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphStaticForce",
            "name": "Force-Based Layout with Static Nodes",
            "description": "A force-based layout network graph with various sets of static nodes.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraph",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphCarFactory"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphStaticForce/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphCarFactory",
            "name": "Custom Layout",
            "description": "A network graph with custom layout.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphStaticForce",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphAirports"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphCarFactory/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphAirports",
            "name": "Custom Layout with Background Image",
            "description": "A custom layout network graph placed over a background image.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphCarFactory",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphCustomPopup"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphAirports/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphCustomPopup",
            "name": "Customization",
            "description": "Provides basic examples of node customization.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphAirports",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphNodeDimensions"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphCustomPopup/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphNodeDimensions",
            "name": "Node Dimensions",
            "description": "Shows how different dimension attributes affect the node's appearance.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphCustomPopup",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphLegend"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphNodeDimensions/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphLegend",
            "name": "Legend",
            "description": "Provides an example of legend customization.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphNodeDimensions",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphOrgChart"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphLegend/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphOrgChart",
            "name": "Org Chart",
            "description": "An organizational chart with dynamic loading.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphLegend",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphDimensions"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphOrgChart/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphDimensions",
            "name": "Width and Height",
            "description": "Provides examples of width and height settings.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphOrgChart",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphCustomStatus"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphDimensions/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphCustomStatus",
            "name": "Custom Colors and Custom Statuses",
            "description": "Provides an example of using custom colors by assigning custom statuses to nodes, lines, and groups of nodes.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphDimensions",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphCustomRendering"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphCustomStatus/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphCustomRendering",
            "name": "Custom rendering",
            "description": "Provides an example of using custom node rendering.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphCustomStatus",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphBidirectionalCollapsing"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphCustomRendering/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphBidirectionalCollapsing",
            "name": "Bidirectional Custom Collapsing",
            "description": "Provides an example of creating bidirectional custom collapsing with single level expansion. This sample also demonstrates usage of Dijkstra's algorithm for visualization of shortest path between two selected nodes.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphCustomRendering",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphSwimLane"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphBidirectionalCollapsing/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphSwimLane",
            "name": "Swim Lane Layout",
            "description": "Provides an example of a network graph where the nodes are arranged into swim lanes.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphBidirectionalCollapsing",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphTwoColumns"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphSwimLane/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphTwoColumns",
            "name": "Two Columns Layout",
            "description": "Provides an example of a network graph where the nodes are arranged into two columns with support for nested groups.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphSwimLane",
                "nextSampleId": "sap.suite.ui.commons.sample.NetworkGraphNoData"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphTwoColumns/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.NetworkGraphNoData",
            "name": "Network Graph with No Data",
            "description": "Shows how a network graph looks in cases when there is no data to display.",
            "entityId": "sap.suite.ui.commons.networkgraph.Graph",
            "contexts": {
              "sap.suite.ui.commons.networkgraph.Graph": {
                "previousSampleId": "sap.suite.ui.commons.sample.NetworkGraphTwoColumns"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.NetworkGraphNoData/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons.networkgraph",
        "library": "sap.suite.ui.commons",
        "searchTags": "Network Graph NetworkGraph Display Basic A basic network graph with a graph overview. Force-Based Layout with Static Nodes A force-based layout network graph with various sets of static nodes. Custom Layout A network graph with custom layout. Custom Layout with Background Image A custom layout network graph placed over a background image. Customization Provides basic examples of node customization. Node Dimensions Shows how different dimension attributes affect the node's appearance. Legend Provides an example of legend customization. Org Chart An organizational chart with dynamic loading. Width and Height Provides examples of width and height settings. Custom Colors and Custom Statuses Provides an example of using custom colors by assigning custom statuses to nodes, lines, and groups of nodes. Custom rendering Provides an example of using custom node rendering. Bidirectional Custom Collapsing Provides an example of creating bidirectional custom collapsing with single level expansion. This sample also demonstrates usage of Dijkstra's algorithm for visualization of shortest path between two selected nodes. Swim Lane Layout Provides an example of a network graph where the nodes are arranged into swim lanes. Two Columns Layout Provides an example of a network graph where the nodes are arranged into two columns with support for nested groups. Network Graph with No Data Shows how a network graph looks in cases when there is no data to display. Basic Force-Based Layout with Static Nodes Custom Layout Custom Layout with Background Image Customization Node Dimensions Legend Org Chart Width and Height Custom Colors and Custom Statuses Custom rendering Bidirectional Custom Collapsing Swim Lane Layout Two Columns Layout Network Graph with No Data",
        "sampleCount": 15,
        "key": "#/entity/sap.suite.ui.commons.networkgraph.Graph"
      },
      {
        "id": "sap.suite.ui.commons.MicroProcessFlow",
        "name": "Micro Process Flow",
        "category": "Display",
        "since": "1.54",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.MicroProcessFlow",
            "name": "Micro Process Flow",
            "description": "Provides basic examples on how you can use the micro process flow control.",
            "entityId": "sap.suite.ui.commons.MicroProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.MicroProcessFlow": {
                "nextSampleId": "sap.suite.ui.commons.sample.MicroProcessFlowPopover"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.MicroProcessFlow/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.MicroProcessFlowPopover",
            "name": "Micro Process Flow with a Popover",
            "description": "Shows a micro process flow with a custom popover assigned to its nodes.",
            "entityId": "sap.suite.ui.commons.MicroProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.MicroProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.MicroProcessFlow",
                "nextSampleId": "sap.suite.ui.commons.sample.MicroProcessFlowRenderType"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.MicroProcessFlowPopover/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.MicroProcessFlowRenderType",
            "name": "Micro Process Render Type",
            "description": "Shows micro process flow controls with different render type settings applied.",
            "entityId": "sap.suite.ui.commons.MicroProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.MicroProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.MicroProcessFlowPopover",
                "nextSampleId": "sap.suite.ui.commons.sample.MicroProcessFlowSmartTable"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.MicroProcessFlowRenderType/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.MicroProcessFlowSmartTable",
            "name": "Micro Process Flow in a Smart Table",
            "description": "Shows a micro process flow control used in a smart table.",
            "entityId": "sap.suite.ui.commons.MicroProcessFlow",
            "contexts": {
              "sap.suite.ui.commons.MicroProcessFlow": {
                "previousSampleId": "sap.suite.ui.commons.sample.MicroProcessFlowRenderType"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.MicroProcessFlowSmartTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons",
        "library": "sap.suite.ui.commons",
        "searchTags": "Micro Process Flow MicroProcessFlow Display Micro Process Flow Provides basic examples on how you can use the micro process flow control. Micro Process Flow with a Popover Shows a micro process flow with a custom popover assigned to its nodes. Micro Process Render Type Shows micro process flow controls with different render type settings applied. Micro Process Flow in a Smart Table Shows a micro process flow control used in a smart table. Micro Process Flow Micro Process Flow with a Popover Micro Process Render Type Micro Process Flow in a Smart Table",
        "sampleCount": 4,
        "key": "#/entity/sap.suite.ui.commons.MicroProcessFlow"
      },
      {
        "id": "sap.suite.ui.commons.CalculationBuilder",
        "name": "Calculation Builder",
        "category": "Display",
        "since": "1.56",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.CalculationBuilder",
            "name": "Calculation Builder",
            "description": "A basic calculation builder with a visual editor, a text editor, and two toolbars, providing operators, variables, and most common functions.",
            "entityId": "sap.suite.ui.commons.CalculationBuilder",
            "contexts": {
              "sap.suite.ui.commons.CalculationBuilder": {
                "nextSampleId": "sap.suite.ui.commons.sample.CalculationBuilderFunction"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.CalculationBuilder/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.CalculationBuilderFunction",
            "name": "Calculation Builder with a Custom Function",
            "description": "A calculation builder with a custom function and custom validation on the expression level and on the function level.",
            "entityId": "sap.suite.ui.commons.CalculationBuilder",
            "contexts": {
              "sap.suite.ui.commons.CalculationBuilder": {
                "previousSampleId": "sap.suite.ui.commons.sample.CalculationBuilder"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.CalculationBuilderFunction/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons",
        "library": "sap.suite.ui.commons",
        "searchTags": "Calculation Builder CalculationBuilder Display Calculation Builder A basic calculation builder with a visual editor, a text editor, and two toolbars, providing operators, variables, and most common functions. Calculation Builder with a Custom Function A calculation builder with a custom function and custom validation on the expression level and on the function level. Calculation Builder Calculation Builder with a Custom Function",
        "sampleCount": 2,
        "key": "#/entity/sap.suite.ui.commons.CalculationBuilder"
      },
      {
        "id": "sap.suite.ui.commons.taccount.TAccount",
        "name": "T Account",
        "category": "Display",
        "since": "1.58",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.TAccount",
            "name": "T Account",
            "description": "A customizable panel with T accounts and T-account groups.",
            "entityId": "sap.suite.ui.commons.taccount.TAccount",
            "contexts": {
              "sap.suite.ui.commons.taccount.TAccount": {}
            },
            "key": "#/sample/sap.suite.ui.commons.sample.TAccount/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons.taccount",
        "library": "sap.suite.ui.commons",
        "searchTags": "T Account TAccount Display T Account A customizable panel with T accounts and T-account groups. T Account",
        "sampleCount": 1,
        "key": "#/entity/sap.suite.ui.commons.taccount.TAccount"
      },
      {
        "id": "sap.suite.ui.commons.imageeditor",
        "name": "Image Editor",
        "category": "Display",
        "since": "1.66",
        "samples": [
          {
            "id": "sap.suite.ui.commons.sample.ImageEditorContainer",
            "name": "Image Editor Container",
            "description": "Shows an image editor inside an image editor container with a customized toolbar and custom size items.",
            "entityId": "sap.suite.ui.commons.imageeditor",
            "contexts": {
              "sap.suite.ui.commons.imageeditor": {
                "nextSampleId": "sap.suite.ui.commons.sample.ImageEditorContainerDialog"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ImageEditorContainer/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ImageEditorContainerDialog",
            "name": "Image Editor Container in a Dialog",
            "description": "Image editor container inside a full-screen dialog.",
            "entityId": "sap.suite.ui.commons.imageeditor",
            "contexts": {
              "sap.suite.ui.commons.imageeditor": {
                "previousSampleId": "sap.suite.ui.commons.sample.ImageEditorContainer",
                "nextSampleId": "sap.suite.ui.commons.sample.ImageEditorCircleCrop"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ImageEditorContainerDialog/preview"
          },
          {
            "id": "sap.suite.ui.commons.sample.ImageEditorCircleCrop",
            "name": "Using Circular Crop in the Image Editor",
            "description": "Shows how to crop images to circular or oval shapes.",
            "entityId": "sap.suite.ui.commons.imageeditor",
            "contexts": {
              "sap.suite.ui.commons.imageeditor": {
                "previousSampleId": "sap.suite.ui.commons.sample.ImageEditorContainerDialog"
              }
            },
            "key": "#/sample/sap.suite.ui.commons.sample.ImageEditorCircleCrop/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.commons",
        "library": "sap.suite.ui.commons",
        "searchTags": "Image Editor ImageEditor Display Image Editor Container Shows an image editor inside an image editor container with a customized toolbar and custom size items. Image Editor Container in a Dialog Image editor container inside a full-screen dialog. Using Circular Crop in the Image Editor Shows how to crop images to circular or oval shapes. Image Editor Container Image Editor Container in a Dialog Using Circular Crop in the Image Editor",
        "sampleCount": 3,
        "key": "#/entity/sap.suite.ui.commons.imageeditor"
      },
      {
        "id": "sap.suite.ui.microchart.AreaMicroChart",
        "name": "Micro Chart – Area",
        "category": "Data Visualization",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.AreaMicroChart",
            "name": "Area Micro Chart",
            "description": "Chart that displays the history of values and target values as segmented lines and shows thresholds as colored background. If you don’t define a threshold, the background is transparent. You can insert labels showing information like dates and minimum and maximum values. You can set fixed horizontal and vertical scales.",
            "entityId": "sap.suite.ui.microchart.AreaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartLinesCp"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.AreaMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.AreaMicroChartLinesCp",
            "name": "Area Micro Chart with Color Palette Lines",
            "description": "The lines of the area micro chart are displayed in the colors defined by the colorPalette property.",
            "entityId": "sap.suite.ui.microchart.AreaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartLinesS"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.AreaMicroChartLinesCp/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.AreaMicroChartLinesS",
            "name": "Area Micro Chart with Semantic Color Lines",
            "description": "The AreaMicroChart control with lines that are displayed in semantic colors. This control replaces the deprecated sap.suite.ui.commons.MicroAreaChart.",
            "entityId": "sap.suite.ui.microchart.AreaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartLinesCp",
                "nextSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartWide"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.AreaMicroChartLinesS/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.AreaMicroChartWide",
            "name": "Area Micro Chart in Wide Mode",
            "description": "The AreaMicroChart control in Wide mode. This control replaces the deprecated sap.suite.ui.commons.MicroAreaChart.",
            "entityId": "sap.suite.ui.microchart.AreaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartLinesS",
                "nextSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.AreaMicroChartWide/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.AreaMicroChartInGenericTile",
            "name": "Area Micro Chart on a Generic Tile",
            "description": "Shows a GenericTile including an area micro chart.",
            "entityId": "sap.suite.ui.microchart.AreaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartWide",
                "nextSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.AreaMicroChartInGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.AreaMicroChartResponsive",
            "name": "Area Micro Chart Responsiveness",
            "description": "Shows different area micro chart types with responsive design comparing functionality for different dimensions.",
            "entityId": "sap.suite.ui.microchart.AreaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.AreaMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable",
            "name": "Area Micro Chart in a Grid Table",
            "description": "Shows an area micro chart inside an sap.ui.table.Table element.",
            "entityId": "sap.suite.ui.microchart.AreaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.AreaMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Area MicroChart–Area Data Visualization Area Micro Chart Chart that displays the history of values and target values as segmented lines and shows thresholds as colored background. If you don’t define a threshold, the background is transparent. You can insert labels showing information like dates and minimum and maximum values. You can set fixed horizontal and vertical scales. Area Micro Chart with Color Palette Lines The lines of the area micro chart are displayed in the colors defined by the colorPalette property. Area Micro Chart with Semantic Color Lines The AreaMicroChart control with lines that are displayed in semantic colors. This control replaces the deprecated sap.suite.ui.commons.MicroAreaChart. Area Micro Chart in Wide Mode The AreaMicroChart control in Wide mode. This control replaces the deprecated sap.suite.ui.commons.MicroAreaChart. Area Micro Chart on a Generic Tile Shows a GenericTile including an area micro chart. Area Micro Chart Responsiveness Shows different area micro chart types with responsive design comparing functionality for different dimensions. Area Micro Chart in a Grid Table Shows an area micro chart inside an sap.ui.table.Table element. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Area Micro Chart Area Micro Chart with Color Palette Lines Area Micro Chart with Semantic Color Lines Area Micro Chart in Wide Mode Area Micro Chart on a Generic Tile Area Micro Chart Responsiveness Area Micro Chart in a Grid Table Micro Charts in Table",
        "sampleCount": 8,
        "key": "#/entity/sap.suite.ui.microchart.AreaMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.BulletMicroChart",
        "name": "Micro Chart – Bullet",
        "category": "Data Visualization",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChart",
            "name": "Bullet Micro Chart",
            "description": "Displays a colored horizontal bar representing a current value on top of a background bar representing the compared value. The vertical bars can represent the numeric values, the scaling factors, the thresholds, and the target values.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartDeltaMode"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChartDeltaMode",
            "name": "Bullet Micro Chart - Delta Mode",
            "description": "Shows a BulletMicroChart control illustrating a delta value.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartNoForecast"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChartDeltaMode/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChartNoForecast",
            "name": "Bullet Micro Chart - No Forecast",
            "description": "Shows the BulletMicroChart control without a forecast value defined.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartDeltaMode",
                "nextSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartTs"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChartNoForecast/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChartTs",
            "name": "Bullet Micro Chart - Transparent Scale",
            "description": "Shows the BulletMicroChart control with transparent background bar. You can show or hide the markers to indicate individual data values. If no markers are shown, define the minValue and maxValue property to ensure that the values of multiple charts can be compared visually.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartNoForecast",
                "nextSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartCustomTooltip"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChartTs/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChartCustomTooltip",
            "name": "Bullet Micro Chart - Custom Tooltip",
            "description": "Shows the BulletMicroChart control with custom tooltip.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartTs",
                "nextSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChartCustomTooltip/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChartInGenericTile",
            "name": "Bullet Micro Chart on a GenericTile",
            "description": "Shows the GenericTile including a bullet micro chart.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartCustomTooltip",
                "nextSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChartInGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChartResponsive",
            "name": "Bullet Micro Chart - Responsiveness",
            "description": "Shows the BulletMicroChart control with responsive design.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable",
            "name": "Bullet Micro Chart in Grid Table",
            "description": "Shows the BulletMicroChart inside sap.ui.table.Table.",
            "entityId": "sap.suite.ui.microchart.BulletMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.BulletMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Bullet MicroChart–Bullet Data Visualization Bullet Micro Chart Displays a colored horizontal bar representing a current value on top of a background bar representing the compared value. The vertical bars can represent the numeric values, the scaling factors, the thresholds, and the target values. Bullet Micro Chart - Delta Mode Shows a BulletMicroChart control illustrating a delta value. Bullet Micro Chart - No Forecast Shows the BulletMicroChart control without a forecast value defined. Bullet Micro Chart - Transparent Scale Shows the BulletMicroChart control with transparent background bar. You can show or hide the markers to indicate individual data values. If no markers are shown, define the minValue and maxValue property to ensure that the values of multiple charts can be compared visually. Bullet Micro Chart - Custom Tooltip Shows the BulletMicroChart control with custom tooltip. Bullet Micro Chart on a GenericTile Shows the GenericTile including a bullet micro chart. Bullet Micro Chart - Responsiveness Shows the BulletMicroChart control with responsive design. Bullet Micro Chart in Grid Table Shows the BulletMicroChart inside sap.ui.table.Table. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Bullet Micro Chart Bullet Micro Chart - Delta Mode Bullet Micro Chart - No Forecast Bullet Micro Chart - Transparent Scale Bullet Micro Chart - Custom Tooltip Bullet Micro Chart on a GenericTile Bullet Micro Chart - Responsiveness Bullet Micro Chart in Grid Table Micro Charts in Table",
        "sampleCount": 9,
        "key": "#/entity/sap.suite.ui.microchart.BulletMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.ComparisonMicroChart",
        "name": "Micro Chart – Comparison",
        "category": "Data Visualization",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChart",
            "name": "Comparison Micro Chart",
            "description": "Displays values as bar charts with labels, numeric values and scaling factors in the content area of each bar. The chart content is displayed in semantic colors. For the chart, you can define a fixed or responsive size.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartCp"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartCp",
            "name": "Comparison Micro Chart with Color Palette Lines",
            "description": "Shows the Comparison Micro Chart with bars in colors that are defined by the colorPalette property.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartCv"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartCp/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartCv",
            "name": "Comparison Micro Chart View Types",
            "description": "Shows the Comparison Micro Chart displayed with different view types.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartCp",
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartMinMax"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartCv/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartMinMax",
            "name": "Comparison Micro Chart with Min/Max Values",
            "description": "Shows the Comparison Micro Chart with positive and negative values combined with min/max values, in Wide and Normal view.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartCv",
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartSb"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartMinMax/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartSb",
            "name": "Comparison Micro Chart with Selectable Bars",
            "description": "Shows the Comparison Micro Chart with selectable bars. If the bar is selected, the respective tooltip is displayed and a press event is triggered.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartMinMax",
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartSh"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartSb/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartSh",
            "name": "Comparison MC with Shrinkable Property = True",
            "description": "Shows the Comparison Micro Chart with shrinkable property set to true. If set to true, the size of the chart is determined by its content.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartSb",
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartSh/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGenericTile",
            "name": "Comparison Micro Chart on a Generic Tile",
            "description": "Shows the Comparison Micro Chart inside a GenericTile control.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartSh",
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartInGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartResponsive",
            "name": "Comparison Micro Chart - Responsiveness",
            "description": "Shows the Comparison Micro Chart with responsive design.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable",
            "name": "Comparison Micro Chart in Grid Table",
            "description": "Shows the ComparisonMicroChart inside sap.ui.table.Table.",
            "entityId": "sap.suite.ui.microchart.ComparisonMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Comparison MicroChart–Comparison Data Visualization Comparison Micro Chart Displays values as bar charts with labels, numeric values and scaling factors in the content area of each bar. The chart content is displayed in semantic colors. For the chart, you can define a fixed or responsive size. Comparison Micro Chart with Color Palette Lines Shows the Comparison Micro Chart with bars in colors that are defined by the colorPalette property. Comparison Micro Chart View Types Shows the Comparison Micro Chart displayed with different view types. Comparison Micro Chart with Min/Max Values Shows the Comparison Micro Chart with positive and negative values combined with min/max values, in Wide and Normal view. Comparison Micro Chart with Selectable Bars Shows the Comparison Micro Chart with selectable bars. If the bar is selected, the respective tooltip is displayed and a press event is triggered. Comparison MC with Shrinkable Property = True Shows the Comparison Micro Chart with shrinkable property set to true. If set to true, the size of the chart is determined by its content. Comparison Micro Chart on a Generic Tile Shows the Comparison Micro Chart inside a GenericTile control. Comparison Micro Chart - Responsiveness Shows the Comparison Micro Chart with responsive design. Comparison Micro Chart in Grid Table Shows the ComparisonMicroChart inside sap.ui.table.Table. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Comparison Micro Chart Comparison Micro Chart with Color Palette Lines Comparison Micro Chart View Types Comparison Micro Chart with Min/Max Values Comparison Micro Chart with Selectable Bars Comparison MC with Shrinkable Property = True Comparison Micro Chart on a Generic Tile Comparison Micro Chart - Responsiveness Comparison Micro Chart in Grid Table Micro Charts in Table",
        "sampleCount": 10,
        "key": "#/entity/sap.suite.ui.microchart.ComparisonMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.ColumnMicroChart",
        "name": "Micro Chart – Column",
        "category": "Data Visualization",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.ColumnMicroChart",
            "name": "Column Micro Chart",
            "description": "Shows different column micro chart types comparing category values with the help of vertical bars.",
            "entityId": "sap.suite.ui.microchart.ColumnMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartLbls"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ColumnMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ColumnMicroChartLbls",
            "name": "Column Micro Chart with labels",
            "description": "Shows different column micro chart types with labels.",
            "entityId": "sap.suite.ui.microchart.ColumnMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ColumnMicroChartLbls/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ColumnMicroChartResponsive",
            "name": "Column Micro Chart - Responsiveness",
            "description": "Shows different column micro chart types with responsive design comparing functionality for different dimensions",
            "entityId": "sap.suite.ui.microchart.ColumnMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartLbls",
                "nextSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ColumnMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ColumnMicroChartInGenericTile",
            "name": "Column Micro Chart on a Generic Tile",
            "description": "Shows the GenericTile including a column micro chart.",
            "entityId": "sap.suite.ui.microchart.ColumnMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ColumnMicroChartInGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable",
            "name": "Column Micro Chart in a Grid Table",
            "description": "Shows a column micro chart inside an sap.ui.table.Table element.",
            "entityId": "sap.suite.ui.microchart.ColumnMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Column MicroChart–Column Data Visualization Column Micro Chart Shows different column micro chart types comparing category values with the help of vertical bars. Column Micro Chart with labels Shows different column micro chart types with labels. Column Micro Chart - Responsiveness Shows different column micro chart types with responsive design comparing functionality for different dimensions Column Micro Chart on a Generic Tile Shows the GenericTile including a column micro chart. Column Micro Chart in a Grid Table Shows a column micro chart inside an sap.ui.table.Table element. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Column Micro Chart Column Micro Chart with labels Column Micro Chart - Responsiveness Column Micro Chart on a Generic Tile Column Micro Chart in a Grid Table Micro Charts in Table",
        "sampleCount": 6,
        "key": "#/entity/sap.suite.ui.microchart.ColumnMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.DeltaMicroChart",
        "name": "Micro Chart – Delta",
        "category": "Data Visualization",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.DeltaMicroChart",
            "name": "Delta Micro Chart",
            "description": "Displays the delta of two values as a chart. You can use colors to highlight certain aspects. The size of the chart can be adjusted to the used device.",
            "entityId": "sap.suite.ui.microchart.DeltaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.DeltaMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.DeltaMicroChartInGenericTile",
            "name": "Delta Micro Chart on a Generic Tile",
            "description": "Shows the Delta Micro Chart within a GenericTile control.",
            "entityId": "sap.suite.ui.microchart.DeltaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.DeltaMicroChartInGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.DeltaMicroChartResponsive",
            "name": "Delta Micro Chart - Responsiveness",
            "description": "Shows a delta micro chart with responsive design.",
            "entityId": "sap.suite.ui.microchart.DeltaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.DeltaMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable",
            "name": "Delta Micro Chart in a Grid Table",
            "description": "Shows a delta micro chart inside an sap.ui.table.Table element.",
            "entityId": "sap.suite.ui.microchart.DeltaMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Delta MicroChart–Delta Data Visualization Delta Micro Chart Displays the delta of two values as a chart. You can use colors to highlight certain aspects. The size of the chart can be adjusted to the used device. Delta Micro Chart on a Generic Tile Shows the Delta Micro Chart within a GenericTile control. Delta Micro Chart - Responsiveness Shows a delta micro chart with responsive design. Delta Micro Chart in a Grid Table Shows a delta micro chart inside an sap.ui.table.Table element. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Delta Micro Chart Delta Micro Chart on a Generic Tile Delta Micro Chart - Responsiveness Delta Micro Chart in a Grid Table Micro Charts in Table",
        "sampleCount": 5,
        "key": "#/entity/sap.suite.ui.microchart.DeltaMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.HarveyBallMicroChart",
        "name": "Micro Chart – Harvey Ball",
        "category": "Data Visualization",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.HarveyBallMicroChart",
            "name": "Harvey Ball Micro Chart",
            "description": "Displays a HarveyBallMicroChart with highlighted sector. You can use colors to highlight certain aspects. The size of the chart can adjust to the device used.",
            "entityId": "sap.suite.ui.microchart.HarveyBallMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.HarveyBallMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGenericTile",
            "name": "Harvey Ball Micro Chart on a Generic Tile",
            "description": "Harvey Ball Micro Chart within a GenericTile.",
            "entityId": "sap.suite.ui.microchart.HarveyBallMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.HarveyBallMicroChartInGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.HarveyBallMicroChartResponsive",
            "name": "Harvey Ball Micro Chart - Responsiveness",
            "description": "Shows Harvey Ball Micro Chart with responsive design.",
            "entityId": "sap.suite.ui.microchart.HarveyBallMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.HarveyBallMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable",
            "name": "Harvey Ball Micro Chart in a Grid Table",
            "description": "Shows a Harvey Ball micro chart inside an sap.ui.table.Table element.",
            "entityId": "sap.suite.ui.microchart.HarveyBallMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Harvey Ball MicroChart–HarveyBall Data Visualization Harvey Ball Micro Chart Displays a HarveyBallMicroChart with highlighted sector. You can use colors to highlight certain aspects. The size of the chart can adjust to the device used. Harvey Ball Micro Chart on a Generic Tile Harvey Ball Micro Chart within a GenericTile. Harvey Ball Micro Chart - Responsiveness Shows Harvey Ball Micro Chart with responsive design. Harvey Ball Micro Chart in a Grid Table Shows a Harvey Ball micro chart inside an sap.ui.table.Table element. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Harvey Ball Micro Chart Harvey Ball Micro Chart on a Generic Tile Harvey Ball Micro Chart - Responsiveness Harvey Ball Micro Chart in a Grid Table Micro Charts in Table",
        "sampleCount": 5,
        "key": "#/entity/sap.suite.ui.microchart.HarveyBallMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.RadialMicroChart",
        "name": "Micro Chart – Radial",
        "category": "Data Visualization",
        "since": "1.36",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.RadialMicroChart",
            "name": "Radial Micro Chart",
            "description": "The RadialMicroChart displays a ring chart highlighting a current status. The status is displayed with a semantically colored radial bar and a percentage value. The possible status are neutral, good, critical and error. The chart can be used in different sizes.",
            "entityId": "sap.suite.ui.microchart.RadialMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.RadialMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.RadialMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.RadialMicroChartInGenericTile",
            "name": "Radial Micro Chart on a Generic Tile",
            "description": "The RadialMicroChart control inside of Generic Tile.",
            "entityId": "sap.suite.ui.microchart.RadialMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.RadialMicroChartInGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.RadialMicroChartResponsive",
            "name": "Radial Micro Chart - Responsiveness",
            "description": "Shows Radial Micro Chart with responsive design.",
            "entityId": "sap.suite.ui.microchart.RadialMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.RadialMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable",
            "name": "Radial Micro Chart in a Grid Table",
            "description": "Shows a radial micro chart inside an sap.ui.table.Table element.",
            "entityId": "sap.suite.ui.microchart.RadialMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.RadialMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Radial MicroChart–Radial Data Visualization Radial Micro Chart The RadialMicroChart displays a ring chart highlighting a current status. The status is displayed with a semantically colored radial bar and a percentage value. The possible status are neutral, good, critical and error. The chart can be used in different sizes. Radial Micro Chart on a Generic Tile The RadialMicroChart control inside of Generic Tile. Radial Micro Chart - Responsiveness Shows Radial Micro Chart with responsive design. Radial Micro Chart in a Grid Table Shows a radial micro chart inside an sap.ui.table.Table element. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Radial Micro Chart Radial Micro Chart on a Generic Tile Radial Micro Chart - Responsiveness Radial Micro Chart in a Grid Table Micro Charts in Table",
        "sampleCount": 5,
        "key": "#/entity/sap.suite.ui.microchart.RadialMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.StackedBarMicroChart",
        "name": "Micro Chart – Stacked Bar",
        "category": "Data Visualization",
        "since": "1.44",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.StackedBarMicroChart",
            "name": "Stacked Bar Micro Chart",
            "description": "Shows various Stacked Bar Micro Charts in different sizes and with different colors for the bars.",
            "entityId": "sap.suite.ui.microchart.StackedBarMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.StackedBarMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.StackedBarMicroChartResponsive",
            "name": "Stacked Bar Micro Chart - Responsiveness",
            "description": "Shows the Stacked Bar Micro Chart with responsive design.",
            "entityId": "sap.suite.ui.microchart.StackedBarMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.StackedBarMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable",
            "name": "Stacked Bar Micro Chart in Grid Table",
            "description": "Shows the StackedBarMicroChart inside sap.ui.table.Table.",
            "entityId": "sap.suite.ui.microchart.StackedBarMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Stacked Bar MicroChart–StackedBar Data Visualization Stacked Bar Micro Chart Shows various Stacked Bar Micro Charts in different sizes and with different colors for the bars. Stacked Bar Micro Chart - Responsiveness Shows the Stacked Bar Micro Chart with responsive design. Stacked Bar Micro Chart in Grid Table Shows the StackedBarMicroChart inside sap.ui.table.Table. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Stacked Bar Micro Chart Stacked Bar Micro Chart - Responsiveness Stacked Bar Micro Chart in Grid Table Micro Charts in Table",
        "sampleCount": 4,
        "key": "#/entity/sap.suite.ui.microchart.StackedBarMicroChart"
      },
      {
        "id": "sap.suite.ui.microchart.InteractiveBarChart",
        "name": "Interactive Bar Chart",
        "category": "Data Visualization",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.InteractiveBarChart",
            "name": "Interactive Bar Charts in Flexbox",
            "description": "Shows several Interactive Bar Charts used inside an sap.m.FlexBox.",
            "entityId": "sap.suite.ui.microchart.InteractiveBarChart",
            "contexts": {
              "sap.suite.ui.microchart.InteractiveBarChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.InteractiveBarChartSemanticColors"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.InteractiveBarChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.InteractiveBarChartSemanticColors",
            "name": "Interactive Bar Charts with Semantic Colors",
            "description": "Shows several Interactive Bar Charts with Semantic Colors.",
            "entityId": "sap.suite.ui.microchart.InteractiveBarChart",
            "contexts": {
              "sap.suite.ui.microchart.InteractiveBarChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.InteractiveBarChart"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.InteractiveBarChartSemanticColors/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Interactive Bar Chart InteractiveBarChart Data Visualization Interactive Bar Charts in Flexbox Shows several Interactive Bar Charts used inside an sap.m.FlexBox. Interactive Bar Charts with Semantic Colors Shows several Interactive Bar Charts with Semantic Colors. Interactive Bar Charts in Flexbox Interactive Bar Charts with Semantic Colors",
        "sampleCount": 2,
        "key": "#/entity/sap.suite.ui.microchart.InteractiveBarChart"
      },
      {
        "id": "sap.suite.ui.microchart.InteractiveLineChart",
        "name": "Interactive Line Chart",
        "category": "Data Visualization",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.InteractiveLineChart",
            "name": "Interactive Line Charts in Flexbox",
            "description": "Shows several Interactive Line Charts used inside an sap.m.FlexBox.",
            "entityId": "sap.suite.ui.microchart.InteractiveLineChart",
            "contexts": {
              "sap.suite.ui.microchart.InteractiveLineChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.InteractiveLineChartSemanticColors"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.InteractiveLineChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.InteractiveLineChartSemanticColors",
            "name": "Interactive Line Charts with Semantic Colors",
            "description": "Shows several Interactive Line Charts with Semantic Colors.",
            "entityId": "sap.suite.ui.microchart.InteractiveLineChart",
            "contexts": {
              "sap.suite.ui.microchart.InteractiveLineChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.InteractiveLineChart"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.InteractiveLineChartSemanticColors/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Interactive Line Chart InteractiveLineChart Data Visualization Interactive Line Charts in Flexbox Shows several Interactive Line Charts used inside an sap.m.FlexBox. Interactive Line Charts with Semantic Colors Shows several Interactive Line Charts with Semantic Colors. Interactive Line Charts in Flexbox Interactive Line Charts with Semantic Colors",
        "sampleCount": 2,
        "key": "#/entity/sap.suite.ui.microchart.InteractiveLineChart"
      },
      {
        "id": "sap.suite.ui.microchart.InteractiveDonutChart",
        "name": "Interactive Donut Chart",
        "category": "Data Visualization",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.InteractiveDonutChart",
            "name": "Interactive Donut Charts in Flexbox",
            "description": "Shows several Interactive Donut Charts used inside an sap.m.FlexBox.",
            "entityId": "sap.suite.ui.microchart.InteractiveDonutChart",
            "contexts": {
              "sap.suite.ui.microchart.InteractiveDonutChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.InteractiveDonutChartSemanticColors"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.InteractiveDonutChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.InteractiveDonutChartSemanticColors",
            "name": "Interactive Donut Charts with Semantic Colors",
            "description": "Shows several Interactive Donut Charts with Semantic Colors.",
            "entityId": "sap.suite.ui.microchart.InteractiveDonutChart",
            "contexts": {
              "sap.suite.ui.microchart.InteractiveDonutChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.InteractiveDonutChart"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.InteractiveDonutChartSemanticColors/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Interactive Donut Chart InteractiveDonutChart Data Visualization Interactive Donut Charts in Flexbox Shows several Interactive Donut Charts used inside an sap.m.FlexBox. Interactive Donut Charts with Semantic Colors Shows several Interactive Donut Charts with Semantic Colors. Interactive Donut Charts in Flexbox Interactive Donut Charts with Semantic Colors",
        "sampleCount": 2,
        "key": "#/entity/sap.suite.ui.microchart.InteractiveDonutChart"
      },
      {
        "id": "sap.suite.ui.microchart.LineMicroChart",
        "name": "Micro Chart – Line",
        "category": "Data Visualization",
        "since": "1.48",
        "samples": [
          {
            "id": "sap.suite.ui.microchart.sample.LineMicroChart",
            "name": "Line Micro Chart",
            "description": "Shows several Line Micro Charts.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.LineMicroChart": {
                "nextSampleId": "sap.suite.ui.microchart.sample.LineMicroChartBinding"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.LineMicroChart/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.LineMicroChartBinding",
            "name": "Line Micro Chart with Custom Binding",
            "description": "Shows Line Micro Charts not based on a template.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChart",
                "nextSampleId": "sap.suite.ui.microchart.sample.LineMicroChartScale"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.LineMicroChartBinding/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.LineMicroChartScale",
            "name": "Line Micro Charts - Manual Scale",
            "description": "Shows several Line Micro Charts with manual scale.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartBinding",
                "nextSampleId": "sap.suite.ui.microchart.sample.LineMicroChartGenericTile"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.LineMicroChartScale/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.LineMicroChartGenericTile",
            "name": "Line Micro Chart on a Generic Tile",
            "description": "Shows several Line Micro Charts inside the Generic Tile.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartScale",
                "nextSampleId": "sap.suite.ui.microchart.sample.LineMicroChartResponsive"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.LineMicroChartGenericTile/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.LineMicroChartResponsive",
            "name": "Line Micro Charts - Responsiveness",
            "description": "Shows the Line Micro Chart with responsive design.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartGenericTile",
                "nextSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.LineMicroChartResponsive/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable",
            "name": "Line Micro Chart in a Grid Table",
            "description": "Shows a line micro chart inside an sap.ui.table.Table element.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartResponsive",
                "nextSampleId": "sap.suite.ui.microchart.sample.MicroChartsInTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.LineMicroChartInGridTable/preview"
          },
          {
            "id": "sap.suite.ui.microchart.sample.MicroChartsInTable",
            "name": "Micro Charts in Table",
            "description": "Shows several Micro Charts used inside of sap.m.Table.",
            "entityId": "sap.suite.ui.microchart.LineMicroChart",
            "contexts": {
              "sap.suite.ui.microchart.AreaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.AreaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.BulletMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.BulletMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ComparisonMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ComparisonMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.ColumnMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.ColumnMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.DeltaMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.DeltaMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.HarveyBallMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.HarveyBallMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.RadialMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.RadialMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.StackedBarMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.StackedBarMicroChartInGridTable"
              },
              "sap.suite.ui.microchart.LineMicroChart": {
                "previousSampleId": "sap.suite.ui.microchart.sample.LineMicroChartInGridTable"
              }
            },
            "key": "#/sample/sap.suite.ui.microchart.sample.MicroChartsInTable/preview"
          }
        ],
        "appComponent": "CA-UI5-SC",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.suite.ui.microchart",
        "library": "sap.suite.ui.microchart",
        "searchTags": "Micro Chart – Line MicroChart–Line Data Visualization Line Micro Chart Shows several Line Micro Charts. Line Micro Chart with Custom Binding Shows Line Micro Charts not based on a template. Line Micro Charts - Manual Scale Shows several Line Micro Charts with manual scale. Line Micro Chart on a Generic Tile Shows several Line Micro Charts inside the Generic Tile. Line Micro Charts - Responsiveness Shows the Line Micro Chart with responsive design. Line Micro Chart in a Grid Table Shows a line micro chart inside an sap.ui.table.Table element. Micro Charts in Table Shows several Micro Charts used inside of sap.m.Table. Line Micro Chart Line Micro Chart with Custom Binding Line Micro Charts - Manual Scale Line Micro Chart on a Generic Tile Line Micro Charts - Responsiveness Line Micro Chart in a Grid Table Micro Charts in Table",
        "sampleCount": 7,
        "key": "#/entity/sap.suite.ui.microchart.LineMicroChart"
      },
      {
        "id": "sap.tnt.InfoLabel",
        "name": "Info Label",
        "category": "Action",
        "since": "1.54",
        "samples": [
          {
            "id": "sap.tnt.sample.InfoLabel",
            "name": "InfoLabel in non-editable Form",
            "description": "<code>InfoLabel</code> used in non-editable <code>Form</code>. Property <code>displayOnly</code> of the Control must be set to true",
            "entityId": "sap.tnt.InfoLabel",
            "contexts": {
              "sap.tnt.InfoLabel": {
                "nextSampleId": "sap.tnt.sample.InfoLabelInTable"
              }
            },
            "key": "#/sample/sap.tnt.sample.InfoLabel/preview"
          },
          {
            "id": "sap.tnt.sample.InfoLabelInTable",
            "name": "InfoLabel in Table",
            "description": "<code>InfoLabel</code> used in content of <code>Table</code>",
            "entityId": "sap.tnt.InfoLabel",
            "contexts": {
              "sap.tnt.InfoLabel": {
                "previousSampleId": "sap.tnt.sample.InfoLabel",
                "nextSampleId": "sap.tnt.sample.InfoLabelInDynamicPage"
              }
            },
            "key": "#/sample/sap.tnt.sample.InfoLabelInTable/preview"
          },
          {
            "id": "sap.tnt.sample.InfoLabelInDynamicPage",
            "name": "InfoLabel in DynamicPage",
            "description": "<code>InfoLabel</code> used as subheader in <code>DynamicPage</code>",
            "entityId": "sap.tnt.InfoLabel",
            "contexts": {
              "sap.tnt.InfoLabel": {
                "previousSampleId": "sap.tnt.sample.InfoLabelInTable"
              }
            },
            "key": "#/sample/sap.tnt.sample.InfoLabelInDynamicPage/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.tnt",
        "library": "sap.tnt",
        "searchTags": "Info Label InfoLabel Action InfoLabel in non-editable Form <code>InfoLabel</code> used in non-editable <code>Form</code>. Property <code>displayOnly</code> of the Control must be set to true InfoLabel in Table <code>InfoLabel</code> used in content of <code>Table</code> InfoLabel in DynamicPage <code>InfoLabel</code> used as subheader in <code>DynamicPage</code> InfoLabel in non-editable Form InfoLabel in Table InfoLabel in DynamicPage",
        "sampleCount": 3,
        "key": "#/entity/sap.tnt.InfoLabel"
      },
      {
        "id": "sap.tnt.NavigationList",
        "name": "Navigation List",
        "category": "Action",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.tnt.sample.NavigationList",
            "name": "Navigation List",
            "description": "Navigation List in a Page",
            "entityId": "sap.tnt.NavigationList",
            "contexts": {
              "sap.tnt.NavigationList": {}
            },
            "key": "#/sample/sap.tnt.sample.NavigationList/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.tnt",
        "library": "sap.tnt",
        "searchTags": "Navigation List NavigationList Action Navigation List Navigation List in a Page Navigation List",
        "sampleCount": 1,
        "key": "#/entity/sap.tnt.NavigationList"
      },
      {
        "id": "sap.tnt.SideNavigation",
        "name": "Side Navigation",
        "category": "Action",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.tnt.sample.SideNavigation",
            "name": "Side Navigation",
            "description": "SideNavigation in container with fixed width.",
            "entityId": "sap.tnt.SideNavigation",
            "contexts": {
              "sap.tnt.SideNavigation": {}
            },
            "key": "#/sample/sap.tnt.sample.SideNavigation/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.tnt",
        "library": "sap.tnt",
        "searchTags": "Side Navigation SideNavigation Action Side Navigation SideNavigation in container with fixed width. Side Navigation",
        "sampleCount": 1,
        "key": "#/entity/sap.tnt.SideNavigation"
      },
      {
        "id": "sap.tnt.ToolHeader",
        "name": "Tool Header",
        "category": "Action",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.tnt.sample.ToolHeader",
            "name": "ToolHeader",
            "description": "ToolHeader is useful for showing lists of action buttons",
            "entityId": "sap.tnt.ToolHeader",
            "contexts": {
              "sap.tnt.ToolHeader": {
                "nextSampleId": "sap.tnt.sample.ToolHeaderControls"
              }
            },
            "key": "#/sample/sap.tnt.sample.ToolHeader/preview"
          },
          {
            "id": "sap.tnt.sample.ToolHeaderControls",
            "name": "ToolHeader Controls",
            "description": "ToolHeader can contain any controls",
            "entityId": "sap.tnt.ToolHeader",
            "contexts": {
              "sap.tnt.ToolHeader": {
                "previousSampleId": "sap.tnt.sample.ToolHeader",
                "nextSampleId": "sap.tnt.sample.ToolHeaderIconTabHeader"
              }
            },
            "key": "#/sample/sap.tnt.sample.ToolHeaderControls/preview"
          },
          {
            "id": "sap.tnt.sample.ToolHeaderIconTabHeader",
            "name": "ToolHeader with IconTabHeader",
            "description": "ToolHeader can contain IconTabHeader. When both controls are combined, the IconTabHeader supports only inline text. No icons can be used.",
            "entityId": "sap.tnt.ToolHeader",
            "contexts": {
              "sap.tnt.ToolHeader": {
                "previousSampleId": "sap.tnt.sample.ToolHeaderControls",
                "nextSampleId": "sap.tnt.sample.ToolHeaderFiori3"
              }
            },
            "key": "#/sample/sap.tnt.sample.ToolHeaderIconTabHeader/preview"
          },
          {
            "id": "sap.tnt.sample.ToolHeaderFiori3",
            "name": "ToolHeader - Fiori 3",
            "description": "ToolHeader that mimics the content of Fiori 3 Shell.",
            "entityId": "sap.tnt.ToolHeader",
            "contexts": {
              "sap.tnt.ToolHeader": {
                "previousSampleId": "sap.tnt.sample.ToolHeaderIconTabHeader"
              }
            },
            "key": "#/sample/sap.tnt.sample.ToolHeaderFiori3/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.tnt",
        "library": "sap.tnt",
        "searchTags": "Tool Header ToolHeader Action ToolHeader ToolHeader is useful for showing lists of action buttons ToolHeader Controls ToolHeader can contain any controls ToolHeader with IconTabHeader ToolHeader can contain IconTabHeader. When both controls are combined, the IconTabHeader supports only inline text. No icons can be used. ToolHeader - Fiori 3 ToolHeader that mimics the content of Fiori 3 Shell. ToolHeader ToolHeader Controls ToolHeader with IconTabHeader ToolHeader - Fiori 3",
        "sampleCount": 4,
        "key": "#/entity/sap.tnt.ToolHeader"
      },
      {
        "id": "sap.tnt.ToolPage",
        "name": "Tool Page Layout",
        "category": "Layout",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.tnt.sample.ToolPage",
            "name": "Tool Page",
            "description": "A tool page layout combining ToolHeader, SideNavigation and content part",
            "entityId": "sap.tnt.ToolPage",
            "contexts": {
              "sap.tnt.ToolPage": {}
            },
            "key": "#/sample/sap.tnt.sample.ToolPage/preview"
          }
        ],
        "appComponent": "CA-UI5-CTR",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.tnt",
        "library": "sap.tnt",
        "searchTags": "Tool Page Layout ToolPageLayout Layout Tool Page A tool page layout combining ToolHeader, SideNavigation and content part Tool Page",
        "sampleCount": 1,
        "key": "#/entity/sap.tnt.ToolPage"
      },
      {
        "id": "sap.ui.codeeditor.CodeEditor",
        "name": "Code Editor",
        "category": "User Input",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.ui.codeeditor.sample.CodeEditor",
            "name": "Code Editor",
            "description": "Display or edit  source code with syntax highlighting for various source types.",
            "entityId": "sap.ui.codeeditor.CodeEditor",
            "contexts": {
              "sap.ui.codeeditor.CodeEditor": {
                "nextSampleId": "sap.ui.codeeditor.sample.CodeEditorIconTabHeader"
              }
            },
            "key": "#/sample/sap.ui.codeeditor.sample.CodeEditor/preview"
          },
          {
            "id": "sap.ui.codeeditor.sample.CodeEditorIconTabHeader",
            "name": "Code Editor with IconTabHeader",
            "description": "Example how to use CodeEditor with IconTabHeader to create a tab-based experience.",
            "entityId": "sap.ui.codeeditor.CodeEditor",
            "contexts": {
              "sap.ui.codeeditor.CodeEditor": {
                "previousSampleId": "sap.ui.codeeditor.sample.CodeEditor"
              }
            },
            "key": "#/sample/sap.ui.codeeditor.sample.CodeEditorIconTabHeader/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.codeeditor",
        "library": "sap.ui.codeeditor",
        "searchTags": "Code Editor CodeEditor User Input Code Editor Display or edit  source code with syntax highlighting for various source types. Code Editor with IconTabHeader Example how to use CodeEditor with IconTabHeader to create a tab-based experience. Code Editor Code Editor with IconTabHeader",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.codeeditor.CodeEditor"
      },
      {
        "id": "sap.ui.comp.filterbar.FilterBar",
        "name": "Filter Bar",
        "category": "Container",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.comp.sample.filterbar.example1",
            "name": "Filter Bar",
            "description": "Filter Bar visualizing some filters. Not a full application!",
            "entityId": "sap.ui.comp.filterbar.FilterBar",
            "contexts": {
              "sap.ui.comp.filterbar.FilterBar": {
                "nextSampleId": "sap.ui.comp.sample.filterbar.example2"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.filterbar.example1/preview"
          },
          {
            "id": "sap.ui.comp.sample.filterbar.example2",
            "name": "Filter Bar with Basic Search",
            "description": "Filter Bar with basic search and events.  Not a full application!",
            "entityId": "sap.ui.comp.filterbar.FilterBar",
            "contexts": {
              "sap.ui.comp.filterbar.FilterBar": {
                "previousSampleId": "sap.ui.comp.sample.filterbar.example1",
                "nextSampleId": "sap.ui.comp.sample.filterbar.DynamicPageListReport"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.filterbar.example2/preview"
          },
          {
            "id": "sap.ui.comp.sample.filterbar.DynamicPageListReport",
            "name": "Filter Bar in Dynamic Page List Report",
            "description": "Filter Bar in Dynamic Page with List Report.  Not a full application!",
            "entityId": "sap.ui.comp.filterbar.FilterBar",
            "contexts": {
              "sap.ui.comp.filterbar.FilterBar": {
                "previousSampleId": "sap.ui.comp.sample.filterbar.example2"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.filterbar.DynamicPageListReport/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.filterbar",
        "library": "sap.ui.comp",
        "searchTags": "Filter Bar FilterBar Container Filter Bar Filter Bar visualizing some filters. Not a full application! Filter Bar with Basic Search Filter Bar with basic search and events.  Not a full application! Filter Bar in Dynamic Page List Report Filter Bar in Dynamic Page with List Report.  Not a full application! Filter Bar Filter Bar with Basic Search Filter Bar in Dynamic Page List Report",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.comp.filterbar.FilterBar"
      },
      {
        "id": "sap.ui.comp.smartfilterbar.SmartFilterBar",
        "name": "Smart Filter Bar",
        "category": "Container",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartfilterbar.example1",
            "name": "Smart Filter Bar",
            "description": "SmartFilterBar creates a FilterBar for an OData entity based on the OData metadata.",
            "entityId": "sap.ui.comp.smartfilterbar.SmartFilterBar",
            "contexts": {
              "sap.ui.comp.smartfilterbar.SmartFilterBar": {
                "nextSampleId": "sap.ui.comp.sample.smartfilterbar.example2"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartfilterbar.example1/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartfilterbar.example2",
            "name": "Smart Filter Bar in a DynamicPage",
            "description": "SmartFilterBar inside of the sap.f.DynamicPage.",
            "entityId": "sap.ui.comp.smartfilterbar.SmartFilterBar",
            "contexts": {
              "sap.ui.comp.smartfilterbar.SmartFilterBar": {
                "previousSampleId": "sap.ui.comp.sample.smartfilterbar.example1",
                "nextSampleId": "sap.ui.comp.sample.smartfilterbar.UseDateRangeType"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartfilterbar.example2/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartfilterbar.UseDateRangeType",
            "name": "SmartFilterBar with useDateRangeType setting set to true",
            "description": "Enable all Edm.DateTime fields with filter-restriction interval to use DateRangeType",
            "entityId": "sap.ui.comp.smartfilterbar.SmartFilterBar",
            "contexts": {
              "sap.ui.comp.smartfilterbar.SmartFilterBar": {
                "previousSampleId": "sap.ui.comp.sample.smartfilterbar.example2",
                "nextSampleId": "sap.ui.comp.sample.smartfilterbar.ControlConfigurationDateRangeType"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartfilterbar.UseDateRangeType/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartfilterbar.ControlConfigurationDateRangeType",
            "name": "SmartFilterBar with controlConfiguration conditionType DateRangeType",
            "description": "Add a DateRangeType controlConfiguration for filter fields with Edm.DateTime type.",
            "entityId": "sap.ui.comp.smartfilterbar.SmartFilterBar",
            "contexts": {
              "sap.ui.comp.smartfilterbar.SmartFilterBar": {
                "previousSampleId": "sap.ui.comp.sample.smartfilterbar.UseDateRangeType",
                "nextSampleId": "sap.ui.comp.sample.smartfilterbar.CustomDateRangeType"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartfilterbar.ControlConfigurationDateRangeType/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartfilterbar.CustomDateRangeType",
            "name": "SmartFilterBar with controlConfiguration conditionType customDateRangeType",
            "description": "Add a custom DateRangeType controlConfiguration for filter fields with Edm.DateTime type.",
            "entityId": "sap.ui.comp.smartfilterbar.SmartFilterBar",
            "contexts": {
              "sap.ui.comp.smartfilterbar.SmartFilterBar": {
                "previousSampleId": "sap.ui.comp.sample.smartfilterbar.ControlConfigurationDateRangeType"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartfilterbar.CustomDateRangeType/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartfilterbar",
        "library": "sap.ui.comp",
        "searchTags": "Smart Filter Bar SmartFilterBar Container Smart Filter Bar SmartFilterBar creates a FilterBar for an OData entity based on the OData metadata. Smart Filter Bar in a DynamicPage SmartFilterBar inside of the sap.f.DynamicPage. SmartFilterBar with useDateRangeType setting set to true Enable all Edm.DateTime fields with filter-restriction interval to use DateRangeType SmartFilterBar with controlConfiguration conditionType DateRangeType Add a DateRangeType controlConfiguration for filter fields with Edm.DateTime type. SmartFilterBar with controlConfiguration conditionType customDateRangeType Add a custom DateRangeType controlConfiguration for filter fields with Edm.DateTime type. Smart Filter Bar Smart Filter Bar in a DynamicPage SmartFilterBar with useDateRangeType setting set to true SmartFilterBar with controlConfiguration conditionType DateRangeType SmartFilterBar with controlConfiguration conditionType customDateRangeType",
        "sampleCount": 5,
        "key": "#/entity/sap.ui.comp.smartfilterbar.SmartFilterBar"
      },
      {
        "id": "sap.ui.comp.smartcontrols",
        "name": "Smart Controls Overview",
        "category": "Container",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartcontrols",
            "name": "Smart Controls",
            "description": "Smart Controls Example",
            "entityId": "sap.ui.comp.smartcontrols",
            "contexts": {
              "sap.ui.comp.smartcontrols": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartcontrols/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp",
        "library": "sap.ui.comp",
        "searchTags": "Smart Controls Overview SmartControlsOverview Container Smart Controls Smart Controls Example Smart Controls",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartcontrols"
      },
      {
        "id": "sap.ui.comp.navpopover.SmartLink",
        "name": "Smart Link",
        "category": "Container",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartlink.example_01",
            "name": "Smart Link 'simple'",
            "description": "Several examples",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "nextSampleId": "sap.ui.comp.sample.smartlink.example_03"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_01/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlink.example_03",
            "name": "Smart Link to Factsheet as 'direct link'",
            "description": "SmartLink embedded into SmartTable (Factsheet)",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "previousSampleId": "sap.ui.comp.sample.smartlink.example_01",
                "nextSampleId": "sap.ui.comp.sample.smartlink.example_04"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_03/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlink.example_04",
            "name": "Smart Link with 'TextArrangement' annotation",
            "description": "Several examples",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "previousSampleId": "sap.ui.comp.sample.smartlink.example_03",
                "nextSampleId": "sap.ui.comp.sample.smartlink.example_02"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_04/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlink.example_02",
            "name": "Smart Link with 'SemanticKey' annotation",
            "description": "Several examples",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "previousSampleId": "sap.ui.comp.sample.smartlink.example_04",
                "nextSampleId": "sap.ui.comp.sample.smartlink.example_08"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_02/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlink.example_08",
            "name": "Smart Link with 'Contact' annotation",
            "description": "Several examples",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "previousSampleId": "sap.ui.comp.sample.smartlink.example_02",
                "nextSampleId": "sap.ui.comp.sample.smartlink.example_05"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_08/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlink.example_05",
            "name": "Smart Link enhanced in 'breakout'",
            "description": "Several examples",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "previousSampleId": "sap.ui.comp.sample.smartlink.example_08",
                "nextSampleId": "sap.ui.comp.sample.smartlink.example_09"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_05/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlink.example_09",
            "name": "Smart Link with field annotated to multiple SemanticObjects",
            "description": "Several examples",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "previousSampleId": "sap.ui.comp.sample.smartlink.example_05",
                "nextSampleId": "sap.ui.comp.sample.smartlink.example_07"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_09/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlink.example_07",
            "name": "Smart Link with 'SemanticObjectUnavailableActions' annotation",
            "description": "Several examples",
            "entityId": "sap.ui.comp.navpopover.SmartLink",
            "contexts": {
              "sap.ui.comp.navpopover.SmartLink": {
                "previousSampleId": "sap.ui.comp.sample.smartlink.example_09"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlink.example_07/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.navpopover",
        "library": "sap.ui.comp",
        "searchTags": "Smart Link SmartLink Container Smart Link 'simple' Several examples Smart Link to Factsheet as 'direct link' SmartLink embedded into SmartTable (Factsheet) Smart Link with 'TextArrangement' annotation Several examples Smart Link with 'SemanticKey' annotation Several examples Smart Link with 'Contact' annotation Several examples Smart Link enhanced in 'breakout' Several examples Smart Link with field annotated to multiple SemanticObjects Several examples Smart Link with 'SemanticObjectUnavailableActions' annotation Several examples Smart Link 'simple' Smart Link to Factsheet as 'direct link' Smart Link with 'TextArrangement' annotation Smart Link with 'SemanticKey' annotation Smart Link with 'Contact' annotation Smart Link enhanced in 'breakout' Smart Link with field annotated to multiple SemanticObjects Smart Link with 'SemanticObjectUnavailableActions' annotation",
        "sampleCount": 8,
        "key": "#/entity/sap.ui.comp.navpopover.SmartLink"
      },
      {
        "id": "sap.ui.comp.smarttable.SmartTable",
        "name": "Smart Table",
        "category": "Container",
        "since": "1.25",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smarttable",
            "name": "Smart Table",
            "description": "SmartTable control creates a table for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "nextSampleId": "sap.ui.comp.sample.smarttable.smartTableWithCriticality"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.smartTableWithCriticality",
            "name": "Smart (Grid) Table with Criticality",
            "description": "SmartTable control of type Grid Table with ObjectStatus control for representing Criticality annotation",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable",
                "nextSampleId": "sap.ui.comp.sample.smarttable.smartMTableWithCriticality"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.smartTableWithCriticality/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.smartMTableWithCriticality",
            "name": "Smart (Responsive) Table with Criticality",
            "description": "SmartTable control of type Responsive Table with ObjectStatus control for representing Criticality annotation",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.smartTableWithCriticality",
                "nextSampleId": "sap.ui.comp.sample.smarttable.mtable"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.smartMTableWithCriticality/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.mtable",
            "name": "Smart Table with responsive table",
            "description": "SmartTable control creates a responsive table for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.smartMTableWithCriticality",
                "nextSampleId": "sap.ui.comp.sample.smarttable.mtableHighlight"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.mtable/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.mtableHighlight",
            "name": "Smart Table with responsive table having row highlight",
            "description": "SmartTable control creates a responsive table with row highlight, for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.mtable",
                "nextSampleId": "sap.ui.comp.sample.smarttable.mtableCustom"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.mtableHighlight/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.mtableCustom",
            "name": "Smart Table with responsive table having custom column",
            "description": "SmartTable control creates a responsive table for an OData entity set based on the OData metadata as well as having custom column.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.mtableHighlight",
                "nextSampleId": "sap.ui.comp.sample.smarttable.mtableCustomToolbar"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.mtableCustom/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.mtableCustomToolbar",
            "name": "Smart Table with custom buttons for personalization features (sort, filter..)",
            "description": "SmartTable control with custom toolbar buttons to open individual panels of personalization directly.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.mtableCustom",
                "nextSampleId": "sap.ui.comp.sample.smarttable.mtableSticky"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.mtableCustomToolbar/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.mtableSticky",
            "name": "Smart Table with responsive table having sticky toolbar and column headers",
            "description": "SmartTable control creates a responsive table with sticky toolbar and column headers.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.mtableCustomToolbar",
                "nextSampleId": "sap.ui.comp.sample.smarttable.fullscreen"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.mtableSticky/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.fullscreen",
            "name": "Smart Table with full screen button",
            "description": "SmartTable control creates a table for an OData entity set based on the OData metadata and also has a full screen button.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.mtableSticky",
                "nextSampleId": "sap.ui.comp.sample.smarttable.smarttablesmartmicrochart"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.fullscreen/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.smarttablesmartmicrochart",
            "name": "Smart Table with Smart Bullet Micro Chart",
            "description": "SmartTable control creates a responsive table containing SmartBulletMicroChart control for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.fullscreen",
                "nextSampleId": "sap.ui.comp.sample.smarttable.smarttreetable"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.smarttablesmartmicrochart/preview"
          },
          {
            "id": "sap.ui.comp.sample.smarttable.smarttreetable",
            "name": "Smart Table with Tree Table",
            "description": "SmartTable control creates a Tree Table for an OData entity set based on the OData metadata. Note: This example is based on mock data, so defining the number of levels in the beforeRebindTable event should be avoided for performance reasons.",
            "entityId": "sap.ui.comp.smarttable.SmartTable",
            "contexts": {
              "sap.ui.comp.smarttable.SmartTable": {
                "previousSampleId": "sap.ui.comp.sample.smarttable.smarttablesmartmicrochart"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smarttable.smarttreetable/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smarttable",
        "library": "sap.ui.comp",
        "searchTags": "Smart Table SmartTable Container Smart Table SmartTable control creates a table for an OData entity set based on the OData metadata. Smart (Grid) Table with Criticality SmartTable control of type Grid Table with ObjectStatus control for representing Criticality annotation Smart (Responsive) Table with Criticality SmartTable control of type Responsive Table with ObjectStatus control for representing Criticality annotation Smart Table with responsive table SmartTable control creates a responsive table for an OData entity set based on the OData metadata. Smart Table with responsive table having row highlight SmartTable control creates a responsive table with row highlight, for an OData entity set based on the OData metadata. Smart Table with responsive table having custom column SmartTable control creates a responsive table for an OData entity set based on the OData metadata as well as having custom column. Smart Table with custom buttons for personalization features (sort, filter..) SmartTable control with custom toolbar buttons to open individual panels of personalization directly. Smart Table with responsive table having sticky toolbar and column headers SmartTable control creates a responsive table with sticky toolbar and column headers. Smart Table with full screen button SmartTable control creates a table for an OData entity set based on the OData metadata and also has a full screen button. Smart Table with Smart Bullet Micro Chart SmartTable control creates a responsive table containing SmartBulletMicroChart control for an OData entity set based on the OData metadata. Smart Table with Tree Table SmartTable control creates a Tree Table for an OData entity set based on the OData metadata. Note: This example is based on mock data, so defining the number of levels in the beforeRebindTable event should be avoided for performance reasons. Smart Table Smart (Grid) Table with Criticality Smart (Responsive) Table with Criticality Smart Table with responsive table Smart Table with responsive table having row highlight Smart Table with responsive table having custom column Smart Table with custom buttons for personalization features (sort, filter..) Smart Table with responsive table having sticky toolbar and column headers Smart Table with full screen button Smart Table with Smart Bullet Micro Chart Smart Table with Tree Table",
        "sampleCount": 11,
        "key": "#/entity/sap.ui.comp.smarttable.SmartTable"
      },
      {
        "id": "sap.ui.comp.smartlist.SmartList",
        "name": "Smart List",
        "category": "Container",
        "since": "1.48",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartlist",
            "name": "Smart List",
            "description": "SmartList control creates a sap.m.List for an OData entity set based on the template provided in the view.",
            "entityId": "sap.ui.comp.smartlist.SmartList",
            "contexts": {
              "sap.ui.comp.smartlist.SmartList": {
                "nextSampleId": "sap.ui.comp.sample.smartlist.smartListTree"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlist/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartlist.smartListTree",
            "name": "Smart List with sap.m.Tree",
            "description": "SmartList control configured to show a sap.m.Tree based on the configuration and template provided in the view.",
            "entityId": "sap.ui.comp.smartlist.SmartList",
            "contexts": {
              "sap.ui.comp.smartlist.SmartList": {
                "previousSampleId": "sap.ui.comp.sample.smartlist"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartlist.smartListTree/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartlist",
        "library": "sap.ui.comp",
        "searchTags": "Smart List SmartList Container Smart List SmartList control creates a sap.m.List for an OData entity set based on the template provided in the view. Smart List with sap.m.Tree SmartList control configured to show a sap.m.Tree based on the configuration and template provided in the view. Smart List Smart List with sap.m.Tree",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.comp.smartlist.SmartList"
      },
      {
        "id": "sap.ui.comp.smartchart.SmartChart",
        "name": "Smart Chart",
        "category": "Container",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartchart.general",
            "name": "Smart Chart",
            "description": "SmartChart control creates a chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "nextSampleId": "sap.ui.comp.sample.smartchart.chartQualifier"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.general/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartchart.chartQualifier",
            "name": "Smart Chart with chart qualifier",
            "description": "SmartChart control selects the chart from the OData metadata with a CustomData chart qualifier.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "previousSampleId": "sap.ui.comp.sample.smartchart.general",
                "nextSampleId": "sap.ui.comp.sample.smartchart.presentationVariant"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.chartQualifier/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartchart.presentationVariant",
            "name": "Smart Chart with presentation variant",
            "description": "SmartChart control presents data based on PresentationVariant annotation.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "previousSampleId": "sap.ui.comp.sample.smartchart.chartQualifier",
                "nextSampleId": "sap.ui.comp.sample.smartchart.presentationVariantQualifier"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.presentationVariant/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartchart.presentationVariantQualifier",
            "name": "Smart Chart with presentation variant qualifier",
            "description": "SmartChart control selects the PresentationVariant for presenting the chart with a CustomData presentation variant qualifier.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "previousSampleId": "sap.ui.comp.sample.smartchart.presentationVariant",
                "nextSampleId": "sap.ui.comp.sample.smartchart.semanticPatterns"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.presentationVariantQualifier/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartchart.semanticPatterns",
            "name": "Smart Chart with semantic patterns",
            "description": "SmartChart control uses chart measure semantics based on UI.DataPoint annotation.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "previousSampleId": "sap.ui.comp.sample.smartchart.presentationVariantQualifier",
                "nextSampleId": "sap.ui.comp.sample.smartchart.semanticColoring"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.semanticPatterns/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartchart.semanticColoring",
            "name": "Smart Chart with semantic coloring on measure semantic",
            "description": "SmartChart control uses chart measure semantic coloring based on UI.DataPoint annotation.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "previousSampleId": "sap.ui.comp.sample.smartchart.semanticPatterns",
                "nextSampleId": "sap.ui.comp.sample.smartchart.semanticDimensionColoring"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.semanticColoring/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartchart.semanticDimensionColoring",
            "name": "Smart Chart with semantic coloring on dimension semantic",
            "description": "SmartChart control uses chart measure semantic coloring based on UI.ValueCriticality annotation.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "previousSampleId": "sap.ui.comp.sample.smartchart.semanticColoring",
                "nextSampleId": "sap.ui.comp.sample.smartchart.lightweight"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.semanticDimensionColoring/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartchart.lightweight",
            "name": "Smart Chart with lightweight settings",
            "description": "SmartChart control uses specific settings, such as a switch for the visibility of the toolbar, to show a simplified control.",
            "entityId": "sap.ui.comp.smartchart.SmartChart",
            "contexts": {
              "sap.ui.comp.smartchart.SmartChart": {
                "previousSampleId": "sap.ui.comp.sample.smartchart.semanticDimensionColoring"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartchart.lightweight/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartchart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Chart SmartChart Container Smart Chart SmartChart control creates a chart for an OData entity set based on the OData metadata. Smart Chart with chart qualifier SmartChart control selects the chart from the OData metadata with a CustomData chart qualifier. Smart Chart with presentation variant SmartChart control presents data based on PresentationVariant annotation. Smart Chart with presentation variant qualifier SmartChart control selects the PresentationVariant for presenting the chart with a CustomData presentation variant qualifier. Smart Chart with semantic patterns SmartChart control uses chart measure semantics based on UI.DataPoint annotation. Smart Chart with semantic coloring on measure semantic SmartChart control uses chart measure semantic coloring based on UI.DataPoint annotation. Smart Chart with semantic coloring on dimension semantic SmartChart control uses chart measure semantic coloring based on UI.ValueCriticality annotation. Smart Chart with lightweight settings SmartChart control uses specific settings, such as a switch for the visibility of the toolbar, to show a simplified control. Smart Chart Smart Chart with chart qualifier Smart Chart with presentation variant Smart Chart with presentation variant qualifier Smart Chart with semantic patterns Smart Chart with semantic coloring on measure semantic Smart Chart with semantic coloring on dimension semantic Smart Chart with lightweight settings",
        "sampleCount": 8,
        "key": "#/entity/sap.ui.comp.smartchart.SmartChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartBulletMicroChart",
        "name": "Smart Bullet Micro Chart",
        "category": "Container",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleDirect",
            "name": "Criticality directly set",
            "description": "This sample shows how to directly set value criticalities via OData vocabulary annotations only. In addition, the unitOfMeasure association is used as well as the chartQualifier.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartBulletMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartBulletMicroChart": {
                "nextSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleTarget"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleDirect/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleTarget",
            "name": "Criticality Calculation: Target Direction",
            "description": "This sample shows the \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Target\".",
            "entityId": "sap.ui.comp.smartmicrochart.SmartBulletMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartBulletMicroChart": {
                "previousSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleDirect",
                "nextSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMinimize"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleTarget/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMinimize",
            "name": "Criticality Calculation: Minimize Direction",
            "description": "This sample shows \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Minimize\".",
            "entityId": "sap.ui.comp.smartmicrochart.SmartBulletMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartBulletMicroChart": {
                "previousSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleTarget",
                "nextSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMaximize"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMinimize/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMaximize",
            "name": "Criticality Calculation: Maximize Direction",
            "description": "This sample shows the \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Maximize\".",
            "entityId": "sap.ui.comp.smartmicrochart.SmartBulletMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartBulletMicroChart": {
                "previousSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMinimize",
                "nextSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleDeltaMode"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMaximize/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleDeltaMode",
            "name": "Smart Bullet Micro Chart in Delta Mode",
            "description": "This sample shows a SmartBulletMicroChart control used in delta mode.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartBulletMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartBulletMicroChart": {
                "previousSampleId": "sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleMaximize"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartBulletMicroChart.exampleDeltaMode/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Bullet Micro Chart SmartBulletMicroChart Container Criticality directly set This sample shows how to directly set value criticalities via OData vocabulary annotations only. In addition, the unitOfMeasure association is used as well as the chartQualifier. Criticality Calculation: Target Direction This sample shows the \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Target\". Criticality Calculation: Minimize Direction This sample shows \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Minimize\". Criticality Calculation: Maximize Direction This sample shows the \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Maximize\". Smart Bullet Micro Chart in Delta Mode This sample shows a SmartBulletMicroChart control used in delta mode. Criticality directly set Criticality Calculation: Target Direction Criticality Calculation: Minimize Direction Criticality Calculation: Maximize Direction Smart Bullet Micro Chart in Delta Mode",
        "sampleCount": 5,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartBulletMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartDeltaMicroChart",
        "name": "Smart Delta Micro Chart",
        "category": "Container",
        "since": "1.61",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartDeltaMicroChart",
            "name": "Smart Delta Micro Chart",
            "description": "Shows a smart delta micro chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartDeltaMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartDeltaMicroChart": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartDeltaMicroChart/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Delta Micro Chart SmartDeltaMicroChart Container Smart Delta Micro Chart Shows a smart delta micro chart for an OData entity set based on the OData metadata. Smart Delta Micro Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartDeltaMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartRadialMicroChart",
        "name": "Smart Radial Micro Chart",
        "category": "Container",
        "since": "1.42",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleDirect",
            "name": "Criticality directly set",
            "description": "This sample shows how to directly set value criticalities via OData vocabulary annotations only. In addition, the unitOfMeasure association is used as well as the chartQualifier.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartRadialMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartRadialMicroChart": {
                "nextSampleId": "sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleMinimize"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleDirect/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleMinimize",
            "name": "Criticality Calculation: Minimize Direction",
            "description": "This sample shows \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Minimize\".",
            "entityId": "sap.ui.comp.smartmicrochart.SmartRadialMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartRadialMicroChart": {
                "previousSampleId": "sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleDirect",
                "nextSampleId": "sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleMaximize"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleMinimize/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleMaximize",
            "name": "Criticality Calculation: Maximize Direction",
            "description": "This sample shows the \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Maximize\".",
            "entityId": "sap.ui.comp.smartmicrochart.SmartRadialMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartRadialMicroChart": {
                "previousSampleId": "sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleMinimize"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartRadialMicroChart.exampleMaximize/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Radial Micro Chart SmartRadialMicroChart Container Criticality directly set This sample shows how to directly set value criticalities via OData vocabulary annotations only. In addition, the unitOfMeasure association is used as well as the chartQualifier. Criticality Calculation: Minimize Direction This sample shows \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Minimize\". Criticality Calculation: Maximize Direction This sample shows the \"CriticalityCalculation\" annotation of the OData vocabulary with ImprovementDirection \"Maximize\". Criticality directly set Criticality Calculation: Minimize Direction Criticality Calculation: Maximize Direction",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartRadialMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart",
        "name": "Smart Harvey Ball Micro Chart",
        "category": "Container",
        "since": "1.62",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartHarveyBallMicroChart.exampleDirect",
            "name": "Smart Harvey Ball Micro Chart",
            "description": "Shows a smart Harvey Ball micro chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartHarveyBallMicroChart.exampleDirect/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Harvey Ball Micro Chart SmartHarveyBallMicroChart Container Smart Harvey Ball Micro Chart Shows a smart Harvey Ball micro chart for an OData entity set based on the OData metadata. Smart Harvey Ball Micro Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartAreaMicroChart",
        "name": "Smart Area Micro Chart",
        "category": "Container",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartAreaMicroChart",
            "name": "Smart Area Micro Chart",
            "description": "SmartAreaMicroChart control creates a chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartAreaMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartAreaMicroChart": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartAreaMicroChart/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Area Micro Chart SmartAreaMicroChart Container Smart Area Micro Chart SmartAreaMicroChart control creates a chart for an OData entity set based on the OData metadata. Smart Area Micro Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartAreaMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartLineMicroChart",
        "name": "Smart Line Micro Chart",
        "category": "Container",
        "since": "1.60",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartLineMicroChart",
            "name": "Smart Line Micro Chart",
            "description": "Shows a smart line micro chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartLineMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartLineMicroChart": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartLineMicroChart/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Line Micro Chart SmartLineMicroChart Container Smart Line Micro Chart Shows a smart line micro chart for an OData entity set based on the OData metadata. Smart Line Micro Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartLineMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartColumnMicroChart",
        "name": "Smart Column Micro Chart",
        "category": "Container",
        "since": "1.60",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartColumnMicroChart",
            "name": "Smart Column Micro Chart",
            "description": "Shows a smart column micro chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartColumnMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartColumnMicroChart": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartColumnMicroChart/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Column Micro Chart SmartColumnMicroChart Container Smart Column Micro Chart Shows a smart column micro chart for an OData entity set based on the OData metadata. Smart Column Micro Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartColumnMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart",
        "name": "Smart Stacked Bar Micro Chart",
        "category": "Container",
        "since": "1.58",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartStackedBarMicroChart",
            "name": "Smart Stacked Bar Micro Chart",
            "description": "SmartStackedBarMicroChart control creates a chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartStackedBarMicroChart/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Stacked Bar Micro Chart SmartStackedBarMicroChart Container Smart Stacked Bar Micro Chart SmartStackedBarMicroChart control creates a chart for an OData entity set based on the OData metadata. Smart Stacked Bar Micro Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartComparisonMicroChart",
        "name": "Smart Comparison Micro Chart",
        "category": "Container",
        "since": "1.58",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartComparisonMicroChart",
            "name": "Smart Comparison Micro Chart",
            "description": "SmartComparisonMicroChart control creates a chart for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartComparisonMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartComparisonMicroChart": {}
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartComparisonMicroChart/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Comparison Micro Chart SmartComparisonMicroChart Container Smart Comparison Micro Chart SmartComparisonMicroChart control creates a chart for an OData entity set based on the OData metadata. Smart Comparison Micro Chart",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartComparisonMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmicrochart.SmartMicroChart",
        "name": "Smart Micro Chart",
        "category": "Container",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartMicroChart.exampleBase",
            "name": "Smart  Micro Chart",
            "description": "The control creates a chart for an OData entity set based on the OData metadata and annotations. The sample shows the chart types which are currently supported, BulletMicroChart, AreaMicroChart or RadialMicroChart.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartMicroChart": {
                "nextSampleId": "sap.ui.comp.sample.smartmicrochart.SmartMicroChart.exampleDataPoint"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartMicroChart.exampleBase/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmicrochart.SmartMicroChart.exampleDataPoint",
            "name": "DataPoint Visualization",
            "description": "This sample shows the usage of a BulletMicroChart control with a DataPoint annotation.",
            "entityId": "sap.ui.comp.smartmicrochart.SmartMicroChart",
            "contexts": {
              "sap.ui.comp.smartmicrochart.SmartMicroChart": {
                "previousSampleId": "sap.ui.comp.sample.smartmicrochart.SmartMicroChart.exampleBase"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmicrochart.SmartMicroChart.exampleDataPoint/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmicrochart",
        "library": "sap.ui.comp",
        "searchTags": "Smart Micro Chart SmartMicroChart Container Smart  Micro Chart The control creates a chart for an OData entity set based on the OData metadata and annotations. The sample shows the chart types which are currently supported, BulletMicroChart, AreaMicroChart or RadialMicroChart. DataPoint Visualization This sample shows the usage of a BulletMicroChart control with a DataPoint annotation. Smart  Micro Chart DataPoint Visualization",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.comp.smartmicrochart.SmartMicroChart"
      },
      {
        "id": "sap.ui.comp.smartmultiedit.Container",
        "name": "Smart Multi Edit",
        "category": "Container",
        "since": "1.52",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmultiedit",
            "name": "Smart Multi Edit with All Supported Datatypes",
            "description": "Shows a smart table that includes attributes of all datatypes supported by the smart multi edit dialog.",
            "entityId": "sap.ui.comp.smartmultiedit.Container",
            "contexts": {
              "sap.ui.comp.smartmultiedit.Container": {
                "nextSampleId": "sap.ui.comp.sample.smartmultieditfriendly"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmultiedit/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmultieditfriendly",
            "name": "Smart Multi Edit",
            "description": "Shows a smart table with a smart multi edit dialog.",
            "entityId": "sap.ui.comp.smartmultiedit.Container",
            "contexts": {
              "sap.ui.comp.smartmultiedit.Container": {
                "previousSampleId": "sap.ui.comp.sample.smartmultiedit"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmultieditfriendly/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmultiedit",
        "library": "sap.ui.comp",
        "searchTags": "Smart Multi Edit SmartMultiEdit Container Smart Multi Edit with All Supported Datatypes Shows a smart table that includes attributes of all datatypes supported by the smart multi edit dialog. Smart Multi Edit Shows a smart table with a smart multi edit dialog. Smart Multi Edit with All Supported Datatypes Smart Multi Edit",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.comp.smartmultiedit.Container"
      },
      {
        "id": "sap.ui.comp.smartform.SmartForm",
        "name": "Smart Form",
        "category": "Container",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartform",
            "name": "Smart Form using ResponsiveGridLayout",
            "description": "SmartForm control creates a form for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartform.SmartForm",
            "contexts": {
              "sap.ui.comp.smartform.SmartForm": {
                "nextSampleId": "sap.ui.comp.sample.smartformColumn"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartform/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartformColumn",
            "name": "Smart Form using ColumnLayout",
            "description": "SmartForm control creates a form for an OData entity set based on the OData metadata.",
            "entityId": "sap.ui.comp.smartform.SmartForm",
            "contexts": {
              "sap.ui.comp.smartform.SmartForm": {
                "previousSampleId": "sap.ui.comp.sample.smartform"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartformColumn/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartform",
        "library": "sap.ui.comp",
        "searchTags": "Smart Form SmartForm Container Smart Form using ResponsiveGridLayout SmartForm control creates a form for an OData entity set based on the OData metadata. Smart Form using ColumnLayout SmartForm control creates a form for an OData entity set based on the OData metadata. Smart Form using ResponsiveGridLayout Smart Form using ColumnLayout",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.comp.smartform.SmartForm"
      },
      {
        "id": "sap.ui.comp.smartfield.SmartField",
        "name": "Smart Field",
        "category": "User Input",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartfield.Overview",
            "name": "Smart Field",
            "description": "Smart Field example",
            "entityId": "sap.ui.comp.smartfield.SmartField",
            "contexts": {
              "sap.ui.comp.smartfield.SmartField": {
                "nextSampleId": "sap.ui.comp.sample.smartfield.TextInEditModeSource"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartfield.Overview/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartfield.TextInEditModeSource",
            "name": "Smart Field - TextInEditModeSource (Experimental)",
            "description": "Smart field with the TextInEditModeSource property defined.",
            "entityId": "sap.ui.comp.smartfield.SmartField",
            "contexts": {
              "sap.ui.comp.smartfield.SmartField": {
                "previousSampleId": "sap.ui.comp.sample.smartfield.Overview"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartfield.TextInEditModeSource/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartfield",
        "library": "sap.ui.comp",
        "searchTags": "Smart Field SmartField User Input Smart Field Smart Field example Smart Field - TextInEditModeSource (Experimental) Smart field with the TextInEditModeSource property defined. Smart Field Smart Field - TextInEditModeSource (Experimental)",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.comp.smartfield.SmartField"
      },
      {
        "id": "sap.ui.comp.smartmultiinput.SmartMultiInput",
        "name": "Smart Multi Input",
        "category": "User Input",
        "since": "1.56",
        "samples": [
          {
            "id": "sap.ui.comp.sample.smartmultiinput.withBinding",
            "name": "Smart Multi Input with Data Binding",
            "description": "A Smart Multi Input control bound to an OData navigation property. This sample shows how to create and remove entities in the navigation property entity set.",
            "entityId": "sap.ui.comp.smartmultiinput.SmartMultiInput",
            "contexts": {
              "sap.ui.comp.smartmultiinput.SmartMultiInput": {
                "nextSampleId": "sap.ui.comp.sample.smartmultiinput.withoutBinding"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmultiinput.withBinding/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmultiinput.withoutBinding",
            "name": "Smart Multi Input Without Data Binding",
            "description": "A Smart Multi Input control mapped to a navigation property without binding. In this sample, the Smart Multi Input control does not create or remove entities but can be used as a filter.",
            "entityId": "sap.ui.comp.smartmultiinput.SmartMultiInput",
            "contexts": {
              "sap.ui.comp.smartmultiinput.SmartMultiInput": {
                "previousSampleId": "sap.ui.comp.sample.smartmultiinput.withBinding",
                "nextSampleId": "sap.ui.comp.sample.smartmultiinput.inSmartForm"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmultiinput.withoutBinding/preview"
          },
          {
            "id": "sap.ui.comp.sample.smartmultiinput.inSmartForm",
            "name": "Smart Multi Input Inside a Smart Form",
            "description": "A Smart Multi Input control embedded in a smart form with custom data.",
            "entityId": "sap.ui.comp.smartmultiinput.SmartMultiInput",
            "contexts": {
              "sap.ui.comp.smartmultiinput.SmartMultiInput": {
                "previousSampleId": "sap.ui.comp.sample.smartmultiinput.withoutBinding"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.smartmultiinput.inSmartForm/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.smartmultiinput",
        "library": "sap.ui.comp",
        "searchTags": "Smart Multi Input SmartMultiInput User Input Smart Multi Input with Data Binding A Smart Multi Input control bound to an OData navigation property. This sample shows how to create and remove entities in the navigation property entity set. Smart Multi Input Without Data Binding A Smart Multi Input control mapped to a navigation property without binding. In this sample, the Smart Multi Input control does not create or remove entities but can be used as a filter. Smart Multi Input Inside a Smart Form A Smart Multi Input control embedded in a smart form with custom data. Smart Multi Input with Data Binding Smart Multi Input Without Data Binding Smart Multi Input Inside a Smart Form",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.comp.smartmultiinput.SmartMultiInput"
      },
      {
        "id": "sap.ui.comp.tutorial.smartControls",
        "name": "Smart Controls",
        "category": "Tutorial",
        "since": "1.30",
        "formFactors": "Independent",
        "description": "This tutorial guides you through the world of Smart Controls in SAPUI5.",
        "docuLink": "#docs/guide/64bde9a8879d4f418e2849f7285dd757.html",
        "samplesAsSteps": [
          "Smart Field",
          "Smart Field with Value Help",
          "Smart Field with Smart Link",
          "Smart Form",
          "Smart Table",
          "Table Personalization",
          "Variant Management",
          "Page Variant Management",
          "Smart Chart"
        ],
        "namespace": "sap.ui.comp.tutorial",
        "library": "sap.ui.comp",
        "searchTags": "Smart Controls SmartControls Tutorial Smart Controls - Step 1 - Smart Field Smart Controls - Step 2 - Smart Field with Value Help Smart Controls - Step 3 - Smart Field with Smart Link Smart Controls - Step 4 - Smart Form Smart Controls - Step 5 - Smart Table Smart Controls - Step 6 - Table Personalization Smart Controls - Step 7 - Variant Management Smart Controls - Step 8 - Page Variant Management Smart Controls - Step 9 - Smart Chart",
        "samples": [
          {
            "id": "sap.ui.comp.tutorial.smartControls.01",
            "name": "Smart Controls - Step 1 - Smart Field",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.02",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.01/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.02",
            "name": "Smart Controls - Step 2 - Smart Field with Value Help",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.01",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.03",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.02/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.03",
            "name": "Smart Controls - Step 3 - Smart Field with Smart Link",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.02",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.04",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.03/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.04",
            "name": "Smart Controls - Step 4 - Smart Form",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.03",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.05",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.04/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.05",
            "name": "Smart Controls - Step 5 - Smart Table",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.04",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.06",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.05/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.06",
            "name": "Smart Controls - Step 6 - Table Personalization",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.05",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.07",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.06/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.07",
            "name": "Smart Controls - Step 7 - Variant Management",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.06",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.08",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.07/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.08",
            "name": "Smart Controls - Step 8 - Page Variant Management",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.07",
            "nextSampleId": "sap.ui.comp.tutorial.smartControls.09",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.08/preview"
          },
          {
            "id": "sap.ui.comp.tutorial.smartControls.09",
            "name": "Smart Controls - Step 9 - Smart Chart",
            "previousSampleId": "sap.ui.comp.tutorial.smartControls.08",
            "entityId": "sap.ui.comp.tutorial.smartControls",
            "key": "#/sample/sap.ui.comp.tutorial.smartControls.09/preview"
          }
        ],
        "sampleCount": 9,
        "key": "#/entity/sap.ui.comp.tutorial.smartControls"
      },
      {
        "id": "sap.ui.comp.valuehelpdialog.ValueHelpDialog",
        "name": "ValueHelpDialog",
        "category": "Container",
        "since": "1.24",
        "samples": [
          {
            "id": "sap.ui.comp.sample.valuehelpdialog.basic",
            "name": "ValueHelpDialog basic sample",
            "description": "A ValueHelpDialog with a basic configuration. This sample shows a supportMultiselect mode",
            "entityId": "sap.ui.comp.valuehelpdialog.ValueHelpDialog",
            "contexts": {
              "sap.ui.comp.valuehelpdialog.ValueHelpDialog": {
                "nextSampleId": "sap.ui.comp.sample.valuehelpdialog.singleSelect"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.valuehelpdialog.basic/preview"
          },
          {
            "id": "sap.ui.comp.sample.valuehelpdialog.singleSelect",
            "name": "ValueHelpDialog single select sample",
            "description": "A ValueHelpDialog with supportMultiselect set to false. This sample shows a single selection in the table",
            "entityId": "sap.ui.comp.valuehelpdialog.ValueHelpDialog",
            "contexts": {
              "sap.ui.comp.valuehelpdialog.ValueHelpDialog": {
                "previousSampleId": "sap.ui.comp.sample.valuehelpdialog.basic",
                "nextSampleId": "sap.ui.comp.sample.valuehelpdialog.conditionsTabOnly"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.valuehelpdialog.singleSelect/preview"
          },
          {
            "id": "sap.ui.comp.sample.valuehelpdialog.conditionsTabOnly",
            "name": "ValueHelpDialog with a conditions tab only",
            "description": "A ValueHelpDialog with supportRanges and supportRangesOnly set to true. This sample shows conditional panel configuration",
            "entityId": "sap.ui.comp.valuehelpdialog.ValueHelpDialog",
            "contexts": {
              "sap.ui.comp.valuehelpdialog.ValueHelpDialog": {
                "previousSampleId": "sap.ui.comp.sample.valuehelpdialog.singleSelect",
                "nextSampleId": "sap.ui.comp.sample.valuehelpdialog.singleConditionTab"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.valuehelpdialog.conditionsTabOnly/preview"
          },
          {
            "id": "sap.ui.comp.sample.valuehelpdialog.singleConditionTab",
            "name": "ValueHelpDialog with a single condition tab",
            "description": "A ValueHelpDialog with supportRanges and supportRangesOnly set to true and maxIncludeRanges set to 1. This sample shows conditional panel configuration which supports only 1 include",
            "entityId": "sap.ui.comp.valuehelpdialog.ValueHelpDialog",
            "contexts": {
              "sap.ui.comp.valuehelpdialog.ValueHelpDialog": {
                "previousSampleId": "sap.ui.comp.sample.valuehelpdialog.conditionsTabOnly",
                "nextSampleId": "sap.ui.comp.sample.valuehelpdialog.filterbar"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.valuehelpdialog.singleConditionTab/preview"
          },
          {
            "id": "sap.ui.comp.sample.valuehelpdialog.filterbar",
            "name": "ValueHelpDialog with a filterbar",
            "description": "A ValueHelpDialog filterbar. This sample shows a ValueHelpDialog with a filterbar",
            "entityId": "sap.ui.comp.valuehelpdialog.ValueHelpDialog",
            "contexts": {
              "sap.ui.comp.valuehelpdialog.ValueHelpDialog": {
                "previousSampleId": "sap.ui.comp.sample.valuehelpdialog.singleConditionTab",
                "nextSampleId": "sap.ui.comp.sample.valuehelpdialog.inputSuggestions"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.valuehelpdialog.filterbar/preview"
          },
          {
            "id": "sap.ui.comp.sample.valuehelpdialog.inputSuggestions",
            "name": "ValueHelpDialog with a input suggestions",
            "description": "A ValueHelpDialog with input suggestions. This sample shows a ValueHelpDialog with a suggestions for the input",
            "entityId": "sap.ui.comp.valuehelpdialog.ValueHelpDialog",
            "contexts": {
              "sap.ui.comp.valuehelpdialog.ValueHelpDialog": {
                "previousSampleId": "sap.ui.comp.sample.valuehelpdialog.filterbar"
              }
            },
            "key": "#/sample/sap.ui.comp.sample.valuehelpdialog.inputSuggestions/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.comp.valuehelpdialog",
        "library": "sap.ui.comp",
        "searchTags": "ValueHelpDialog ValueHelpDialog Container ValueHelpDialog basic sample A ValueHelpDialog with a basic configuration. This sample shows a supportMultiselect mode ValueHelpDialog single select sample A ValueHelpDialog with supportMultiselect set to false. This sample shows a single selection in the table ValueHelpDialog with a conditions tab only A ValueHelpDialog with supportRanges and supportRangesOnly set to true. This sample shows conditional panel configuration ValueHelpDialog with a single condition tab A ValueHelpDialog with supportRanges and supportRangesOnly set to true and maxIncludeRanges set to 1. This sample shows conditional panel configuration which supports only 1 include ValueHelpDialog with a filterbar A ValueHelpDialog filterbar. This sample shows a ValueHelpDialog with a filterbar ValueHelpDialog with a input suggestions A ValueHelpDialog with input suggestions. This sample shows a ValueHelpDialog with a suggestions for the input ValueHelpDialog basic sample ValueHelpDialog single select sample ValueHelpDialog with a conditions tab only ValueHelpDialog with a single condition tab ValueHelpDialog with a filterbar ValueHelpDialog with a input suggestions",
        "sampleCount": 6,
        "key": "#/entity/sap.ui.comp.valuehelpdialog.ValueHelpDialog"
      },
      {
        "id": "sap.ui.export.Spreadsheet",
        "name": "Spreadsheet",
        "category": "Utility",
        "since": "1.50",
        "samples": [
          {
            "id": "sap.ui.export.sample.table",
            "name": "Table Export",
            "description": "Spreadsheet export on sap.m.Table",
            "entityId": "sap.ui.export.Spreadsheet",
            "contexts": {
              "sap.ui.export.Spreadsheet": {
                "nextSampleId": "sap.ui.export.sample.formatting"
              }
            },
            "key": "#/sample/sap.ui.export.sample.table/preview"
          },
          {
            "id": "sap.ui.export.sample.formatting",
            "name": "Column Formatting",
            "description": "Spreadsheet export on sap.m.Table with extended formatting",
            "entityId": "sap.ui.export.Spreadsheet",
            "contexts": {
              "sap.ui.export.Spreadsheet": {
                "previousSampleId": "sap.ui.export.sample.table",
                "nextSampleId": "sap.ui.export.sample.json"
              }
            },
            "key": "#/sample/sap.ui.export.sample.formatting/preview"
          },
          {
            "id": "sap.ui.export.sample.json",
            "name": "Export JSON array",
            "description": "Spreadsheet export from a JSON array",
            "entityId": "sap.ui.export.Spreadsheet",
            "contexts": {
              "sap.ui.export.Spreadsheet": {
                "previousSampleId": "sap.ui.export.sample.formatting"
              }
            },
            "key": "#/sample/sap.ui.export.sample.json/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.export",
        "library": "sap.ui.export",
        "searchTags": "Spreadsheet Spreadsheet Utility Table Export Spreadsheet export on sap.m.Table Column Formatting Spreadsheet export on sap.m.Table with extended formatting Export JSON array Spreadsheet export from a JSON array Table Export Column Formatting Export JSON array",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.export.Spreadsheet"
      },
      {
        "id": "sap.ui.integration.widgets.Card",
        "name": "Integration Card",
        "category": "Display",
        "since": "1.62",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.integration.sample.CardExplorer",
            "name": "Card Explorer",
            "description": "Card Explorer is the application where you can learn more about integration cards.",
            "entityId": "sap.ui.integration.widgets.Card",
            "contexts": {
              "sap.ui.integration.widgets.Card": {
                "nextSampleId": "sap.ui.integration.sample.CardsLayout"
              }
            },
            "key": "#/sample/sap.ui.integration.sample.CardExplorer/preview"
          },
          {
            "id": "sap.ui.integration.sample.CardsLayout",
            "name": "Home page with cards",
            "description": "Different types of cards types arranged in a sap.f.GridContainer.",
            "entityId": "sap.ui.integration.widgets.Card",
            "contexts": {
              "sap.ui.integration.widgets.Card": {
                "previousSampleId": "sap.ui.integration.sample.CardExplorer"
              }
            },
            "key": "#/sample/sap.ui.integration.sample.CardsLayout/preview"
          }
        ],
        "namespace": "sap.ui.integration.widgets",
        "library": "sap.ui.integration",
        "searchTags": "Integration Card IntegrationCard Display Card Explorer Card Explorer is the application where you can learn more about integration cards. Home page with cards Different types of cards types arranged in a sap.f.GridContainer. Card Explorer Home page with cards",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.integration.widgets.Card"
      },
      {
        "id": "sap.ui.layout.DynamicSideContent",
        "name": "Dynamic Side Content",
        "category": "Layout",
        "since": "1.30",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.layout.sample.DynamicSideContent",
            "name": "Dynamic Side Content",
            "description": "Attaches side content area which is next to the main content of the page on larger screens taking different ratios between the two on different screen sizes and on phone size screens the side content area falls down under the main content area. Best viewed in full screen.",
            "entityId": "sap.ui.layout.DynamicSideContent",
            "contexts": {
              "sap.ui.layout.DynamicSideContent": {
                "nextSampleId": "sap.ui.layout.sample.DynamicSideContentEqualSplit"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.DynamicSideContent/preview"
          },
          {
            "id": "sap.ui.layout.sample.DynamicSideContentEqualSplit",
            "name": "Dynamic Side Content - equal split mode",
            "description": "The side content and the main content take 50%/50% of the container on all screen sizes except on phone screens where there is a button implemented to toggle between each other.",
            "entityId": "sap.ui.layout.DynamicSideContent",
            "contexts": {
              "sap.ui.layout.DynamicSideContent": {
                "previousSampleId": "sap.ui.layout.sample.DynamicSideContent",
                "nextSampleId": "sap.ui.layout.sample.DynamicSideContentProduct"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.DynamicSideContentEqualSplit/preview"
          },
          {
            "id": "sap.ui.layout.sample.DynamicSideContentProduct",
            "name": "Dynamic Side Content - product page",
            "description": "Product page with comments example.",
            "entityId": "sap.ui.layout.DynamicSideContent",
            "contexts": {
              "sap.ui.layout.DynamicSideContent": {
                "previousSampleId": "sap.ui.layout.sample.DynamicSideContentEqualSplit",
                "nextSampleId": "sap.ui.layout.sample.DynamicSideContentPosition"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.DynamicSideContentProduct/preview"
          },
          {
            "id": "sap.ui.layout.sample.DynamicSideContentPosition",
            "name": "Dynamic Side Content - position",
            "description": "The side content is positioned on the left side of the main content in left-to-right mode and on the right side of the main content in right-to-left mode.",
            "entityId": "sap.ui.layout.DynamicSideContent",
            "contexts": {
              "sap.ui.layout.DynamicSideContent": {
                "previousSampleId": "sap.ui.layout.sample.DynamicSideContentProduct"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.DynamicSideContentPosition/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Dynamic Side Content DynamicSideContent Layout Dynamic Side Content Attaches side content area which is next to the main content of the page on larger screens taking different ratios between the two on different screen sizes and on phone size screens the side content area falls down under the main content area. Best viewed in full screen. Dynamic Side Content - equal split mode The side content and the main content take 50%/50% of the container on all screen sizes except on phone screens where there is a button implemented to toggle between each other. Dynamic Side Content - product page Product page with comments example. Dynamic Side Content - position The side content is positioned on the left side of the main content in left-to-right mode and on the right side of the main content in right-to-left mode. Dynamic Side Content Dynamic Side Content - equal split mode Dynamic Side Content - product page Dynamic Side Content - position",
        "sampleCount": 4,
        "key": "#/entity/sap.ui.layout.DynamicSideContent"
      },
      {
        "id": "sap.ui.layout.form.Form",
        "name": "Form",
        "category": "Layout",
        "since": "1.10",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.ui.layout.sample.Form354",
            "name": "Fullscreen – one group",
            "description": "Form with one single group in a fullscreen app with a label field ratio of 3:5:4 in all sizes besides size S (12:12:0).",
            "entityId": "sap.m.Label",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "nextSampleId": "sap.ui.layout.sample.Form354wide"
              },
              "sap.m.Label": {
                "previousSampleId": "sap.m.sample.LabelProperties"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form354/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form354wide",
            "name": "Fullscreen – one group with long labels ",
            "description": "Form with one single group in a fullscreen app for long labels and fields, so some more space is available on medium screens (4:7:0). To avoid heavily stretched forms on extra large screens, the form gets a two-column layout in this size (4:7:0).",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form354",
                "nextSampleId": "sap.ui.layout.sample.Form354wideDual"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form354wide/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form354wideDual",
            "name": "Fullscreen – two groups (horizontal)",
            "description": "Form with two groups with long labels and fields in a fullscreen app.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form354wide",
                "nextSampleId": "sap.ui.layout.sample.Form471"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form354wideDual/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form471",
            "name": "Splitscreen – one group",
            "description": "Form with one single group in a split app with a label field ratio of 4:7:1 in all sizes besides size S (12:12:0).",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form354wideDual",
                "nextSampleId": "sap.ui.layout.sample.Form480_12120"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form471/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form480_12120",
            "name": "Fullscreen – two groups (vertical)",
            "description": "Form with two groups. On large screens a two-column layout (4:8:0) is used; on medium screens a one-column layout (12:12:0); on small screens also a one-column layout (12:12:0). In the second form an empty column is displayed next to the group to be aligned with the first form.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form471",
                "nextSampleId": "sap.ui.layout.sample.Form480_12120Dual"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form480_12120/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form480_12120Dual",
            "name": "Fullscreen – two columns of size M",
            "description": "Form with two groups, gets a two-column layout whenever possible.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form480_12120",
                "nextSampleId": "sap.ui.layout.sample.Form480_Trial"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form480_12120Dual/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form480_Trial",
            "name": "Fullscreen – three groups (horizontal)",
            "description": "Form with three groups in a three-column layout. On extra large screens a three-column layout (4:8:0) is used; on large and medium screens a two-column layout (4:8:0); on small screens a one-column layout (12:12:0).",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form480_12120Dual",
                "nextSampleId": "sap.ui.layout.sample.FormToolbar"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form480_Trial/preview"
          },
          {
            "id": "sap.ui.layout.sample.FormToolbar",
            "name": "Fullscreen – with toolbar",
            "description": "A form that uses <code>Toolbar</code>s as <code>Form</code> header and <code>FormContainer</code> headers.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form480_Trial",
                "nextSampleId": "sap.ui.layout.sample.Form_Column_oneGroup"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.FormToolbar/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form_Column_oneGroup",
            "name": "Fullscreen – one group using ColumnLayout",
            "description": "Form with one single group in a fullscreen app using the <code>ColumnLayout</code> control  with default settings as layout.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.FormToolbar",
                "nextSampleId": "sap.ui.layout.sample.Form_Column_oneGroup234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form_Column_oneGroup/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form_Column_oneGroup234",
            "name": "Fullscreen – one group using ColumnLayout with up to 4 columns",
            "description": "Form with one large single group in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form_Column_oneGroup",
                "nextSampleId": "sap.ui.layout.sample.Form_Column_twoGroups234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form_Column_oneGroup234/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form_Column_twoGroups234",
            "name": "Fullscreen – two groups using ColumnLayout with up to 4 columns",
            "description": "Form with two groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form_Column_oneGroup234",
                "nextSampleId": "sap.ui.layout.sample.Form_Column_threeGroups234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form_Column_twoGroups234/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form_Column_threeGroups234",
            "name": "Fullscreen – three groups using ColumnLayout with up to 4 columns",
            "description": "Form with three groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively.",
            "entityId": "sap.ui.layout.form.Form",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "previousSampleId": "sap.ui.layout.sample.Form_Column_twoGroups234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form_Column_threeGroups234/preview"
          }
        ],
        "namespace": "sap.ui.layout.form",
        "library": "sap.ui.layout",
        "searchTags": "Form Form Layout Fullscreen – one group Form with one single group in a fullscreen app with a label field ratio of 3:5:4 in all sizes besides size S (12:12:0). Fullscreen – one group with long labels  Form with one single group in a fullscreen app for long labels and fields, so some more space is available on medium screens (4:7:0). To avoid heavily stretched forms on extra large screens, the form gets a two-column layout in this size (4:7:0). Fullscreen – two groups (horizontal) Form with two groups with long labels and fields in a fullscreen app. Splitscreen – one group Form with one single group in a split app with a label field ratio of 4:7:1 in all sizes besides size S (12:12:0). Fullscreen – two groups (vertical) Form with two groups. On large screens a two-column layout (4:8:0) is used; on medium screens a one-column layout (12:12:0); on small screens also a one-column layout (12:12:0). In the second form an empty column is displayed next to the group to be aligned with the first form. Fullscreen – two columns of size M Form with two groups, gets a two-column layout whenever possible. Fullscreen – three groups (horizontal) Form with three groups in a three-column layout. On extra large screens a three-column layout (4:8:0) is used; on large and medium screens a two-column layout (4:8:0); on small screens a one-column layout (12:12:0). Fullscreen – with toolbar A form that uses <code>Toolbar</code>s as <code>Form</code> header and <code>FormContainer</code> headers. Fullscreen – one group using ColumnLayout Form with one single group in a fullscreen app using the <code>ColumnLayout</code> control  with default settings as layout. Fullscreen – one group using ColumnLayout with up to 4 columns Form with one large single group in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively. Fullscreen – two groups using ColumnLayout with up to 4 columns Form with two groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively. Fullscreen – three groups using ColumnLayout with up to 4 columns Form with three groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively. Fullscreen – one group Fullscreen – one group with long labels  Fullscreen – two groups (horizontal) Splitscreen – one group Fullscreen – two groups (vertical) Fullscreen – two columns of size M Fullscreen – three groups (horizontal) Fullscreen – with toolbar Fullscreen – one group using ColumnLayout Fullscreen – one group using ColumnLayout with up to 4 columns Fullscreen – two groups using ColumnLayout with up to 4 columns Fullscreen – three groups using ColumnLayout with up to 4 columns",
        "sampleCount": 12,
        "key": "#/entity/sap.ui.layout.form.Form"
      },
      {
        "id": "sap.ui.layout.form.SimpleForm",
        "name": "Simple Form",
        "category": "Layout",
        "since": "1.12",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.ui.layout.sample.SimpleForm354",
            "name": "Fullscreen – one group",
            "description": "Form with one single group in a fullscreen app with a label field ratio of 3:5:4 in all sizes besides size S (12:12:0).",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "nextSampleId": "sap.ui.layout.sample.SimpleForm354wide"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm354/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm354wide",
            "name": "Fullscreen – one group with long labels ",
            "description": "Form with one single group in a fullscreen app for long labels and fields, so some more space is available on medium screens (4:7:0). To avoid heavily stretched forms on extra large screens, the form gets a two-column layout in this size (4:7:0).",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm354",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm354wideDual"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm354wide/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm354wideDual",
            "name": "Fullscreen – two groups (horizontal)",
            "description": "Form with two groups with long labels and fields in a fullscreen app.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm354wide",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm471"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm354wideDual/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm471",
            "name": "Splitscreen – one group",
            "description": "Form with one single group in a split app with a label field ratio of 4:7:1 in all sizes besides size S (12:12:0).",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm354wideDual",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm480_12120"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm471/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm480_12120",
            "name": "Fullscreen – two groups (vertical)",
            "description": "Form with two groups. On large screens a two-column layout (4:8:0) is used; on medium screens a one-column layout (12:12:0); on small screens also a one-column layout (12:12:0). In the second form an empty column is displayed next to the group to be aligned with the first form.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm471",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm480_12120Dual"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm480_12120/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm480_12120Dual",
            "name": "Fullscreen – two columns of size M",
            "description": "Form with two groups, gets a two-column layout whenever possible.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm480_12120",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm480_Trial"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm480_12120Dual/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm480_Trial",
            "name": "Fullscreen – three groups (horizontal)",
            "description": "Form with three groups in a three-column layout. On extra large screens a three-column layout (4:8:0) is used; on large and medium screens a two-column layout (4:8:0); on small screens a one-column layout (12:12:0).",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm480_12120Dual",
                "nextSampleId": "sap.ui.layout.sample.SimpleFormToolbar"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm480_Trial/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleFormToolbar",
            "name": "Fullscreen – with toolbar",
            "description": "A <code>SimpleForm</code> that uses <code>Toolbar</code>s as <code>Form</code> header and <code>FormContainer</code> headers.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm480_Trial",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm_Column_oneGroup"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleFormToolbar/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm_Column_oneGroup",
            "name": "Fullscreen – one group using ColumnLayout",
            "description": "Form with one single group in a fullscreen app using the <code>ColumnLayout</code> control  with default settings as layout.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleFormToolbar",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm_Column_oneGroup234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm_Column_oneGroup/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm_Column_oneGroup234",
            "name": "Fullscreen – one group using ColumnLayout with up to 4 columns",
            "description": "Form with one large single group in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm_Column_oneGroup",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm_Column_twoGroups234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm_Column_oneGroup234/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm_Column_twoGroups234",
            "name": "Fullscreen – two groups using ColumnLayout with up to 4 columns",
            "description": "Form with two groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm_Column_oneGroup234",
                "nextSampleId": "sap.ui.layout.sample.SimpleForm_Column_threeGroups234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm_Column_twoGroups234/preview"
          },
          {
            "id": "sap.ui.layout.sample.SimpleForm_Column_threeGroups234",
            "name": "Fullscreen – three groups using ColumnLayout with up to 4 columns",
            "description": "Form with three groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively.",
            "entityId": "sap.ui.layout.form.SimpleForm",
            "contexts": {
              "sap.ui.layout.form.SimpleForm": {
                "previousSampleId": "sap.ui.layout.sample.SimpleForm_Column_twoGroups234"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SimpleForm_Column_threeGroups234/preview"
          }
        ],
        "namespace": "sap.ui.layout.form",
        "library": "sap.ui.layout",
        "searchTags": "Simple Form SimpleForm Layout Fullscreen – one group Form with one single group in a fullscreen app with a label field ratio of 3:5:4 in all sizes besides size S (12:12:0). Fullscreen – one group with long labels  Form with one single group in a fullscreen app for long labels and fields, so some more space is available on medium screens (4:7:0). To avoid heavily stretched forms on extra large screens, the form gets a two-column layout in this size (4:7:0). Fullscreen – two groups (horizontal) Form with two groups with long labels and fields in a fullscreen app. Splitscreen – one group Form with one single group in a split app with a label field ratio of 4:7:1 in all sizes besides size S (12:12:0). Fullscreen – two groups (vertical) Form with two groups. On large screens a two-column layout (4:8:0) is used; on medium screens a one-column layout (12:12:0); on small screens also a one-column layout (12:12:0). In the second form an empty column is displayed next to the group to be aligned with the first form. Fullscreen – two columns of size M Form with two groups, gets a two-column layout whenever possible. Fullscreen – three groups (horizontal) Form with three groups in a three-column layout. On extra large screens a three-column layout (4:8:0) is used; on large and medium screens a two-column layout (4:8:0); on small screens a one-column layout (12:12:0). Fullscreen – with toolbar A <code>SimpleForm</code> that uses <code>Toolbar</code>s as <code>Form</code> header and <code>FormContainer</code> headers. Fullscreen – one group using ColumnLayout Form with one single group in a fullscreen app using the <code>ColumnLayout</code> control  with default settings as layout. Fullscreen – one group using ColumnLayout with up to 4 columns Form with one large single group in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively. Fullscreen – two groups using ColumnLayout with up to 4 columns Form with two groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively. Fullscreen – three groups using ColumnLayout with up to 4 columns Form with three groups in a fullscreen app using the <code>ColumnLayout</code> control as layout. 2 columns in medium size, 3 columns in large size and 4 columns in extra-large size are used respectively. Fullscreen – one group Fullscreen – one group with long labels  Fullscreen – two groups (horizontal) Splitscreen – one group Fullscreen – two groups (vertical) Fullscreen – two columns of size M Fullscreen – three groups (horizontal) Fullscreen – with toolbar Fullscreen – one group using ColumnLayout Fullscreen – one group using ColumnLayout with up to 4 columns Fullscreen – two groups using ColumnLayout with up to 4 columns Fullscreen – three groups using ColumnLayout with up to 4 columns",
        "sampleCount": 12,
        "key": "#/entity/sap.ui.layout.form.SimpleForm"
      },
      {
        "id": "sap.ui.layout.FixFlex",
        "name": "Fix Flex",
        "category": "Layout",
        "since": "1.26",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.layout.sample.FixFlexVertical",
            "name": "Fix Flex - Vertical Direction",
            "description": "Shows a FixFlex control with a vertical layout.",
            "entityId": "sap.ui.layout.FixFlex",
            "contexts": {
              "sap.ui.layout.FixFlex": {
                "nextSampleId": "sap.ui.layout.sample.FixFlexHorizontal"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.FixFlexVertical/preview"
          },
          {
            "id": "sap.ui.layout.sample.FixFlexHorizontal",
            "name": "Fix Flex - Horizontal Direction",
            "description": "Shows a FixFlex control with a horizontal layout.",
            "entityId": "sap.ui.layout.FixFlex",
            "contexts": {
              "sap.ui.layout.FixFlex": {
                "previousSampleId": "sap.ui.layout.sample.FixFlexVertical",
                "nextSampleId": "sap.ui.layout.sample.FixFlexFixedSize"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.FixFlexHorizontal/preview"
          },
          {
            "id": "sap.ui.layout.sample.FixFlexFixedSize",
            "name": "Fix Flex - Fix container size",
            "description": "Shows a FixFlex control where fixContentSize is set to a specific value(200px) and sap.m.scrollContainer is enabling vertical scrolling.",
            "entityId": "sap.ui.layout.FixFlex",
            "contexts": {
              "sap.ui.layout.FixFlex": {
                "previousSampleId": "sap.ui.layout.sample.FixFlexHorizontal",
                "nextSampleId": "sap.ui.layout.sample.FixFlexMinFlexSize"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.FixFlexFixedSize/preview"
          },
          {
            "id": "sap.ui.layout.sample.FixFlexMinFlexSize",
            "name": "Fix Flex - Vertical Direction with minFlexSize",
            "description": "Shows a FixFlex control where the minFlexSize is set to 400px.",
            "entityId": "sap.ui.layout.FixFlex",
            "contexts": {
              "sap.ui.layout.FixFlex": {
                "previousSampleId": "sap.ui.layout.sample.FixFlexFixedSize"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.FixFlexMinFlexSize/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Fix Flex FixFlex Layout Fix Flex - Vertical Direction Shows a FixFlex control with a vertical layout. Fix Flex - Horizontal Direction Shows a FixFlex control with a horizontal layout. Fix Flex - Fix container size Shows a FixFlex control where fixContentSize is set to a specific value(200px) and sap.m.scrollContainer is enabling vertical scrolling. Fix Flex - Vertical Direction with minFlexSize Shows a FixFlex control where the minFlexSize is set to 400px. Fix Flex - Vertical Direction Fix Flex - Horizontal Direction Fix Flex - Fix container size Fix Flex - Vertical Direction with minFlexSize",
        "sampleCount": 4,
        "key": "#/entity/sap.ui.layout.FixFlex"
      },
      {
        "id": "sap.ui.layout.Grid",
        "name": "Grid",
        "category": "Layout",
        "since": "1.12",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.layout.sample.GridProperties",
            "name": "Grid - Own properties",
            "description": "You can see how the different properties of the sap.ui.layout.Grid affect it's final appearance.",
            "entityId": "sap.ui.layout.Grid",
            "contexts": {
              "sap.ui.layout.Grid": {
                "nextSampleId": "sap.ui.layout.sample.GridData"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridProperties/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridData",
            "name": "Grid - Using GridData",
            "description": "Take advantage of sap.ui.layout.GridData to control the appearance of individual Grid children.",
            "entityId": "sap.ui.layout.Grid",
            "contexts": {
              "sap.ui.layout.Grid": {
                "previousSampleId": "sap.ui.layout.sample.GridProperties",
                "nextSampleId": "sap.ui.layout.sample.GridInfo"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridData/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridInfo",
            "name": "Grid - Info Layout",
            "description": "You can use the Grid control to make responsive table-free layouts; here we are using a default indent and span, and specifying the Small settings such that the image and text will stack on a small display.",
            "entityId": "sap.ui.layout.Grid",
            "contexts": {
              "sap.ui.layout.Grid": {
                "previousSampleId": "sap.ui.layout.sample.GridData",
                "nextSampleId": "sap.ui.layout.sample.GridXL"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridInfo/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridXL",
            "name": "Grid - Features Demo",
            "description": "The major layout features of the Grid control are shown in this example. Features like indentation, making content visible/invisible based on the screen size, moving content forward and backwards are demonstrated.",
            "entityId": "sap.ui.layout.Grid",
            "contexts": {
              "sap.ui.layout.Grid": {
                "previousSampleId": "sap.ui.layout.sample.GridInfo"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridXL/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Grid Grid Layout Grid - Own properties You can see how the different properties of the sap.ui.layout.Grid affect it's final appearance. Grid - Using GridData Take advantage of sap.ui.layout.GridData to control the appearance of individual Grid children. Grid - Info Layout You can use the Grid control to make responsive table-free layouts; here we are using a default indent and span, and specifying the Small settings such that the image and text will stack on a small display. Grid - Features Demo The major layout features of the Grid control are shown in this example. Features like indentation, making content visible/invisible based on the screen size, moving content forward and backwards are demonstrated. Grid - Own properties Grid - Using GridData Grid - Info Layout Grid - Features Demo",
        "sampleCount": 4,
        "key": "#/entity/sap.ui.layout.Grid"
      },
      {
        "id": "sap.ui.layout.HorizontalLayout",
        "name": "Horizontal Layout",
        "category": "Layout",
        "since": "1.10",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.layout.sample.HorizontalLayout",
            "name": "Horizontal Layout",
            "description": "The Horizontal Layout control is a simple way to align multiple controls horizontally. By default the contained controls are not wrapped. If you want more sophisticated layout options, consider Grid or Flex Box based layouts.",
            "entityId": "sap.ui.layout.HorizontalLayout",
            "contexts": {
              "sap.ui.layout.HorizontalLayout": {}
            },
            "key": "#/sample/sap.ui.layout.sample.HorizontalLayout/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Horizontal Layout HorizontalLayout Layout Horizontal Layout The Horizontal Layout control is a simple way to align multiple controls horizontally. By default the contained controls are not wrapped. If you want more sophisticated layout options, consider Grid or Flex Box based layouts. Horizontal Layout",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.layout.HorizontalLayout"
      },
      {
        "id": "sap.ui.layout.VerticalLayout",
        "name": "Vertical Layout",
        "category": "Layout",
        "formFactors": "Independent",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.ui.layout.sample.VerticalLayout",
            "name": "Vertical Layout",
            "description": "The Vertical Layout control is a simple way to align multiple controls vertically. If you want more sophisticated layout options, consider Grid or Flex Box based layouts.",
            "entityId": "sap.ui.layout.VerticalLayout",
            "contexts": {
              "sap.ui.layout.VerticalLayout": {}
            },
            "key": "#/sample/sap.ui.layout.sample.VerticalLayout/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Vertical Layout VerticalLayout Layout Vertical Layout The Vertical Layout control is a simple way to align multiple controls vertically. If you want more sophisticated layout options, consider Grid or Flex Box based layouts. Vertical Layout",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.layout.VerticalLayout"
      },
      {
        "id": "sap.ui.layout.Splitter",
        "name": "Splitter Layout",
        "category": "Layout",
        "formFactors": "Independent",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.layout.sample.Splitter",
            "name": "Splitter Layout",
            "description": "Splitter where you can change contentAreas and their sizes live",
            "entityId": "sap.ui.layout.Splitter",
            "contexts": {
              "sap.ui.layout.Splitter": {
                "nextSampleId": "sap.ui.layout.sample.Splitter2"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Splitter/preview"
          },
          {
            "id": "sap.ui.layout.sample.Splitter2",
            "name": "Splitter Layout - 2 areas",
            "description": "Simple splitter example with two content areas",
            "entityId": "sap.ui.layout.Splitter",
            "contexts": {
              "sap.ui.layout.Splitter": {
                "previousSampleId": "sap.ui.layout.sample.Splitter",
                "nextSampleId": "sap.ui.layout.sample.Splitter3"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Splitter2/preview"
          },
          {
            "id": "sap.ui.layout.sample.Splitter3",
            "name": "Splitter Layout - 2 non-resizable areas",
            "description": "Simple splitter example with two content areas that cannot be resized",
            "entityId": "sap.ui.layout.Splitter",
            "contexts": {
              "sap.ui.layout.Splitter": {
                "previousSampleId": "sap.ui.layout.sample.Splitter2",
                "nextSampleId": "sap.ui.layout.sample.Splitter4"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Splitter3/preview"
          },
          {
            "id": "sap.ui.layout.sample.Splitter4",
            "name": "Splitter Layout - 3 areas",
            "description": "Simple splitter example with three content areas",
            "entityId": "sap.ui.layout.Splitter",
            "contexts": {
              "sap.ui.layout.Splitter": {
                "previousSampleId": "sap.ui.layout.sample.Splitter3",
                "nextSampleId": "sap.ui.layout.sample.SplitterNested1"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Splitter4/preview"
          },
          {
            "id": "sap.ui.layout.sample.SplitterNested1",
            "name": "Nested Splitter Layouts - 7 Areas",
            "description": "Nested Splitter example with 7 content areas",
            "entityId": "sap.ui.layout.Splitter",
            "contexts": {
              "sap.ui.layout.Splitter": {
                "previousSampleId": "sap.ui.layout.sample.Splitter4"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.SplitterNested1/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Splitter Layout SplitterLayout Layout Splitter Layout Splitter where you can change contentAreas and their sizes live Splitter Layout - 2 areas Simple splitter example with two content areas Splitter Layout - 2 non-resizable areas Simple splitter example with two content areas that cannot be resized Splitter Layout - 3 areas Simple splitter example with three content areas Nested Splitter Layouts - 7 Areas Nested Splitter example with 7 content areas Splitter Layout Splitter Layout - 2 areas Splitter Layout - 2 non-resizable areas Splitter Layout - 3 areas Nested Splitter Layouts - 7 Areas",
        "sampleCount": 5,
        "key": "#/entity/sap.ui.layout.Splitter"
      },
      {
        "id": "sap.ui.layout.BlockLayout",
        "name": "Block Layout ",
        "category": "Layout",
        "since": "1.34",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.layout.sample.BlockLayoutDefault",
            "name": "Block Layout",
            "description": "The BlockLayout is intended to be used with rows and cells. The cells have predefined width, the rows have predefined rendering modes - scrollable/vertical/horizontal.",
            "entityId": "sap.ui.layout.BlockLayout",
            "contexts": {
              "sap.ui.layout.BlockLayout": {
                "nextSampleId": "sap.ui.layout.sample.BlockLayoutCustomBackground"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.BlockLayoutDefault/preview"
          },
          {
            "id": "sap.ui.layout.sample.BlockLayoutCustomBackground",
            "name": "Block Layout with custom background for the cells",
            "description": "The BlockLayout could be used with different backgrounds for its cells.",
            "entityId": "sap.ui.layout.BlockLayout",
            "contexts": {
              "sap.ui.layout.BlockLayout": {
                "previousSampleId": "sap.ui.layout.sample.BlockLayoutDefault",
                "nextSampleId": "sap.ui.layout.sample.BlockLayoutLinkTitle"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.BlockLayoutCustomBackground/preview"
          },
          {
            "id": "sap.ui.layout.sample.BlockLayoutLinkTitle",
            "name": "Block Layout with links as titles",
            "description": "The BlockLayout Cells can have links as titles. The link text overwrites the title text.",
            "entityId": "sap.ui.layout.BlockLayout",
            "contexts": {
              "sap.ui.layout.BlockLayout": {
                "previousSampleId": "sap.ui.layout.sample.BlockLayoutCustomBackground"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.BlockLayoutLinkTitle/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Block Layout  BlockLayout Layout Block Layout The BlockLayout is intended to be used with rows and cells. The cells have predefined width, the rows have predefined rendering modes - scrollable/vertical/horizontal. Block Layout with custom background for the cells The BlockLayout could be used with different backgrounds for its cells. Block Layout with links as titles The BlockLayout Cells can have links as titles. The link text overwrites the title text. Block Layout Block Layout with custom background for the cells Block Layout with links as titles",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.layout.BlockLayout"
      },
      {
        "id": "sap.ui.layout.ResponsiveSplitter",
        "name": "Responsive Splitter ",
        "category": "Layout",
        "since": "1.38",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.layout.sample.ResponsiveSplitter",
            "name": "Responsive Splitter",
            "description": "ResponsiveSplitter is used to visually divide the content of its parent. It consists of PaneContainers that further  agregate other PaneContainers and SplitPanes. SplitPanes can be moved to the pagination when a minimum width of their parent is reached.",
            "entityId": "sap.ui.layout.ResponsiveSplitter",
            "contexts": {
              "sap.ui.layout.ResponsiveSplitter": {}
            },
            "key": "#/sample/sap.ui.layout.sample.ResponsiveSplitter/preview"
          }
        ],
        "namespace": "sap.ui.layout",
        "library": "sap.ui.layout",
        "searchTags": "Responsive Splitter  ResponsiveSplitter Layout Responsive Splitter ResponsiveSplitter is used to visually divide the content of its parent. It consists of PaneContainers that further  agregate other PaneContainers and SplitPanes. SplitPanes can be moved to the pagination when a minimum width of their parent is reached. Responsive Splitter",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.layout.ResponsiveSplitter"
      },
      {
        "id": "sap.ui.layout.cssgrid.CSSGrid",
        "name": "CSSGrid",
        "category": "Layout",
        "since": "1.60",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.ui.layout.sample.CSSGrid",
            "name": "CSSGrid",
            "description": "CSSGrid example for page layout.",
            "entityId": "sap.ui.layout.cssgrid.CSSGrid",
            "contexts": {
              "sap.ui.layout.cssgrid.CSSGrid": {
                "nextSampleId": "sap.ui.layout.sample.NestedGrids"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.CSSGrid/preview"
          },
          {
            "id": "sap.ui.layout.sample.NestedGrids",
            "name": "Nested Example",
            "description": "CSSGrid example nested grids.",
            "entityId": "sap.ui.layout.cssgrid.CSSGrid",
            "contexts": {
              "sap.ui.layout.cssgrid.CSSGrid": {
                "previousSampleId": "sap.ui.layout.sample.CSSGrid",
                "nextSampleId": "sap.ui.layout.sample.GridAutoFlow"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.NestedGrids/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridAutoFlow",
            "name": "Controlling Empty Spaces Within the Grid",
            "description": "Example of setting the gridAutoFlow property.",
            "entityId": "sap.ui.layout.cssgrid.CSSGrid",
            "contexts": {
              "sap.ui.layout.cssgrid.CSSGrid": {
                "previousSampleId": "sap.ui.layout.sample.NestedGrids",
                "nextSampleId": "sap.ui.layout.sample.GridGap"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridAutoFlow/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridGap",
            "name": "Grid Gap and Layout Data",
            "description": "Example of setting the gridGap property and using of Layout Data.",
            "entityId": "sap.ui.layout.cssgrid.CSSGrid",
            "contexts": {
              "sap.ui.layout.cssgrid.CSSGrid": {
                "previousSampleId": "sap.ui.layout.sample.GridAutoFlow",
                "nextSampleId": "sap.ui.layout.sample.GridTemplateRows"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridGap/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridTemplateRows",
            "name": "Configuring Rows and Columns",
            "description": "Example of setting gridTemplateRows and gridTemplateColumns properties.",
            "entityId": "sap.ui.layout.cssgrid.CSSGrid",
            "contexts": {
              "sap.ui.layout.cssgrid.CSSGrid": {
                "previousSampleId": "sap.ui.layout.sample.GridGap",
                "nextSampleId": "sap.ui.layout.sample.GridAutoRows"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridTemplateRows/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridAutoRows",
            "name": "Automatic Sizing for Additional Rows and Columns",
            "description": "Example of setting gridAutoRows and gridAutoColumns properties.",
            "entityId": "sap.ui.layout.cssgrid.CSSGrid",
            "contexts": {
              "sap.ui.layout.cssgrid.CSSGrid": {
                "previousSampleId": "sap.ui.layout.sample.GridTemplateRows",
                "nextSampleId": "sap.ui.layout.sample.GridResponsiveness"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridAutoRows/preview"
          },
          {
            "id": "sap.ui.layout.sample.GridResponsiveness",
            "name": "Responsiveness",
            "description": "Example of setting customLayout for different layout (screen) sizes.",
            "entityId": "sap.ui.layout.cssgrid.CSSGrid",
            "contexts": {
              "sap.ui.layout.cssgrid.CSSGrid": {
                "previousSampleId": "sap.ui.layout.sample.GridAutoRows"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.GridResponsiveness/preview"
          }
        ],
        "namespace": "sap.ui.layout.cssgrid",
        "library": "sap.ui.layout",
        "searchTags": "CSSGrid CSSGrid Layout CSSGrid CSSGrid example for page layout. Nested Example CSSGrid example nested grids. Controlling Empty Spaces Within the Grid Example of setting the gridAutoFlow property. Grid Gap and Layout Data Example of setting the gridGap property and using of Layout Data. Configuring Rows and Columns Example of setting gridTemplateRows and gridTemplateColumns properties. Automatic Sizing for Additional Rows and Columns Example of setting gridAutoRows and gridAutoColumns properties. Responsiveness Example of setting customLayout for different layout (screen) sizes. CSSGrid Nested Example Controlling Empty Spaces Within the Grid Grid Gap and Layout Data Configuring Rows and Columns Automatic Sizing for Additional Rows and Columns Responsiveness",
        "sampleCount": 7,
        "key": "#/entity/sap.ui.layout.cssgrid.CSSGrid"
      },
      {
        "id": "sap.ui.richtexteditor.RichTextEditor",
        "name": "Rich Text Editor",
        "since": "1.28",
        "category": "User Input",
        "samples": [
          {
            "id": "sap.ui.richtexteditor.sample.RichTextEditor",
            "name": "RichTextEditor with a custom toolbar",
            "description": "A sample showing a RichTextEditor control with a SAP Fiori toolbar",
            "entityId": "sap.ui.richtexteditor.RichTextEditor",
            "contexts": {
              "sap.ui.richtexteditor.RichTextEditor": {}
            },
            "key": "#/sample/sap.ui.richtexteditor.sample.RichTextEditor/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.richtexteditor",
        "library": "sap.ui.richtexteditor",
        "searchTags": "Rich Text Editor RichTextEditor User Input RichTextEditor with a custom toolbar A sample showing a RichTextEditor control with a SAP Fiori toolbar RichTextEditor with a custom toolbar",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.richtexteditor.RichTextEditor"
      },
      {
        "id": "sap.ui.table.Table",
        "name": "Grid Table",
        "category": "List",
        "since": "1.0",
        "samples": [
          {
            "id": "sap.ui.table.sample.Basic",
            "name": "Basic",
            "description": "Basic example showing most controls which are intended to be used inside a table.",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "nextSampleId": "sap.ui.table.sample.Selection"
              }
            },
            "key": "#/sample/sap.ui.table.sample.Basic/preview"
          },
          {
            "id": "sap.ui.table.sample.Selection",
            "name": "Selection",
            "description": "Selection example showing selection modes and selection behaviors of table.",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.Basic",
                "nextSampleId": "sap.ui.table.sample.MultiSelectionPlugin"
              }
            },
            "key": "#/sample/sap.ui.table.sample.Selection/preview"
          },
          {
            "id": "sap.ui.table.sample.MultiSelectionPlugin",
            "name": "MultiSelectionPlugin",
            "description": "Example showing the behavior of MultiSelectionPlugin",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.Selection",
                "nextSampleId": "sap.ui.table.sample.Sorting"
              }
            },
            "key": "#/sample/sap.ui.table.sample.MultiSelectionPlugin/preview"
          },
          {
            "id": "sap.ui.table.sample.Sorting",
            "name": "Sorting",
            "description": "Example showing the different kinds of sorting capabilities",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.MultiSelectionPlugin",
                "nextSampleId": "sap.ui.table.sample.Filtering"
              }
            },
            "key": "#/sample/sap.ui.table.sample.Sorting/preview"
          },
          {
            "id": "sap.ui.table.sample.Filtering",
            "name": "Filtering",
            "description": "Example showing the different facets of filtering within a table",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.Sorting",
                "nextSampleId": "sap.ui.table.sample.Aggregations"
              }
            },
            "key": "#/sample/sap.ui.table.sample.Filtering/preview"
          },
          {
            "id": "sap.ui.table.sample.Aggregations",
            "name": "Aggregations",
            "description": "Example which shows the different aggregations of the table",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.Filtering",
                "nextSampleId": "sap.ui.table.sample.Menus"
              }
            },
            "key": "#/sample/sap.ui.table.sample.Aggregations/preview"
          },
          {
            "id": "sap.ui.table.sample.Menus",
            "name": "Table related Menus",
            "description": "Example which focuses the handling of the table related Menus",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.Aggregations",
                "nextSampleId": "sap.ui.table.sample.TableFreeze"
              }
            },
            "key": "#/sample/sap.ui.table.sample.Menus/preview"
          },
          {
            "id": "sap.ui.table.sample.TableFreeze",
            "name": "Table Freeze",
            "description": "Example which shows table freeze with fixed columns",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.Menus",
                "nextSampleId": "sap.ui.table.sample.Resizing"
              }
            },
            "key": "#/sample/sap.ui.table.sample.TableFreeze/preview"
          },
          {
            "id": "sap.ui.table.sample.Resizing",
            "name": "Resizing",
            "description": "Example for column resizing and the different row count modes",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.TableFreeze",
                "nextSampleId": "sap.ui.table.sample.MultiHeader"
              }
            },
            "key": "#/sample/sap.ui.table.sample.Resizing/preview"
          },
          {
            "id": "sap.ui.table.sample.MultiHeader",
            "name": "Multi Header",
            "description": "Example for multi-header of table",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.Resizing",
                "nextSampleId": "sap.ui.table.sample.OData"
              }
            },
            "key": "#/sample/sap.ui.table.sample.MultiHeader/preview"
          },
          {
            "id": "sap.ui.table.sample.OData",
            "name": "OData",
            "description": "OData related example",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.MultiHeader",
                "nextSampleId": "sap.ui.table.sample.OData2"
              }
            },
            "key": "#/sample/sap.ui.table.sample.OData/preview"
          },
          {
            "id": "sap.ui.table.sample.OData2",
            "name": "OData Metadata",
            "description": "Shows an example how an OData metadata driven table creation can look like.",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.OData",
                "nextSampleId": "sap.ui.table.sample.RowAction"
              }
            },
            "key": "#/sample/sap.ui.table.sample.OData2/preview"
          },
          {
            "id": "sap.ui.table.sample.RowAction",
            "name": "Row Actions",
            "description": "Shows how row actions can be used.",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.OData2",
                "nextSampleId": "sap.ui.table.sample.RowHighlights"
              }
            },
            "key": "#/sample/sap.ui.table.sample.RowAction/preview"
          },
          {
            "id": "sap.ui.table.sample.RowHighlights",
            "name": "Row Highlights",
            "description": "Shows how row highlights and alternating row colors can be used.",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.RowAction",
                "nextSampleId": "sap.ui.table.sample.DnD"
              }
            },
            "key": "#/sample/sap.ui.table.sample.RowHighlights/preview"
          },
          {
            "id": "sap.ui.table.sample.DnD",
            "name": "Drag and Drop",
            "description": "Shows the different kinds of drag-and-drop capabilities.",
            "entityId": "sap.ui.table.Table",
            "contexts": {
              "sap.ui.table.Table": {
                "previousSampleId": "sap.ui.table.sample.RowHighlights"
              }
            },
            "key": "#/sample/sap.ui.table.sample.DnD/preview"
          }
        ],
        "formFactors": "Condensed, Compact, Cozy",
        "namespace": "sap.ui.table",
        "library": "sap.ui.table",
        "searchTags": "Grid Table GridTable List Basic Basic example showing most controls which are intended to be used inside a table. Selection Selection example showing selection modes and selection behaviors of table. MultiSelectionPlugin Example showing the behavior of MultiSelectionPlugin Sorting Example showing the different kinds of sorting capabilities Filtering Example showing the different facets of filtering within a table Aggregations Example which shows the different aggregations of the table Table related Menus Example which focuses the handling of the table related Menus Table Freeze Example which shows table freeze with fixed columns Resizing Example for column resizing and the different row count modes Multi Header Example for multi-header of table OData OData related example OData Metadata Shows an example how an OData metadata driven table creation can look like. Row Actions Shows how row actions can be used. Row Highlights Shows how row highlights and alternating row colors can be used. Drag and Drop Shows the different kinds of drag-and-drop capabilities. Basic Selection MultiSelectionPlugin Sorting Filtering Aggregations Table related Menus Table Freeze Resizing Multi Header OData OData Metadata Row Actions Row Highlights Drag and Drop",
        "sampleCount": 15,
        "key": "#/entity/sap.ui.table.Table"
      },
      {
        "id": "sap.ui.table.TreeTable",
        "name": "Tree Table",
        "category": "List",
        "since": "1.36",
        "samples": [
          {
            "id": "sap.ui.table.sample.TreeTable.JSONTreeBinding",
            "name": "JSONTreeBinding",
            "description": "Basic example showing how a TreeTable can be build by using a JSONModel",
            "entityId": "sap.ui.table.TreeTable",
            "contexts": {
              "sap.ui.table.TreeTable": {
                "nextSampleId": "sap.ui.table.sample.TreeTable.BasicODataTreeBinding"
              }
            },
            "key": "#/sample/sap.ui.table.sample.TreeTable.JSONTreeBinding/preview"
          },
          {
            "id": "sap.ui.table.sample.TreeTable.BasicODataTreeBinding",
            "name": "Basic OData TreeBinding",
            "description": "Illustrates how to bind to data from an OData model without using $metadata annotations or navigation properties. Instead, treeAnnotationProperties is filled for the TreeBinding.",
            "entityId": "sap.ui.table.TreeTable",
            "contexts": {
              "sap.ui.table.TreeTable": {
                "previousSampleId": "sap.ui.table.sample.TreeTable.JSONTreeBinding",
                "nextSampleId": "sap.ui.table.sample.TreeTable.ODataAnnotationsTreeBinding"
              }
            },
            "key": "#/sample/sap.ui.table.sample.TreeTable.BasicODataTreeBinding/preview"
          },
          {
            "id": "sap.ui.table.sample.TreeTable.ODataAnnotationsTreeBinding",
            "name": "OData Annotations TreeBinding",
            "description": "Illustrates how to bind to data from an OData model using $metadata annotations.",
            "entityId": "sap.ui.table.TreeTable",
            "contexts": {
              "sap.ui.table.TreeTable": {
                "previousSampleId": "sap.ui.table.sample.TreeTable.BasicODataTreeBinding",
                "nextSampleId": "sap.ui.table.sample.TreeTable.HierarchyMaintenanceJSONTreeBinding"
              }
            },
            "key": "#/sample/sap.ui.table.sample.TreeTable.ODataAnnotationsTreeBinding/preview"
          },
          {
            "id": "sap.ui.table.sample.TreeTable.HierarchyMaintenanceJSONTreeBinding",
            "name": "Hierarchy Maintenance with a JSONModel",
            "description": "Shows how hierarchy maintenance can be done using drag and drop.",
            "entityId": "sap.ui.table.TreeTable",
            "contexts": {
              "sap.ui.table.TreeTable": {
                "previousSampleId": "sap.ui.table.sample.TreeTable.ODataAnnotationsTreeBinding"
              }
            },
            "key": "#/sample/sap.ui.table.sample.TreeTable.HierarchyMaintenanceJSONTreeBinding/preview"
          }
        ],
        "formFactors": "Condensed, Compact, Cozy",
        "namespace": "sap.ui.table",
        "library": "sap.ui.table",
        "searchTags": "Tree Table TreeTable List JSONTreeBinding Basic example showing how a TreeTable can be build by using a JSONModel Basic OData TreeBinding Illustrates how to bind to data from an OData model without using $metadata annotations or navigation properties. Instead, treeAnnotationProperties is filled for the TreeBinding. OData Annotations TreeBinding Illustrates how to bind to data from an OData model using $metadata annotations. Hierarchy Maintenance with a JSONModel Shows how hierarchy maintenance can be done using drag and drop. JSONTreeBinding Basic OData TreeBinding OData Annotations TreeBinding Hierarchy Maintenance with a JSONModel",
        "sampleCount": 4,
        "key": "#/entity/sap.ui.table.TreeTable"
      },
      {
        "id": "sap.ui.unified.Menu",
        "name": "Menu",
        "category": "Action",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.unified.sample.MenuItemEventing",
            "name": "Item Eventing",
            "description": "Menu with Item Eventing",
            "entityId": "sap.ui.unified.Menu",
            "contexts": {
              "sap.ui.unified.Menu": {
                "nextSampleId": "sap.ui.unified.sample.MenuMenuEventing"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.MenuItemEventing/preview"
          },
          {
            "id": "sap.ui.unified.sample.MenuMenuEventing",
            "name": "Menu Eventing",
            "description": "Menu with Menu Eventing",
            "entityId": "sap.ui.unified.Menu",
            "contexts": {
              "sap.ui.unified.Menu": {
                "previousSampleId": "sap.ui.unified.sample.MenuItemEventing"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.MenuMenuEventing/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "Menu Menu Action Item Eventing Menu with Item Eventing Menu Eventing Menu with Menu Eventing Item Eventing Menu Eventing",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.unified.Menu"
      },
      {
        "id": "sap.ui.unified.Currency",
        "name": "Currency",
        "category": "Display",
        "since": "1.22",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.ui.unified.sample.Currency",
            "name": "Currency",
            "description": "Display Currencies with proper Alignment",
            "entityId": "sap.ui.unified.Currency",
            "contexts": {
              "sap.ui.unified.Currency": {
                "nextSampleId": "sap.ui.unified.sample.CurrencyInTable"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.Currency/preview"
          },
          {
            "id": "sap.ui.unified.sample.CurrencyInTable",
            "name": "Currency in Table",
            "description": "Display Currencies in Table",
            "entityId": "sap.ui.unified.Currency",
            "contexts": {
              "sap.ui.unified.Currency": {
                "previousSampleId": "sap.ui.unified.sample.Currency"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CurrencyInTable/preview"
          }
        ],
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "Currency Currency Display Currency Display Currencies with proper Alignment Currency in Table Display Currencies in Table Currency Currency in Table",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.unified.Currency"
      },
      {
        "id": "sap.ui.unified.ColorPicker",
        "name": "Color Picker",
        "category": "User Input",
        "since": "1.48",
        "samples": [
          {
            "id": "sap.ui.unified.sample.ColorPicker",
            "name": "Color Picker - displayMode: Default",
            "description": "Basic example of Color Picker. Note that you have to set the Color Picker mode to HSL to take advantage of the responsiveness of the control on a mobile device.",
            "entityId": "sap.ui.unified.ColorPicker",
            "contexts": {
              "sap.ui.unified.ColorPicker": {
                "nextSampleId": "sap.ui.unified.sample.ColorPickerLarge"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.ColorPicker/preview"
          },
          {
            "id": "sap.ui.unified.sample.ColorPickerLarge",
            "name": "Color Picker - displayMode: Large",
            "description": "Basic example of Color Picker. Note that you have to set the Color Picker mode to HSL to take advantage of the responsiveness of the control on a mobile device.",
            "entityId": "sap.ui.unified.ColorPicker",
            "contexts": {
              "sap.ui.unified.ColorPicker": {
                "previousSampleId": "sap.ui.unified.sample.ColorPicker",
                "nextSampleId": "sap.ui.unified.sample.ColorPickerSimplified"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.ColorPickerLarge/preview"
          },
          {
            "id": "sap.ui.unified.sample.ColorPickerSimplified",
            "name": "Color Picker - displayMode: Simplified",
            "description": "Basic example of Color Picker. Note that you have to set the Color Picker mode to HSL to take advantage of the responsiveness of the control on a mobile device.",
            "entityId": "sap.ui.unified.ColorPicker",
            "contexts": {
              "sap.ui.unified.ColorPicker": {
                "previousSampleId": "sap.ui.unified.sample.ColorPickerLarge",
                "nextSampleId": "sap.ui.unified.sample.ColorPickerPopover"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.ColorPickerSimplified/preview"
          },
          {
            "id": "sap.ui.unified.sample.ColorPickerPopover",
            "name": "Color Picker Popover",
            "description": "Example of ColorPicker in a popover using the thin wrapper control <code>sap.ui.unified.ColorPickerPopover</code>.",
            "entityId": "sap.ui.unified.ColorPicker",
            "contexts": {
              "sap.ui.unified.ColorPicker": {
                "previousSampleId": "sap.ui.unified.sample.ColorPickerSimplified"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.ColorPickerPopover/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "Color Picker ColorPicker User Input Color Picker - displayMode: Default Basic example of Color Picker. Note that you have to set the Color Picker mode to HSL to take advantage of the responsiveness of the control on a mobile device. Color Picker - displayMode: Large Basic example of Color Picker. Note that you have to set the Color Picker mode to HSL to take advantage of the responsiveness of the control on a mobile device. Color Picker - displayMode: Simplified Basic example of Color Picker. Note that you have to set the Color Picker mode to HSL to take advantage of the responsiveness of the control on a mobile device. Color Picker Popover Example of ColorPicker in a popover using the thin wrapper control <code>sap.ui.unified.ColorPickerPopover</code>. Color Picker - displayMode: Default Color Picker - displayMode: Large Color Picker - displayMode: Simplified Color Picker Popover",
        "sampleCount": 4,
        "key": "#/entity/sap.ui.unified.ColorPicker"
      },
      {
        "id": "sap.ui.unified.FileUploader",
        "name": "File Uploader",
        "category": "User Input",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.unified.sample.FileUploaderBasic",
            "name": "Basic",
            "description": "Basic File Uploader Example",
            "entityId": "sap.ui.unified.FileUploader",
            "contexts": {
              "sap.ui.unified.FileUploader": {
                "nextSampleId": "sap.ui.unified.sample.FileUploaderComplex"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.FileUploaderBasic/preview"
          },
          {
            "id": "sap.ui.unified.sample.FileUploaderComplex",
            "name": "Complex",
            "description": "File Uploader Example with Parameters",
            "entityId": "sap.ui.unified.FileUploader",
            "contexts": {
              "sap.ui.unified.FileUploader": {
                "previousSampleId": "sap.ui.unified.sample.FileUploaderBasic"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.FileUploaderComplex/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "File Uploader FileUploader User Input Basic Basic File Uploader Example Complex File Uploader Example with Parameters Basic Complex",
        "sampleCount": 2,
        "key": "#/entity/sap.ui.unified.FileUploader"
      },
      {
        "id": "sap.ui.unified.Calendar",
        "name": "Calendar",
        "category": "User Input",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.unified.sample.CalendarSingleDaySelection",
            "name": "Single Day Selection",
            "description": "Calendar where the user can select a single day",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "nextSampleId": "sap.ui.unified.sample.CalendarSingleIntervalSelection"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarSingleDaySelection/preview"
          },
          {
            "id": "sap.ui.unified.sample.CalendarSingleIntervalSelection",
            "name": "Single Interval Selection",
            "description": "Calendar where the user can select an interval or entire week (either by selecting its week number or by using SHIFT + Space).",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "previousSampleId": "sap.ui.unified.sample.CalendarSingleDaySelection",
                "nextSampleId": "sap.ui.unified.sample.CalendarMultipleDaySelection"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarSingleIntervalSelection/preview"
          },
          {
            "id": "sap.ui.unified.sample.CalendarMultipleDaySelection",
            "name": "Multiple Day Selection",
            "description": "Calendar where the user can select multiple days, entire weeks (either by selecting its week number or by using SHIFT + Space) and ranges (using SHIFT + ENTER/Left mouse click).",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "previousSampleId": "sap.ui.unified.sample.CalendarSingleIntervalSelection",
                "nextSampleId": "sap.ui.unified.sample.CalendarSpecialDaysLegend"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarMultipleDaySelection/preview"
          },
          {
            "id": "sap.ui.unified.sample.CalendarSpecialDaysLegend",
            "name": "Special Days with Legend",
            "description": "Calendar with special days and legend",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "previousSampleId": "sap.ui.unified.sample.CalendarMultipleDaySelection",
                "nextSampleId": "sap.ui.unified.sample.CalendarMultipleMonth"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarSpecialDaysLegend/preview"
          },
          {
            "id": "sap.ui.unified.sample.CalendarMultipleMonth",
            "name": "multiple months",
            "description": "Calendar with more than one month",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "previousSampleId": "sap.ui.unified.sample.CalendarSpecialDaysLegend",
                "nextSampleId": "sap.ui.unified.sample.CalendarCalendarType"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarMultipleMonth/preview"
          },
          {
            "id": "sap.ui.unified.sample.CalendarCalendarType",
            "name": "calendar type",
            "description": "islamic Calendar with secondary gregorian type",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "previousSampleId": "sap.ui.unified.sample.CalendarMultipleMonth",
                "nextSampleId": "sap.ui.unified.sample.CalendarMinMax"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarCalendarType/preview"
          },
          {
            "id": "sap.ui.unified.sample.CalendarMinMax",
            "name": "calendar - min., max., disabled and show/hide week numbers",
            "description": "Calendar with minimum date 2000-01-01 and maximum date 2050-12-31, some disabled days (in January 2016) and ability to show or hide week numbers.",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "previousSampleId": "sap.ui.unified.sample.CalendarCalendarType",
                "nextSampleId": "sap.ui.unified.sample.CalendarDateDeselection"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarMinMax/preview"
          },
          {
            "id": "sap.ui.unified.sample.CalendarDateDeselection",
            "name": "Date Deselection",
            "description": "An example of recommended implementation of deselection logic when the calendar is in single selection mode.",
            "entityId": "sap.ui.unified.Calendar",
            "contexts": {
              "sap.ui.unified.Calendar": {
                "previousSampleId": "sap.ui.unified.sample.CalendarMinMax"
              }
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarDateDeselection/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "Calendar Calendar User Input Single Day Selection Calendar where the user can select a single day Single Interval Selection Calendar where the user can select an interval or entire week (either by selecting its week number or by using SHIFT + Space). Multiple Day Selection Calendar where the user can select multiple days, entire weeks (either by selecting its week number or by using SHIFT + Space) and ranges (using SHIFT + ENTER/Left mouse click). Special Days with Legend Calendar with special days and legend multiple months Calendar with more than one month calendar type islamic Calendar with secondary gregorian type calendar - min., max., disabled and show/hide week numbers Calendar with minimum date 2000-01-01 and maximum date 2050-12-31, some disabled days (in January 2016) and ability to show or hide week numbers. Date Deselection An example of recommended implementation of deselection logic when the calendar is in single selection mode. Single Day Selection Single Interval Selection Multiple Day Selection Special Days with Legend multiple months calendar type calendar - min., max., disabled and show/hide week numbers Date Deselection",
        "sampleCount": 8,
        "key": "#/entity/sap.ui.unified.Calendar"
      },
      {
        "id": "sap.ui.unified.CalendarDateInterval",
        "name": "CalendarDateInterval",
        "category": "User Input",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.ui.unified.sample.CalendarDateIntervalBasic",
            "name": "simple example",
            "description": "CalendarDateInterval with 14 days and single day selection",
            "entityId": "sap.ui.unified.CalendarDateInterval",
            "contexts": {
              "sap.ui.unified.CalendarDateInterval": {}
            },
            "key": "#/sample/sap.ui.unified.sample.CalendarDateIntervalBasic/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "CalendarDateInterval CalendarDateInterval User Input simple example CalendarDateInterval with 14 days and single day selection simple example",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.unified.CalendarDateInterval"
      },
      {
        "id": "sap.ui.unified.Shell",
        "name": "Unified Shell",
        "category": "Container",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.unified.sample.ShellBasic",
            "name": "Basic",
            "description": "Basic Shell Example",
            "entityId": "sap.ui.unified.Shell",
            "contexts": {
              "sap.ui.unified.Shell": {}
            },
            "key": "#/sample/sap.ui.unified.sample.ShellBasic/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "Unified Shell UnifiedShell Container Basic Basic Shell Example Basic",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.unified.Shell"
      },
      {
        "id": "sap.ui.unified.SplitContainer",
        "name": "Unified Split Container",
        "category": "Container",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.ui.unified.sample.SplitContainer",
            "name": "Basic",
            "description": "Basic Split Container Example",
            "entityId": "sap.ui.unified.SplitContainer",
            "contexts": {
              "sap.ui.unified.SplitContainer": {}
            },
            "key": "#/sample/sap.ui.unified.sample.SplitContainer/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.unified",
        "library": "sap.ui.unified",
        "searchTags": "Unified Split Container UnifiedSplitContainer Container Basic Basic Split Container Example Basic",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.unified.SplitContainer"
      },
      {
        "id": "sap.ui.vbm.GeoMap",
        "name": "Geo Map",
        "category": "Map",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.ui.vbm.sample.GeoMapBasic",
            "name": "Basic GeoMap",
            "description": "A ‘GeoMap’ is useful for displaying points of interest, area objects or other charts above the map.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "nextSampleId": "sap.ui.vbm.sample.GeoMapLabels"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapBasic/preview"
          },
          {
            "id": "sap.ui.vbm.sample.GeoMapLabels",
            "name": "GeoMap with Labels",
            "description": "Use a ‘label’ to provide more information about a symbol or standalone with an anchor.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "previousSampleId": "sap.ui.vbm.sample.GeoMapBasic",
                "nextSampleId": "sap.ui.vbm.sample.GeoMapSpots"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapLabels/preview"
          },
          {
            "id": "sap.ui.vbm.sample.GeoMapSpots",
            "name": "GeoMap with Spots",
            "description": "Use ‘spots’ to visualize specific locations on the map.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "previousSampleId": "sap.ui.vbm.sample.GeoMapLabels",
                "nextSampleId": "sap.ui.vbm.sample.GeoMapCircles"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapSpots/preview"
          },
          {
            "id": "sap.ui.vbm.sample.GeoMapCircles",
            "name": "GeoMap with Circles",
            "description": "Use ‘circles’ to visualize specific, quantitative parameters.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "previousSampleId": "sap.ui.vbm.sample.GeoMapSpots",
                "nextSampleId": "sap.ui.vbm.sample.GeoMapAreas"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapCircles/preview"
          },
          {
            "id": "sap.ui.vbm.sample.GeoMapAreas",
            "name": "GeoMap with Areas",
            "description": "Use ‘areas’ to visualize personalized areas, for example for visualizing regions such as countries or zip code zones.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "previousSampleId": "sap.ui.vbm.sample.GeoMapCircles",
                "nextSampleId": "sap.ui.vbm.sample.GeoMapRoutes"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapAreas/preview"
          },
          {
            "id": "sap.ui.vbm.sample.GeoMapRoutes",
            "name": "GeoMap with Street level Routes",
            "description": "You can visualize ‘routes’ on a street level.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "previousSampleId": "sap.ui.vbm.sample.GeoMapAreas",
                "nextSampleId": "sap.ui.vbm.sample.GeoMapHLRoutes"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapRoutes/preview"
          },
          {
            "id": "sap.ui.vbm.sample.GeoMapHLRoutes",
            "name": "GeoMap with High level Routes",
            "description": "You can visualize ‘routes’ with showing the direct connection between two or more points of interest.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "previousSampleId": "sap.ui.vbm.sample.GeoMapRoutes",
                "nextSampleId": "sap.ui.vbm.sample.GeoMapCharts"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapHLRoutes/preview"
          },
          {
            "id": "sap.ui.vbm.sample.GeoMapCharts",
            "name": "GeoMap with Containers",
            "description": "Use ‘containers’ to display an arbitrary SAP UI5 control on the map.",
            "entityId": "sap.ui.vbm.GeoMap",
            "contexts": {
              "sap.ui.vbm.GeoMap": {
                "previousSampleId": "sap.ui.vbm.sample.GeoMapHLRoutes"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.GeoMapCharts/preview"
          }
        ],
        "appComponent": "CA-GTF-VBZ",
        "formFactors": "Independent",
        "namespace": "sap.ui.vbm",
        "library": "sap.ui.vbm",
        "searchTags": "Geo Map GeoMap Map Basic GeoMap A ‘GeoMap’ is useful for displaying points of interest, area objects or other charts above the map. GeoMap with Labels Use a ‘label’ to provide more information about a symbol or standalone with an anchor. GeoMap with Spots Use ‘spots’ to visualize specific locations on the map. GeoMap with Circles Use ‘circles’ to visualize specific, quantitative parameters. GeoMap with Areas Use ‘areas’ to visualize personalized areas, for example for visualizing regions such as countries or zip code zones. GeoMap with Street level Routes You can visualize ‘routes’ on a street level. GeoMap with High level Routes You can visualize ‘routes’ with showing the direct connection between two or more points of interest. GeoMap with Containers Use ‘containers’ to display an arbitrary SAP UI5 control on the map. Basic GeoMap GeoMap with Labels GeoMap with Spots GeoMap with Circles GeoMap with Areas GeoMap with Street level Routes GeoMap with High level Routes GeoMap with Containers",
        "sampleCount": 8,
        "key": "#/entity/sap.ui.vbm.GeoMap"
      },
      {
        "id": "sap.ui.vbm.AnalyticMap",
        "name": "Analytic Map",
        "category": "Map",
        "since": "1.24",
        "samples": [
          {
            "id": "sap.ui.vbm.sample.AnalyticMapBasic",
            "name": "Basic AnalyticMap",
            "description": "An ‘analytic map’ is useful for displaying quantitative or qualitative data by coloring various regions.",
            "entityId": "sap.ui.vbm.AnalyticMap",
            "contexts": {
              "sap.ui.vbm.AnalyticMap": {
                "nextSampleId": "sap.ui.vbm.sample.AnalyticMapLabels"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.AnalyticMapBasic/preview"
          },
          {
            "id": "sap.ui.vbm.sample.AnalyticMapLabels",
            "name": "AnalyticMap with Labels",
            "description": "Use a ‘label’ to provide more information about a symbol or standalone with an anchor.",
            "entityId": "sap.ui.vbm.AnalyticMap",
            "contexts": {
              "sap.ui.vbm.AnalyticMap": {
                "previousSampleId": "sap.ui.vbm.sample.AnalyticMapBasic",
                "nextSampleId": "sap.ui.vbm.sample.AnalyticMapSpots"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.AnalyticMapLabels/preview"
          },
          {
            "id": "sap.ui.vbm.sample.AnalyticMapSpots",
            "name": "AnalyticMap with Spots",
            "description": "Use ‘spots’ to visualize specific locations on the map.",
            "entityId": "sap.ui.vbm.AnalyticMap",
            "contexts": {
              "sap.ui.vbm.AnalyticMap": {
                "previousSampleId": "sap.ui.vbm.sample.AnalyticMapLabels",
                "nextSampleId": "sap.ui.vbm.sample.AnalyticMapCircles"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.AnalyticMapSpots/preview"
          },
          {
            "id": "sap.ui.vbm.sample.AnalyticMapCircles",
            "name": "AnalyticMap with Circles",
            "description": "Use ‘circles’ to visualize specific, quantitative parameters.",
            "entityId": "sap.ui.vbm.AnalyticMap",
            "contexts": {
              "sap.ui.vbm.AnalyticMap": {
                "previousSampleId": "sap.ui.vbm.sample.AnalyticMapSpots",
                "nextSampleId": "sap.ui.vbm.sample.AnalyticMapRegions"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.AnalyticMapCircles/preview"
          },
          {
            "id": "sap.ui.vbm.sample.AnalyticMapRegions",
            "name": "AnalyticMap with Regions",
            "description": "You can visualize regions, such as countries or zip code zones.",
            "entityId": "sap.ui.vbm.AnalyticMap",
            "contexts": {
              "sap.ui.vbm.AnalyticMap": {
                "previousSampleId": "sap.ui.vbm.sample.AnalyticMapCircles",
                "nextSampleId": "sap.ui.vbm.sample.AnalyticMapRoutes"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.AnalyticMapRegions/preview"
          },
          {
            "id": "sap.ui.vbm.sample.AnalyticMapRoutes",
            "name": "AnalyticMap with Routes",
            "description": "You can visualize ‘routes’.",
            "entityId": "sap.ui.vbm.AnalyticMap",
            "contexts": {
              "sap.ui.vbm.AnalyticMap": {
                "previousSampleId": "sap.ui.vbm.sample.AnalyticMapRegions",
                "nextSampleId": "sap.ui.vbm.sample.AnalyticMapCharts"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.AnalyticMapRoutes/preview"
          },
          {
            "id": "sap.ui.vbm.sample.AnalyticMapCharts",
            "name": "AnalyticMap with Containers",
            "description": "Use ‘containers’ to display an arbitrary SAP UI5 control on the map.",
            "entityId": "sap.ui.vbm.AnalyticMap",
            "contexts": {
              "sap.ui.vbm.AnalyticMap": {
                "previousSampleId": "sap.ui.vbm.sample.AnalyticMapRoutes"
              }
            },
            "key": "#/sample/sap.ui.vbm.sample.AnalyticMapCharts/preview"
          }
        ],
        "appComponent": "CA-GTF-VBZ",
        "formFactors": "Independent",
        "namespace": "sap.ui.vbm",
        "library": "sap.ui.vbm",
        "searchTags": "Analytic Map AnalyticMap Map Basic AnalyticMap An ‘analytic map’ is useful for displaying quantitative or qualitative data by coloring various regions. AnalyticMap with Labels Use a ‘label’ to provide more information about a symbol or standalone with an anchor. AnalyticMap with Spots Use ‘spots’ to visualize specific locations on the map. AnalyticMap with Circles Use ‘circles’ to visualize specific, quantitative parameters. AnalyticMap with Regions You can visualize regions, such as countries or zip code zones. AnalyticMap with Routes You can visualize ‘routes’. AnalyticMap with Containers Use ‘containers’ to display an arbitrary SAP UI5 control on the map. Basic AnalyticMap AnalyticMap with Labels AnalyticMap with Spots AnalyticMap with Circles AnalyticMap with Regions AnalyticMap with Routes AnalyticMap with Containers",
        "sampleCount": 7,
        "key": "#/entity/sap.ui.vbm.AnalyticMap"
      },
      {
        "id": "sap.ui.vk.tutorial.VIT",
        "name": "3D Viewer",
        "category": "Tutorial",
        "since": "1.34",
        "samplesAsSteps": [
          "3D Viewer With Single File Loading",
          "3D Viewer With Multiple File Loading",
          "3D Viewer Using the Viewport Control",
          "Add a Scene Tree",
          "Add Step Navigation control",
          "Customize scene tree",
          "Create Threejs objects",
          "Load Collada model",
          "Use rectangular selection tool",
          "Viewport with tools"
        ],
        "description": "This tutorial illustrates the major features of the sap.ui.vk library which provides controls for the visualization and manipulation of 2D and 3D models in your browser",
        "docuLink": "#docs/guide/8deac9d302504962a01149c3cc913ee0.html",
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.vk.tutorial",
        "library": "sap.ui.vk",
        "searchTags": "3D Viewer 3DViewer Tutorial 3D Viewer - Step 1 - 3D Viewer With Single File Loading 3D Viewer - Step 2 - 3D Viewer With Multiple File Loading 3D Viewer - Step 3 - 3D Viewer Using the Viewport Control 3D Viewer - Step 4 - Add a Scene Tree 3D Viewer - Step 5 - Add Step Navigation control 3D Viewer - Step 6 - Customize scene tree 3D Viewer - Step 7 - Create Threejs objects 3D Viewer - Step 8 - Load Collada model 3D Viewer - Step 9 - Use rectangular selection tool 3D Viewer - Step 10 - Viewport with tools",
        "samples": [
          {
            "id": "sap.ui.vk.tutorial.VIT.01",
            "name": "3D Viewer - Step 1 - 3D Viewer With Single File Loading",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.02",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.01/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.02",
            "name": "3D Viewer - Step 2 - 3D Viewer With Multiple File Loading",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.01",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.03",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.02/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.03",
            "name": "3D Viewer - Step 3 - 3D Viewer Using the Viewport Control",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.02",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.04",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.03/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.04",
            "name": "3D Viewer - Step 4 - Add a Scene Tree",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.03",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.05",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.04/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.05",
            "name": "3D Viewer - Step 5 - Add Step Navigation control",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.04",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.06",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.05/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.06",
            "name": "3D Viewer - Step 6 - Customize scene tree",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.05",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.07",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.06/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.07",
            "name": "3D Viewer - Step 7 - Create Threejs objects",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.06",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.08",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.07/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.08",
            "name": "3D Viewer - Step 8 - Load Collada model",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.07",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.09",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.08/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.09",
            "name": "3D Viewer - Step 9 - Use rectangular selection tool",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.08",
            "nextSampleId": "sap.ui.vk.tutorial.VIT.10",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.09/preview"
          },
          {
            "id": "sap.ui.vk.tutorial.VIT.10",
            "name": "3D Viewer - Step 10 - Viewport with tools",
            "previousSampleId": "sap.ui.vk.tutorial.VIT.09",
            "entityId": "sap.ui.vk.tutorial.VIT",
            "key": "#/sample/sap.ui.vk.tutorial.VIT.10/preview"
          }
        ],
        "sampleCount": 10,
        "key": "#/entity/sap.ui.vk.tutorial.VIT"
      },
      {
        "id": "sap.ui.vk.MapContainer",
        "name": "Map container",
        "category": "Container",
        "appComponent": "CA-UI5-VTK",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.ui.vk.sample.MapContainerBasic",
            "name": "Basic Map Container",
            "description": "Shows a map with a transparent toolbar including a full screen button, a settings button and a selection mode menu.",
            "entityId": "sap.ui.vk.MapContainer",
            "contexts": {
              "sap.ui.vk.MapContainer": {
                "nextSampleId": "sap.ui.vk.sample.MapContainerMapSwitch"
              }
            },
            "key": "#/sample/sap.ui.vk.sample.MapContainerBasic/preview"
          },
          {
            "id": "sap.ui.vk.sample.MapContainerMapSwitch",
            "name": "Basic Map Container with view switch",
            "description": "In addition to the simple toolbar an additional segmented button for integrating a view switch is shown. The view switch can for example be used for switching between analytic and geomap or between map and charts.",
            "entityId": "sap.ui.vk.MapContainer",
            "contexts": {
              "sap.ui.vk.MapContainer": {
                "previousSampleId": "sap.ui.vk.sample.MapContainerBasic",
                "nextSampleId": "sap.ui.vk.sample.MapContainerListPanel"
              }
            },
            "key": "#/sample/sap.ui.vk.sample.MapContainerMapSwitch/preview"
          },
          {
            "id": "sap.ui.vk.sample.MapContainerListPanel",
            "name": "Basic Map Container with list panel",
            "description": "In addition to the toolbar a list panel stack is shown on the map. The list panel stack can be used for a legend or application specific content.",
            "entityId": "sap.ui.vk.MapContainer",
            "contexts": {
              "sap.ui.vk.MapContainer": {
                "previousSampleId": "sap.ui.vk.sample.MapContainerMapSwitch"
              }
            },
            "key": "#/sample/sap.ui.vk.sample.MapContainerListPanel/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.ui.vk",
        "library": "sap.ui.vk",
        "searchTags": "Map container Mapcontainer Container Basic Map Container Shows a map with a transparent toolbar including a full screen button, a settings button and a selection mode menu. Basic Map Container with view switch In addition to the simple toolbar an additional segmented button for integrating a view switch is shown. The view switch can for example be used for switching between analytic and geomap or between map and charts. Basic Map Container with list panel In addition to the toolbar a list panel stack is shown on the map. The list panel stack can be used for a legend or application specific content. Basic Map Container Basic Map Container with view switch Basic Map Container with list panel",
        "sampleCount": 3,
        "key": "#/entity/sap.ui.vk.MapContainer"
      },
      {
        "id": "sap.ui.vtm.Vtm",
        "name": "Visual Tree Mapper",
        "category": "Container",
        "appComponent": "CA-UI5-VTK-VTM",
        "since": "1.50",
        "samples": [
          {
            "id": "sap.ui.vtm.sample.basicSinglePanel",
            "name": "Basic Single Panel",
            "description": "Basic sample utilising a single panel.",
            "entityId": "sap.ui.vtm.Vtm",
            "contexts": {
              "sap.ui.vtm.Vtm": {}
            },
            "key": "#/sample/sap.ui.vtm.sample.basicSinglePanel/preview"
          }
        ],
        "description": "sap.ui.vtm (Visual Tree Mapper) library.",
        "formFactors": "Condensed, Compact",
        "namespace": "sap.ui.vtm",
        "library": "sap.ui.vtm",
        "searchTags": "Visual Tree Mapper VisualTreeMapper Container Basic Single Panel Basic sample utilising a single panel. Basic Single Panel",
        "sampleCount": 1,
        "key": "#/entity/sap.ui.vtm.Vtm"
      },
      {
        "id": "sap.ushell.ui.footerbar.AddBookmarkButton",
        "name": "Add Bookmark Button",
        "category": "Action",
        "since": "1.30",
        "formFactors": "Compact, Cozy",
        "samples": [
          {
            "id": "sap.ushell.sample.AddBookmarkButton",
            "name": "Add Bookmark Button",
            "description": "Instantiate addBookmarkButton",
            "entityId": "sap.ushell.ui.footerbar.AddBookmarkButton",
            "contexts": {
              "sap.ushell.ui.footerbar.AddBookmarkButton": {}
            },
            "key": "#/sample/sap.ushell.sample.AddBookmarkButton/preview"
          }
        ],
        "namespace": "sap.ushell.ui.footerbar",
        "library": "sap.ushell",
        "searchTags": "Add Bookmark Button AddBookmarkButton Action Add Bookmark Button Instantiate addBookmarkButton Add Bookmark Button",
        "sampleCount": 1,
        "key": "#/entity/sap.ushell.ui.footerbar.AddBookmarkButton"
      },
      {
        "id": "sap.ushell.sample.OpaFLPSandbox",
        "name": "Starting an application in a FLP sandbox",
        "category": "Container",
        "since": "1.53",
        "formFactors": "Compact, Cozy",
        "samples": [
          {
            "id": "sap.ushell.sample.OpaFLPSandbox",
            "name": "Starting an application in a FLP sandbox",
            "description": "How to test a Fiori application in FLP sandbox with OPA",
            "entityId": "sap.ushell.sample.OpaFLPSandbox",
            "contexts": {
              "sap.ui.test.Opa5": {
                "previousSampleId": "sap.ui.core.sample.OpaAutoWaitParams"
              },
              "sap.ushell.sample.OpaFLPSandbox": {}
            },
            "key": "#/sample/sap.ushell.sample.OpaFLPSandbox/preview"
          }
        ],
        "namespace": "sap.ushell.sample",
        "library": "sap.ushell",
        "searchTags": "Starting an application in a FLP sandbox StartinganapplicationinaFLPsandbox Container Starting an application in a FLP sandbox How to test a Fiori application in FLP sandbox with OPA Starting an application in a FLP sandbox",
        "sampleCount": 1,
        "key": "#/entity/sap.ushell.sample.OpaFLPSandbox"
      },
      {
        "id": "sap.uxap.ObjectPageHeader",
        "name": "Object Page Header Title",
        "category": "Display",
        "since": "1.26",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.uxap.sample.ObjectPageHeaderWithAllControls",
            "name": "ObjectPageHeader with all controls",
            "description": "This is an example of an ObjectPageHeader containing all possible controls in it.",
            "entityId": "sap.uxap.ObjectPageHeader",
            "contexts": {
              "sap.uxap.ObjectPageHeader": {
                "nextSampleId": "sap.uxap.sample.ProfileObjectPageHeader"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageHeaderWithAllControls/preview"
          },
          {
            "id": "sap.uxap.sample.ProfileObjectPageHeader",
            "name": "ObjectPageHeader with placeholder",
            "description": "This is an example of ObjectPageHeader using the showPlaceholder property.",
            "entityId": "sap.uxap.ObjectPageHeader",
            "contexts": {
              "sap.uxap.ObjectPageHeader": {
                "previousSampleId": "sap.uxap.sample.ObjectPageHeaderWithAllControls",
                "nextSampleId": "sap.uxap.sample.AlternativeProfileObjectPageHeader"
              }
            },
            "key": "#/sample/sap.uxap.sample.ProfileObjectPageHeader/preview"
          },
          {
            "id": "sap.uxap.sample.AlternativeProfileObjectPageHeader",
            "name": "ObjectPageHeader options",
            "description": "This is a different example of ObjectPageHeader hiding the headerTitle area entirely until user scrolls down.",
            "entityId": "sap.uxap.ObjectPageHeader",
            "contexts": {
              "sap.uxap.ObjectPageHeader": {
                "previousSampleId": "sap.uxap.sample.ProfileObjectPageHeader",
                "nextSampleId": "sap.uxap.sample.KPIObjectPageHeader"
              }
            },
            "key": "#/sample/sap.uxap.sample.AlternativeProfileObjectPageHeader/preview"
          },
          {
            "id": "sap.uxap.sample.KPIObjectPageHeader",
            "name": "Standard Fiori ObjectPageHeader",
            "description": "This is an example of an ObjectPageHeader containing mainly KPIs.",
            "entityId": "sap.uxap.ObjectPageHeader",
            "contexts": {
              "sap.uxap.ObjectPageHeader": {
                "previousSampleId": "sap.uxap.sample.AlternativeProfileObjectPageHeader",
                "nextSampleId": "sap.uxap.sample.ObjectPageDynamicSideContentBtn"
              }
            },
            "key": "#/sample/sap.uxap.sample.KPIObjectPageHeader/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageDynamicSideContentBtn",
            "name": "ObjectPage with DynamicSideContent Button",
            "description": "The sample shows Object Page inside a main content of DynamicSideContent. The ObjectPageHeader has property DynamicSideContentButton set to true which is used to show the side panel of DynamicSideContent.",
            "entityId": "sap.uxap.ObjectPageHeader",
            "contexts": {
              "sap.uxap.ObjectPageHeader": {
                "previousSampleId": "sap.uxap.sample.KPIObjectPageHeader"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageDynamicSideContentBtn/preview"
          }
        ],
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page Header Title ObjectPageHeaderTitle Display ObjectPageHeader with all controls This is an example of an ObjectPageHeader containing all possible controls in it. ObjectPageHeader with placeholder This is an example of ObjectPageHeader using the showPlaceholder property. ObjectPageHeader options This is a different example of ObjectPageHeader hiding the headerTitle area entirely until user scrolls down. Standard Fiori ObjectPageHeader This is an example of an ObjectPageHeader containing mainly KPIs. ObjectPage with DynamicSideContent Button The sample shows Object Page inside a main content of DynamicSideContent. The ObjectPageHeader has property DynamicSideContentButton set to true which is used to show the side panel of DynamicSideContent. ObjectPageHeader with all controls ObjectPageHeader with placeholder ObjectPageHeader options Standard Fiori ObjectPageHeader ObjectPage with DynamicSideContent Button",
        "sampleCount": 5,
        "key": "#/entity/sap.uxap.ObjectPageHeader"
      },
      {
        "id": "sap.uxap.ObjectPageHeaderContent",
        "name": "Object Page Header Content",
        "category": "Display",
        "since": "1.30",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.uxap.sample.HeaderContent",
            "name": "ObjectPageHeaderContent",
            "description": "This is an example of an ObjectPageHeaderContent.",
            "entityId": "sap.uxap.ObjectPageHeaderContent",
            "contexts": {
              "sap.uxap.ObjectPageHeaderContent": {
                "nextSampleId": "sap.uxap.sample.ObjectPageHeaderContentPriorities"
              }
            },
            "key": "#/sample/sap.uxap.sample.HeaderContent/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageHeaderContentPriorities",
            "name": "Object Page Header Content Priorities",
            "description": "The sample shows how to set priorities of the ObjectPageHeader content items by using the ObjectPageHeaderContentLayoutData element",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageHeaderContent": {
                "previousSampleId": "sap.uxap.sample.HeaderContent"
              },
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageHeaderExpanded",
                "nextSampleId": "sap.uxap.sample.ObjectPageFormLayout"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageHeaderContentPriorities/preview"
          }
        ],
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page Header Content ObjectPageHeaderContent Display ObjectPageHeaderContent This is an example of an ObjectPageHeaderContent. Object Page Header Content Priorities The sample shows how to set priorities of the ObjectPageHeader content items by using the ObjectPageHeaderContentLayoutData element ObjectPageHeaderContent Object Page Header Content Priorities",
        "sampleCount": 2,
        "key": "#/entity/sap.uxap.ObjectPageHeaderContent"
      },
      {
        "id": "sap.uxap.ObjectPageDynamicHeaderTitle",
        "name": "Object Page Dynamic Header Title",
        "category": "Display",
        "since": "1.52",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.uxap.sample.ObjectPageHeaderActionButtons",
            "name": "Object Page with ObjectPageHeaderActionButtons",
            "description": "This example demonstrates ObjectPage with ObjectPageHeaderActionButtons and a GenericTag in the header.",
            "entityId": "sap.m.GenericTag",
            "contexts": {
              "sap.uxap.ObjectPageDynamicHeaderTitle": {
                "nextSampleId": "sap.uxap.sample.ObjectPageHeaderBackgroundDesign"
              },
              "sap.m.GenericTag": {
                "previousSampleId": "sap.m.sample.GenericTag",
                "nextSampleId": "sap.f.sample.DynamicPageFreeStyle"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageHeaderActionButtons/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageHeaderBackgroundDesign",
            "name": "Object Page with Translucent backgroundDesign",
            "description": "This example demonstrates ObjectPage with ObjectPageDynamicHeaderTitle with Solid backgroundDesign and Translucent backgroundDesignAnchorBar.",
            "entityId": "sap.uxap.ObjectPageDynamicHeaderTitle",
            "contexts": {
              "sap.uxap.ObjectPageDynamicHeaderTitle": {
                "previousSampleId": "sap.uxap.sample.ObjectPageHeaderActionButtons"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageHeaderBackgroundDesign/preview"
          }
        ],
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page Dynamic Header Title ObjectPageDynamicHeaderTitle Display Object Page with ObjectPageHeaderActionButtons This example demonstrates ObjectPage with ObjectPageHeaderActionButtons and a GenericTag in the header. Object Page with Translucent backgroundDesign This example demonstrates ObjectPage with ObjectPageDynamicHeaderTitle with Solid backgroundDesign and Translucent backgroundDesignAnchorBar. Object Page with ObjectPageHeaderActionButtons Object Page with Translucent backgroundDesign",
        "sampleCount": 2,
        "key": "#/entity/sap.uxap.ObjectPageDynamicHeaderTitle"
      },
      {
        "id": "sap.uxap.ObjectPageLayout",
        "name": "Object Page Layout",
        "category": "Layout",
        "formFactors": "Independent",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.uxap.sample.ObjectPageOnJSON",
            "name": "Object Page with Title on top",
            "description": "Object Page sample showing a layout with subsection titles on top. This is the default layout. The sample also shows the 'Edit header' button in the Header Content area.",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "nextSampleId": "sap.uxap.sample.ObjectPageDynamicHeader"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageOnJSON/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageDynamicHeader",
            "name": "Object Page with Dynamic Header",
            "description": "This example demonstrates the classic ObjectPageLayout achieved by using ObjectPageDynamicHeaderTitle for the headerContent aggregation.",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageOnJSON",
                "nextSampleId": "sap.uxap.sample.ObjectPageTabNavigationMode"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageDynamicHeader/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageTabNavigationMode",
            "name": "Object Page using the Tab navigation mode",
            "description": "Object Page sample showing a layout where the navigation is Tab based (one Tab per section) rather than having all of the sections visible at the same time.",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageDynamicHeader",
                "nextSampleId": "sap.uxap.sample.ObjectPageSelectedSection"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageTabNavigationMode/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageSelectedSection",
            "name": "Object Page with predefined selected section in Tab navigation mode",
            "description": "Object Page sample showing a layout where the selected section is defined by the user.",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageTabNavigationMode",
                "nextSampleId": "sap.uxap.sample.ObjectPageTitleOnLeft"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageSelectedSection/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageTitleOnLeft",
            "name": "Object Page with Title on the left",
            "description": "Object Page sample showing a layout with subsection titles on the left.",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageSelectedSection",
                "nextSampleId": "sap.uxap.sample.ObjectPageOnJSONWithLazyLoading"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageTitleOnLeft/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageOnJSONWithLazyLoading",
            "name": "Object Page with LazyLoading",
            "description": "Object Page with LazyLoading",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageTitleOnLeft",
                "nextSampleId": "sap.uxap.sample.ObjectPageLazyLoadingWithoutBlocks"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageOnJSONWithLazyLoading/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageLazyLoadingWithoutBlocks",
            "name": "Object Page with LazyLoading without blocks",
            "description": "This sample showcases the lazy loading using the stashed property of the ObjectPageLazyLoader. It enables usage of lazy loading without the need to have Blocks",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageOnJSONWithLazyLoading",
                "nextSampleId": "sap.uxap.sample.ObjectPageState"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageLazyLoadingWithoutBlocks/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageState",
            "name": "Object Page State",
            "description": "This example shows how the page can be accessed directly to a specific vertical position, with \"See More\" enabled",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageLazyLoadingWithoutBlocks",
                "nextSampleId": "sap.uxap.sample.AnchorBar"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageState/preview"
          },
          {
            "id": "sap.uxap.sample.AnchorBar",
            "name": "Object Page AnchorBar",
            "description": "AnchorBar has a different behavior based on the device",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageState",
                "nextSampleId": "sap.uxap.sample.AnchorBarWithNumbers"
              }
            },
            "key": "#/sample/sap.uxap.sample.AnchorBar/preview"
          },
          {
            "id": "sap.uxap.sample.AnchorBarWithNumbers",
            "name": "Object Page AnchorBar with numbers",
            "description": "This example shows how to visualize numbers in parenthesis after the corresponding section titles in the AnchorBar",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.AnchorBar",
                "nextSampleId": "sap.uxap.sample.AnchorBarNoPopover"
              }
            },
            "key": "#/sample/sap.uxap.sample.AnchorBarWithNumbers/preview"
          },
          {
            "id": "sap.uxap.sample.AnchorBarNoPopover",
            "name": "Navigation to Section sample",
            "description": "This example shows how to change the default behavior in order to be able to navigate to sections instead of subsections, using the Anchor Bar",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.AnchorBarWithNumbers",
                "nextSampleId": "sap.uxap.sample.ChildObjectPage"
              }
            },
            "key": "#/sample/sap.uxap.sample.AnchorBarNoPopover/preview"
          },
          {
            "id": "sap.uxap.sample.ChildObjectPage",
            "name": "ObjectPage as a child page",
            "description": "This is an example of an ObjectPage Child page.",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.AnchorBarNoPopover",
                "nextSampleId": "sap.uxap.sample.ObjectPageHeaderExpanded"
              }
            },
            "key": "#/sample/sap.uxap.sample.ChildObjectPage/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageHeaderExpanded",
            "name": "ObjectPage with HeaderContent always shown on desktop",
            "description": "This is an example of an ObjectPage with property alwaysShowContentHeader set to true. In this case the HeaderContent won't snap on a desktop.",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ChildObjectPage",
                "nextSampleId": "sap.uxap.sample.ObjectPageHeaderContentPriorities"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageHeaderExpanded/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageHeaderContentPriorities",
            "name": "Object Page Header Content Priorities",
            "description": "The sample shows how to set priorities of the ObjectPageHeader content items by using the ObjectPageHeaderContentLayoutData element",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageHeaderContent": {
                "previousSampleId": "sap.uxap.sample.HeaderContent"
              },
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageHeaderExpanded",
                "nextSampleId": "sap.uxap.sample.ObjectPageFormLayout"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageHeaderContentPriorities/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageFormLayout",
            "name": "ObjectPage with forms",
            "description": "Object Page automatically adjusts form layout to match block column layout",
            "entityId": "sap.uxap.ObjectPageLayout",
            "contexts": {
              "sap.uxap.ObjectPageLayout": {
                "previousSampleId": "sap.uxap.sample.ObjectPageHeaderContentPriorities"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageFormLayout/preview"
          }
        ],
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page Layout ObjectPageLayout Layout Object Page with Title on top Object Page sample showing a layout with subsection titles on top. This is the default layout. The sample also shows the 'Edit header' button in the Header Content area. Object Page with Dynamic Header This example demonstrates the classic ObjectPageLayout achieved by using ObjectPageDynamicHeaderTitle for the headerContent aggregation. Object Page using the Tab navigation mode Object Page sample showing a layout where the navigation is Tab based (one Tab per section) rather than having all of the sections visible at the same time. Object Page with predefined selected section in Tab navigation mode Object Page sample showing a layout where the selected section is defined by the user. Object Page with Title on the left Object Page sample showing a layout with subsection titles on the left. Object Page with LazyLoading Object Page with LazyLoading Object Page with LazyLoading without blocks This sample showcases the lazy loading using the stashed property of the ObjectPageLazyLoader. It enables usage of lazy loading without the need to have Blocks Object Page State This example shows how the page can be accessed directly to a specific vertical position, with \"See More\" enabled Object Page AnchorBar AnchorBar has a different behavior based on the device Object Page AnchorBar with numbers This example shows how to visualize numbers in parenthesis after the corresponding section titles in the AnchorBar Navigation to Section sample This example shows how to change the default behavior in order to be able to navigate to sections instead of subsections, using the Anchor Bar ObjectPage as a child page This is an example of an ObjectPage Child page. ObjectPage with HeaderContent always shown on desktop This is an example of an ObjectPage with property alwaysShowContentHeader set to true. In this case the HeaderContent won't snap on a desktop. Object Page Header Content Priorities The sample shows how to set priorities of the ObjectPageHeader content items by using the ObjectPageHeaderContentLayoutData element ObjectPage with forms Object Page automatically adjusts form layout to match block column layout Object Page with Title on top Object Page with Dynamic Header Object Page using the Tab navigation mode Object Page with predefined selected section in Tab navigation mode Object Page with Title on the left Object Page with LazyLoading Object Page with LazyLoading without blocks Object Page State Object Page AnchorBar Object Page AnchorBar with numbers Navigation to Section sample ObjectPage as a child page ObjectPage with HeaderContent always shown on desktop Object Page Header Content Priorities ObjectPage with forms",
        "sampleCount": 15,
        "key": "#/entity/sap.uxap.ObjectPageLayout"
      },
      {
        "id": "sap.uxap.ObjectPageSection",
        "name": "Object Page Section",
        "category": "Container",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.uxap.sample.ObjectPageSection",
            "name": "Object Page Layout Section sample",
            "description": "This example explains the rules for the rendering of sections",
            "entityId": "sap.uxap.ObjectPageSection",
            "contexts": {
              "sap.uxap.ObjectPageSection": {}
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageSection/preview"
          }
        ],
        "formFactors": "Cozy",
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page Section ObjectPageSection Container Object Page Layout Section sample This example explains the rules for the rendering of sections Object Page Layout Section sample",
        "sampleCount": 1,
        "key": "#/entity/sap.uxap.ObjectPageSection"
      },
      {
        "id": "sap.uxap.ObjectPageSubSection",
        "name": "Object Page SubSection",
        "category": "Container",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.uxap.sample.ObjectPageSubSection",
            "name": "Subsection with Expand/Collapse",
            "description": "This example shows subsections in expanded and collapsed mode.",
            "entityId": "sap.uxap.ObjectPageSubSection",
            "contexts": {
              "sap.uxap.ObjectPageSubSection": {
                "nextSampleId": "sap.uxap.sample.ObjectPageSubSectionMultiView"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageSubSection/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageSubSectionMultiView",
            "name": "Subsection with automatic layout of blocks",
            "description": "This example shows how blocks can be laid out automatically by the Object Page when their size is not specified.",
            "entityId": "sap.uxap.ObjectPageSubSection",
            "contexts": {
              "sap.uxap.ObjectPageSubSection": {
                "previousSampleId": "sap.uxap.sample.ObjectPageSubSection",
                "nextSampleId": "sap.uxap.sample.ObjectPageSubSectionSized"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageSubSectionMultiView/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageSubSectionSized",
            "name": "Subsection with blocks using column layout",
            "description": "This example shows how the size of the blocks and be either specified or automatic",
            "entityId": "sap.uxap.ObjectPageSubSection",
            "contexts": {
              "sap.uxap.ObjectPageSubSection": {
                "previousSampleId": "sap.uxap.sample.ObjectPageSubSectionMultiView",
                "nextSampleId": "sap.uxap.sample.ObjectPageSubSectionWithActions"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageSubSectionSized/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageSubSectionWithActions",
            "name": "Subsection with Action buttons sample",
            "description": "Example of a subsection displaying action buttons.",
            "entityId": "sap.uxap.ObjectPageSubSection",
            "contexts": {
              "sap.uxap.ObjectPageSubSection": {
                "previousSampleId": "sap.uxap.sample.ObjectPageSubSectionSized"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageSubSectionWithActions/preview"
          }
        ],
        "formFactors": "Cozy",
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page SubSection ObjectPageSubSection Container Subsection with Expand/Collapse This example shows subsections in expanded and collapsed mode. Subsection with automatic layout of blocks This example shows how blocks can be laid out automatically by the Object Page when their size is not specified. Subsection with blocks using column layout This example shows how the size of the blocks and be either specified or automatic Subsection with Action buttons sample Example of a subsection displaying action buttons. Subsection with Expand/Collapse Subsection with automatic layout of blocks Subsection with blocks using column layout Subsection with Action buttons sample",
        "sampleCount": 4,
        "key": "#/entity/sap.uxap.ObjectPageSubSection"
      },
      {
        "id": "sap.uxap.ModelMapping",
        "name": "Object Page Model Mapping",
        "category": "Data Binding",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.uxap.sample.BoundModelMapping",
            "name": "Bound Model Mapping",
            "description": "Use of dynamic bound model mapping",
            "entityId": "sap.uxap.ModelMapping",
            "contexts": {
              "sap.uxap.ModelMapping": {
                "nextSampleId": "sap.uxap.sample.MPModelMapping"
              }
            },
            "key": "#/sample/sap.uxap.sample.BoundModelMapping/preview"
          },
          {
            "id": "sap.uxap.sample.MPModelMapping",
            "name": "Model Mapping",
            "description": "Use of dynamic model mapping",
            "entityId": "sap.uxap.ModelMapping",
            "contexts": {
              "sap.uxap.ModelMapping": {
                "previousSampleId": "sap.uxap.sample.BoundModelMapping"
              }
            },
            "key": "#/sample/sap.uxap.sample.MPModelMapping/preview"
          }
        ],
        "formFactors": "Cozy",
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page Model Mapping ObjectPageModelMapping Data Binding Bound Model Mapping Use of dynamic bound model mapping Model Mapping Use of dynamic model mapping Bound Model Mapping Model Mapping",
        "sampleCount": 2,
        "key": "#/entity/sap.uxap.ModelMapping"
      },
      {
        "id": "sap.uxap.BlockBase",
        "name": "Object Page Block Base",
        "category": "Container",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.uxap.sample.SingleView",
            "name": "Single View sample",
            "description": "Use of implicit static view definition.",
            "entityId": "sap.uxap.BlockBase",
            "contexts": {
              "sap.uxap.BlockBase": {
                "nextSampleId": "sap.uxap.sample.ObjectPageBlockBase"
              }
            },
            "key": "#/sample/sap.uxap.sample.SingleView/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageBlockBase",
            "name": "ObjectPage Blockbase",
            "description": "This example shows the different layout of the blocks based on their ColumnLayout.",
            "entityId": "sap.uxap.BlockBase",
            "contexts": {
              "sap.uxap.BlockBase": {
                "previousSampleId": "sap.uxap.sample.SingleView",
                "nextSampleId": "sap.uxap.sample.BlockBaseBlockInBlock"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageBlockBase/preview"
          },
          {
            "id": "sap.uxap.sample.BlockBaseBlockInBlock",
            "name": "Block in a block",
            "description": "Uses a block in a view of another block",
            "entityId": "sap.uxap.BlockBase",
            "contexts": {
              "sap.uxap.BlockBase": {
                "previousSampleId": "sap.uxap.sample.ObjectPageBlockBase",
                "nextSampleId": "sap.uxap.sample.BlockBaseEventing"
              }
            },
            "key": "#/sample/sap.uxap.sample.BlockBaseBlockInBlock/preview"
          },
          {
            "id": "sap.uxap.sample.BlockBaseEventing",
            "name": "Eventing blocks",
            "description": "Uses of a block that is firing a dummy event",
            "entityId": "sap.uxap.BlockBase",
            "contexts": {
              "sap.uxap.BlockBase": {
                "previousSampleId": "sap.uxap.sample.BlockBaseBlockInBlock"
              }
            },
            "key": "#/sample/sap.uxap.sample.BlockBaseEventing/preview"
          }
        ],
        "formFactors": "Cozy",
        "namespace": "sap.uxap",
        "library": "sap.uxap",
        "searchTags": "Object Page Block Base ObjectPageBlockBase Container Single View sample Use of implicit static view definition. ObjectPage Blockbase This example shows the different layout of the blocks based on their ColumnLayout. Block in a block Uses a block in a view of another block Eventing blocks Uses of a block that is firing a dummy event Single View sample ObjectPage Blockbase Block in a block Eventing blocks",
        "sampleCount": 4,
        "key": "#/entity/sap.uxap.BlockBase"
      },
      {
        "id": "sap.viz.ui5.controls.VizFrame",
        "name": "VizFrame Charts",
        "category": "Data Visualization",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.viz.sample.TimeAxis",
            "name": "All Charts with Time Axis",
            "description": "All charts that support the Time Axis",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "nextSampleId": "sap.viz.sample.Area"
              }
            },
            "key": "#/sample/sap.viz.sample.TimeAxis/preview"
          },
          {
            "id": "sap.viz.sample.Area",
            "name": "Area",
            "description": "Area chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.TimeAxis",
                "nextSampleId": "sap.viz.sample.Bar"
              }
            },
            "key": "#/sample/sap.viz.sample.Area/preview"
          },
          {
            "id": "sap.viz.sample.Bar",
            "name": "Bar",
            "description": "Bar chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Area",
                "nextSampleId": "sap.viz.sample.StackedBar"
              }
            },
            "key": "#/sample/sap.viz.sample.Bar/preview"
          },
          {
            "id": "sap.viz.sample.StackedBar",
            "name": "Stacked Bar",
            "description": "Stacked Bar chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Bar",
                "nextSampleId": "sap.viz.sample.Bubble"
              }
            },
            "key": "#/sample/sap.viz.sample.StackedBar/preview"
          },
          {
            "id": "sap.viz.sample.Bubble",
            "name": "Bubble",
            "description": "Bubble chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.StackedBar",
                "nextSampleId": "sap.viz.sample.VerticalBullet"
              }
            },
            "key": "#/sample/sap.viz.sample.Bubble/preview"
          },
          {
            "id": "sap.viz.sample.VerticalBullet",
            "name": "Bullet - Vertical",
            "description": "Vertical bullet chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Bubble",
                "nextSampleId": "sap.viz.sample.Bullet"
              }
            },
            "key": "#/sample/sap.viz.sample.VerticalBullet/preview"
          },
          {
            "id": "sap.viz.sample.Bullet",
            "name": "Bullet - Horizontal",
            "description": "Horizontal bullet chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.VerticalBullet",
                "nextSampleId": "sap.viz.sample.Column"
              }
            },
            "key": "#/sample/sap.viz.sample.Bullet/preview"
          },
          {
            "id": "sap.viz.sample.Column",
            "name": "Column",
            "description": "Column chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Bullet",
                "nextSampleId": "sap.viz.sample.StackedColumn"
              }
            },
            "key": "#/sample/sap.viz.sample.Column/preview"
          },
          {
            "id": "sap.viz.sample.StackedColumn",
            "name": "Stacked Column",
            "description": "Stacked Column chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Column",
                "nextSampleId": "sap.viz.sample.CombinedColumnLine"
              }
            },
            "key": "#/sample/sap.viz.sample.StackedColumn/preview"
          },
          {
            "id": "sap.viz.sample.CombinedColumnLine",
            "name": "Combined Charts",
            "description": "Column + Line / Stacked Column + Line",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.StackedColumn",
                "nextSampleId": "sap.viz.sample.Donut"
              }
            },
            "key": "#/sample/sap.viz.sample.CombinedColumnLine/preview"
          },
          {
            "id": "sap.viz.sample.Donut",
            "name": "Donut",
            "description": "Donut chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.CombinedColumnLine",
                "nextSampleId": "sap.viz.sample.Heatmap"
              }
            },
            "key": "#/sample/sap.viz.sample.Donut/preview"
          },
          {
            "id": "sap.viz.sample.Heatmap",
            "name": "Heatmap",
            "description": "Heatmap chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Donut",
                "nextSampleId": "sap.viz.sample.Line"
              }
            },
            "key": "#/sample/sap.viz.sample.Heatmap/preview"
          },
          {
            "id": "sap.viz.sample.Line",
            "name": "Line",
            "description": "Line chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Heatmap",
                "nextSampleId": "sap.viz.sample.Pie"
              }
            },
            "key": "#/sample/sap.viz.sample.Line/preview"
          },
          {
            "id": "sap.viz.sample.Pie",
            "name": "Pie",
            "description": "Pie chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Line",
                "nextSampleId": "sap.viz.sample.Radar"
              }
            },
            "key": "#/sample/sap.viz.sample.Pie/preview"
          },
          {
            "id": "sap.viz.sample.Radar",
            "name": "Radar",
            "description": "Radar chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Pie",
                "nextSampleId": "sap.viz.sample.Scatter"
              }
            },
            "key": "#/sample/sap.viz.sample.Radar/preview"
          },
          {
            "id": "sap.viz.sample.Scatter",
            "name": "Scatter",
            "description": "Scatter chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Radar",
                "nextSampleId": "sap.viz.sample.Treemap"
              }
            },
            "key": "#/sample/sap.viz.sample.Scatter/preview"
          },
          {
            "id": "sap.viz.sample.Treemap",
            "name": "Treemap",
            "description": "Treemap chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Scatter",
                "nextSampleId": "sap.viz.sample.VerticalWaterfall"
              }
            },
            "key": "#/sample/sap.viz.sample.Treemap/preview"
          },
          {
            "id": "sap.viz.sample.VerticalWaterfall",
            "name": "Waterfall - Vertical",
            "description": "Vertical Waterfall chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Treemap",
                "nextSampleId": "sap.viz.sample.Waterfall"
              }
            },
            "key": "#/sample/sap.viz.sample.VerticalWaterfall/preview"
          },
          {
            "id": "sap.viz.sample.Waterfall",
            "name": "Waterfall - Horizontal",
            "description": "Horizontal Waterfall chart",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.VerticalWaterfall",
                "nextSampleId": "sap.viz.sample.Format"
              }
            },
            "key": "#/sample/sap.viz.sample.Waterfall/preview"
          },
          {
            "id": "sap.viz.sample.Format",
            "name": "(Cross Feature) Format",
            "description": "Predefined format and registered format for numbers, dates & time ",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Waterfall",
                "nextSampleId": "sap.viz.sample.CustomColor"
              }
            },
            "key": "#/sample/sap.viz.sample.Format/preview"
          },
          {
            "id": "sap.viz.sample.CustomColor",
            "name": "(Cross Feature) Color",
            "description": "How to customize the colors",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Format",
                "nextSampleId": "sap.viz.sample.Pattern"
              }
            },
            "key": "#/sample/sap.viz.sample.CustomColor/preview"
          },
          {
            "id": "sap.viz.sample.Pattern",
            "name": "(Cross Feature) Pattern",
            "description": "Examples dotted & dash line, hatched and empty area",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.CustomColor",
                "nextSampleId": "sap.viz.sample.TimeConfig"
              }
            },
            "key": "#/sample/sap.viz.sample.Pattern/preview"
          },
          {
            "id": "sap.viz.sample.TimeConfig",
            "name": "(Cross Feature) Time Axis",
            "description": "Examples of the time axis configuration",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Pattern",
                "nextSampleId": "sap.viz.sample.TimeHighlightPeriods"
              }
            },
            "key": "#/sample/sap.viz.sample.TimeConfig/preview"
          },
          {
            "id": "sap.viz.sample.TimeHighlightPeriods",
            "name": "(Cross Feature) Time Axis – Highlight Periods",
            "description": "How to set colors to specific periods, or draw vertical lines",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.TimeConfig",
                "nextSampleId": "sap.viz.sample.CustomPopover"
              }
            },
            "key": "#/sample/sap.viz.sample.TimeHighlightPeriods/preview"
          },
          {
            "id": "sap.viz.sample.CustomPopover",
            "name": "(Cross Feature) Popover",
            "description": "How to customize the popover",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.TimeHighlightPeriods",
                "nextSampleId": "sap.viz.sample.DetailsPopover"
              }
            },
            "key": "#/sample/sap.viz.sample.CustomPopover/preview"
          },
          {
            "id": "sap.viz.sample.DetailsPopover",
            "name": "(Cross Feature) Details Popover",
            "description": "Details popover in multiple selection mode",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.CustomPopover",
                "nextSampleId": "sap.viz.sample.ZoomInitialization"
              }
            },
            "key": "#/sample/sap.viz.sample.DetailsPopover/preview"
          },
          {
            "id": "sap.viz.sample.ZoomInitialization",
            "name": "(Cross Feature) Zoom Initialization",
            "description": "How to initialize the zoom level",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.DetailsPopover",
                "nextSampleId": "sap.viz.sample.SelectionByApi"
              }
            },
            "key": "#/sample/sap.viz.sample.ZoomInitialization/preview"
          },
          {
            "id": "sap.viz.sample.SelectionByApi",
            "name": "(Cross Feature) Selection By API",
            "description": "API to have category selection and series selection",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.ZoomInitialization",
                "nextSampleId": "sap.viz.sample.Tooltips"
              }
            },
            "key": "#/sample/sap.viz.sample.SelectionByApi/preview"
          },
          {
            "id": "sap.viz.sample.Tooltips",
            "name": "(Cross Feature) Tooltips",
            "description": "Example of tooltip",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.SelectionByApi",
                "nextSampleId": "sap.viz.sample.Hierarchical"
              }
            },
            "key": "#/sample/sap.viz.sample.Tooltips/preview"
          },
          {
            "id": "sap.viz.sample.Hierarchical",
            "name": "(Cross Feature) Hierarchies",
            "description": "Example of hierarchical categories",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Tooltips",
                "nextSampleId": "sap.viz.sample.ConditionalDataLabel"
              }
            },
            "key": "#/sample/sap.viz.sample.Hierarchical/preview"
          },
          {
            "id": "sap.viz.sample.ConditionalDataLabel",
            "name": "(Cross Feature) Value labels",
            "description": "Display first / last or min / max value labels",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.Hierarchical",
                "nextSampleId": "sap.viz.sample.NegativeValues"
              }
            },
            "key": "#/sample/sap.viz.sample.ConditionalDataLabel/preview"
          },
          {
            "id": "sap.viz.sample.NegativeValues",
            "name": "(Cross Feature) Negative Values",
            "description": "Negative values in different chart types",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.ConditionalDataLabel",
                "nextSampleId": "sap.viz.sample.ReferenceLine"
              }
            },
            "key": "#/sample/sap.viz.sample.NegativeValues/preview"
          },
          {
            "id": "sap.viz.sample.ReferenceLine",
            "name": "(Cross Feature) Reference Line",
            "description": "Reference Line in value axis and time axis",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.NegativeValues",
                "nextSampleId": "sap.viz.sample.RangeSlider"
              }
            },
            "key": "#/sample/sap.viz.sample.ReferenceLine/preview"
          },
          {
            "id": "sap.viz.sample.RangeSlider",
            "name": "(Cross Feature) Range Selector",
            "description": "Select a range within a chart with visual preview",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.ReferenceLine",
                "nextSampleId": "sap.viz.sample.CustomizationApi"
              }
            },
            "key": "#/sample/sap.viz.sample.RangeSlider/preview"
          },
          {
            "id": "sap.viz.sample.CustomizationApi",
            "name": "(Cross Feature) Customization API",
            "description": "Example of chart customization",
            "entityId": "sap.viz.ui5.controls.VizFrame",
            "contexts": {
              "sap.viz.ui5.controls.VizFrame": {
                "previousSampleId": "sap.viz.sample.RangeSlider"
              }
            },
            "key": "#/sample/sap.viz.sample.CustomizationApi/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.viz.ui5.controls",
        "library": "sap.viz",
        "searchTags": "VizFrame Charts VizFrameCharts Data Visualization All Charts with Time Axis All charts that support the Time Axis Area Area chart Bar Bar chart Stacked Bar Stacked Bar chart Bubble Bubble chart Bullet - Vertical Vertical bullet chart Bullet - Horizontal Horizontal bullet chart Column Column chart Stacked Column Stacked Column chart Combined Charts Column + Line / Stacked Column + Line Donut Donut chart Heatmap Heatmap chart Line Line chart Pie Pie chart Radar Radar chart Scatter Scatter chart Treemap Treemap chart Waterfall - Vertical Vertical Waterfall chart Waterfall - Horizontal Horizontal Waterfall chart (Cross Feature) Format Predefined format and registered format for numbers, dates & time  (Cross Feature) Color How to customize the colors (Cross Feature) Pattern Examples dotted & dash line, hatched and empty area (Cross Feature) Time Axis Examples of the time axis configuration (Cross Feature) Time Axis – Highlight Periods How to set colors to specific periods, or draw vertical lines (Cross Feature) Popover How to customize the popover (Cross Feature) Details Popover Details popover in multiple selection mode (Cross Feature) Zoom Initialization How to initialize the zoom level (Cross Feature) Selection By API API to have category selection and series selection (Cross Feature) Tooltips Example of tooltip (Cross Feature) Hierarchies Example of hierarchical categories (Cross Feature) Value labels Display first / last or min / max value labels (Cross Feature) Negative Values Negative values in different chart types (Cross Feature) Reference Line Reference Line in value axis and time axis (Cross Feature) Range Selector Select a range within a chart with visual preview (Cross Feature) Customization API Example of chart customization All Charts with Time Axis Area Bar Stacked Bar Bubble Bullet - Vertical Bullet - Horizontal Column Stacked Column Combined Charts Donut Heatmap Line Pie Radar Scatter Treemap Waterfall - Vertical Waterfall - Horizontal (Cross Feature) Format (Cross Feature) Color (Cross Feature) Pattern (Cross Feature) Time Axis (Cross Feature) Time Axis – Highlight Periods (Cross Feature) Popover (Cross Feature) Details Popover (Cross Feature) Zoom Initialization (Cross Feature) Selection By API (Cross Feature) Tooltips (Cross Feature) Hierarchies (Cross Feature) Value labels (Cross Feature) Negative Values (Cross Feature) Reference Line (Cross Feature) Range Selector (Cross Feature) Customization API",
        "sampleCount": 35,
        "key": "#/entity/sap.viz.ui5.controls.VizFrame"
      },
      {
        "id": "sap.m.ActionSelect",
        "name": "Action Select",
        "category": "User Input",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.m.sample.ActionSelect",
            "name": "Action Select",
            "description": "Illustrates an Action Select with 2 actions.",
            "entityId": "sap.m.ActionSelect",
            "contexts": {
              "sap.m.ActionSelect": {}
            },
            "key": "#/sample/sap.m.sample.ActionSelect/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Action Select ActionSelect User Input Action Select Illustrates an Action Select with 2 actions. Action Select",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ActionSelect"
      },
      {
        "id": "sap.m.ActionSheet",
        "name": "Action Sheet",
        "category": "Action",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.ActionSheet",
            "name": "Action Sheet",
            "description": "Action Sheet provides an easier way of showing a list of actions and allowing the user to select one. Title and cancel buttons can be shown or hidden. Without an icon the entry will still be aligned (see the last action in the list).",
            "entityId": "sap.m.ActionSheet",
            "contexts": {
              "sap.m.ActionSheet": {}
            },
            "key": "#/sample/sap.m.sample.ActionSheet/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Action Sheet ActionSheet Action Action Sheet Action Sheet provides an easier way of showing a list of actions and allowing the user to select one. Title and cancel buttons can be shown or hidden. Without an icon the entry will still be aligned (see the last action in the list). Action Sheet",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ActionSheet"
      },
      {
        "id": "sap.m.ActionListItem",
        "name": "Action List Item",
        "category": "List",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.ActionListItem",
            "name": "Action List Item",
            "description": "Use the Action List Item to trigger an action directly from a list",
            "entityId": "sap.m.ActionListItem",
            "contexts": {
              "sap.m.ActionListItem": {}
            },
            "key": "#/sample/sap.m.sample.ActionListItem/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Action List Item ActionListItem List Action List Item Use the Action List Item to trigger an action directly from a list Action List Item",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ActionListItem"
      },
      {
        "id": "sap.m.Bar",
        "name": "Bar",
        "category": "Container",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.Page",
            "name": "Page,Toolbar and Bar",
            "description": "Each screen of a mobile application is typically represented by a 'Page' consisting of a header, a scrollable content area and optionally a footer. The standard header offers a navigation button and a title. Alternatively you can provide a customer header. Gernerally you should use Toolbars in the Page. If you need a centered title you may use a Bar.",
            "entityId": "sap.m.Page",
            "contexts": {
              "sap.m.Bar": {
                "nextSampleId": "sap.m.sample.ToolbarVsBar"
              },
              "sap.m.Page": {
                "nextSampleId": "sap.m.sample.PageStandardClasses"
              }
            },
            "key": "#/sample/sap.m.sample.Page/preview"
          },
          {
            "id": "sap.m.sample.ToolbarVsBar",
            "name": "Toolbar vs Bar vs OverflowToolbar",
            "description": "Toolbar handles overflow by shrinking items. OverflowToolbar provides an overflow menu. Bar is able to perfectly center a text if nothing overflows.",
            "entityId": "sap.m.Toolbar",
            "contexts": {
              "sap.m.Bar": {
                "previousSampleId": "sap.m.sample.Page"
              },
              "sap.m.Toolbar": {
                "previousSampleId": "sap.m.sample.ToolbarShrinkable"
              }
            },
            "key": "#/sample/sap.m.sample.ToolbarVsBar/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Bar Bar Container Page,Toolbar and Bar Each screen of a mobile application is typically represented by a 'Page' consisting of a header, a scrollable content area and optionally a footer. The standard header offers a navigation button and a title. Alternatively you can provide a customer header. Gernerally you should use Toolbars in the Page. If you need a centered title you may use a Bar. Toolbar vs Bar vs OverflowToolbar Toolbar handles overflow by shrinking items. OverflowToolbar provides an overflow menu. Bar is able to perfectly center a text if nothing overflows. Page,Toolbar and Bar Toolbar vs Bar vs OverflowToolbar",
        "sampleCount": 2,
        "key": "#/entity/sap.m.Bar"
      },
      {
        "id": "sap.m.BusyDialog",
        "name": "Busy Dialog",
        "category": "Popup",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.BusyDialog",
            "name": "Busy Dialog - Standard",
            "description": "A Busy Dialog blocks the user interface until the currently running operation has been finished. No other activities can be started in parallel.",
            "entityId": "sap.m.BusyDialog",
            "contexts": {
              "sap.m.BusyDialog": {
                "nextSampleId": "sap.m.sample.BusyDialogLight"
              }
            },
            "key": "#/sample/sap.m.sample.BusyDialog/preview"
          },
          {
            "id": "sap.m.sample.BusyDialogLight",
            "name": "Busy Dialog - Light",
            "description": "This is a 'light' version of the standard Busy Dialog; it also blocks the user interface until the currently running operation has been finished. It has no UI components, so you must close it programmatically when appropriate.",
            "entityId": "sap.m.BusyDialog",
            "contexts": {
              "sap.m.BusyDialog": {
                "previousSampleId": "sap.m.sample.BusyDialog"
              }
            },
            "key": "#/sample/sap.m.sample.BusyDialogLight/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Busy Dialog BusyDialog Popup Busy Dialog - Standard A Busy Dialog blocks the user interface until the currently running operation has been finished. No other activities can be started in parallel. Busy Dialog - Light This is a 'light' version of the standard Busy Dialog; it also blocks the user interface until the currently running operation has been finished. It has no UI components, so you must close it programmatically when appropriate. Busy Dialog - Standard Busy Dialog - Light",
        "sampleCount": 2,
        "key": "#/entity/sap.m.BusyDialog"
      },
      {
        "id": "sap.m.BusyIndicator",
        "name": "Busy Indicator",
        "category": "Display",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.BusyIndicator",
            "name": "Busy Indicator",
            "description": "The Busy Indicator signals that some operation is going on and that the user must wait. It does not block the current UI screen so other operations could be triggered in parallel.",
            "entityId": "sap.m.BusyIndicator",
            "contexts": {
              "sap.m.BusyIndicator": {}
            },
            "key": "#/sample/sap.m.sample.BusyIndicator/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Busy Indicator BusyIndicator Display Busy Indicator The Busy Indicator signals that some operation is going on and that the user must wait. It does not block the current UI screen so other operations could be triggered in parallel. Busy Indicator",
        "sampleCount": 1,
        "key": "#/entity/sap.m.BusyIndicator"
      },
      {
        "id": "sap.m.Button",
        "name": "Button",
        "category": "Action",
        "since": "1.10",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.Button",
            "name": "Button",
            "description": "Buttons trigger user actions and come in a variety of shapes and colors. Placing a button on a page header or footer changes its appearance.",
            "entityId": "sap.m.Button",
            "contexts": {
              "sap.m.Button": {}
            },
            "key": "#/sample/sap.m.sample.Button/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Button Button Action Button Buttons trigger user actions and come in a variety of shapes and colors. Placing a button on a page header or footer changes its appearance. Button",
        "sampleCount": 1,
        "key": "#/entity/sap.m.Button"
      },
      {
        "id": "sap.m.Breadcrumbs",
        "name": "Breadcrumbs",
        "category": "Action",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.Breadcrumbs",
            "name": "Breadcrumbs sample",
            "description": "Breadcrumbs is useful for displaying link hierarchy",
            "entityId": "sap.m.Breadcrumbs",
            "contexts": {
              "sap.m.Breadcrumbs": {}
            },
            "key": "#/sample/sap.m.sample.Breadcrumbs/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Breadcrumbs Breadcrumbs Action Breadcrumbs sample Breadcrumbs is useful for displaying link hierarchy Breadcrumbs sample",
        "sampleCount": 1,
        "key": "#/entity/sap.m.Breadcrumbs"
      },
      {
        "id": "sap.m.Carousel",
        "name": "Carousel",
        "category": "Container",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.Carousel",
            "name": "Carousel",
            "description": "A sample of a Carousel that contains images.",
            "entityId": "sap.m.Carousel",
            "contexts": {
              "sap.m.Carousel": {
                "nextSampleId": "sap.m.sample.CarouselWithControls"
              }
            },
            "key": "#/sample/sap.m.sample.Carousel/preview"
          },
          {
            "id": "sap.m.sample.CarouselWithControls",
            "name": "Carousel With Controls",
            "description": "With the Carousel a user can browse through multi-page content by swiping left or right.",
            "entityId": "sap.m.Carousel",
            "contexts": {
              "sap.m.Carousel": {
                "previousSampleId": "sap.m.sample.Carousel",
                "nextSampleId": "sap.m.sample.CarouselWithDisplayOptions"
              }
            },
            "key": "#/sample/sap.m.sample.CarouselWithControls/preview"
          },
          {
            "id": "sap.m.sample.CarouselWithDisplayOptions",
            "name": "Carousel With Display Options",
            "description": "The Carousel have options for the arrows placement, page indicator placement and page indicator visibility.",
            "entityId": "sap.m.Carousel",
            "contexts": {
              "sap.m.Carousel": {
                "previousSampleId": "sap.m.sample.CarouselWithControls",
                "nextSampleId": "sap.m.sample.CarouselWithMorePages"
              }
            },
            "key": "#/sample/sap.m.sample.CarouselWithDisplayOptions/preview"
          },
          {
            "id": "sap.m.sample.CarouselWithMorePages",
            "name": "Carousel with Multiple Items at Once",
            "description": "The customLayout aggregation determines how many pages are displayed in Carousel's visible area.",
            "entityId": "sap.m.Carousel",
            "contexts": {
              "sap.m.Carousel": {
                "previousSampleId": "sap.m.sample.CarouselWithDisplayOptions"
              }
            },
            "key": "#/sample/sap.m.sample.CarouselWithMorePages/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Carousel Carousel Container Carousel A sample of a Carousel that contains images. Carousel With Controls With the Carousel a user can browse through multi-page content by swiping left or right. Carousel With Display Options The Carousel have options for the arrows placement, page indicator placement and page indicator visibility. Carousel with Multiple Items at Once The customLayout aggregation determines how many pages are displayed in Carousel's visible area. Carousel Carousel With Controls Carousel With Display Options Carousel with Multiple Items at Once",
        "sampleCount": 4,
        "key": "#/entity/sap.m.Carousel"
      },
      {
        "id": "sap.m.CheckBox",
        "name": "Check Box",
        "category": "User Input",
        "since": "1.10",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.CheckBox",
            "name": "Check Box",
            "description": "Checkboxes allow users to select a subset of options. If you want to offer an off/on setting you should use the Switch control instead.",
            "entityId": "sap.m.CheckBox",
            "contexts": {
              "sap.m.CheckBox": {
                "nextSampleId": "sap.m.sample.CheckBoxTriState"
              }
            },
            "key": "#/sample/sap.m.sample.CheckBox/preview"
          },
          {
            "id": "sap.m.sample.CheckBoxTriState",
            "name": "Tri-State Check Box",
            "description": "In this sample, the CheckBox reflects the selection states of its dependent input fields - selected, not selected, and partially selected.",
            "entityId": "sap.m.CheckBox",
            "contexts": {
              "sap.m.CheckBox": {
                "previousSampleId": "sap.m.sample.CheckBox"
              }
            },
            "key": "#/sample/sap.m.sample.CheckBoxTriState/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Check Box CheckBox User Input Check Box Checkboxes allow users to select a subset of options. If you want to offer an off/on setting you should use the Switch control instead. Tri-State Check Box In this sample, the CheckBox reflects the selection states of its dependent input fields - selected, not selected, and partially selected. Check Box Tri-State Check Box",
        "sampleCount": 2,
        "key": "#/entity/sap.m.CheckBox"
      },
      {
        "id": "sap.m.Column",
        "name": "Column",
        "category": "List",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.Table",
            "name": "Table - Columns",
            "description": "The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Column": {},
              "sap.m.ColumnListItem": {
                "nextSampleId": "sap.m.sample.TableTest"
              },
              "sap.m.ObjectIdentifier": {
                "previousSampleId": "sap.m.sample.ObjectIdentifier"
              },
              "sap.m.ObjectNumber": {
                "previousSampleId": "sap.m.sample.ObjectNumber"
              },
              "sap.m.Table": {
                "nextSampleId": "sap.m.sample.TableColumnWidth"
              }
            },
            "key": "#/sample/sap.m.sample.Table/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Column Column List Table - Columns The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options. Table - Columns",
        "sampleCount": 1,
        "key": "#/entity/sap.m.Column"
      },
      {
        "id": "sap.m.ComboBox",
        "name": "ComboBox",
        "category": "User Input",
        "since": "1.22",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.ComboBox",
            "name": "Combo box",
            "description": "The combo box control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "nextSampleId": "sap.m.sample.ComboBox2Columns"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBox/preview"
          },
          {
            "id": "sap.m.sample.ComboBox2Columns",
            "name": "Combo box - Two columns layout",
            "description": "Use the combo box dropdown list with two columns layout if you need to display additional information to your options, like e.g. currencies to countries or abbreviations to systems.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBox",
                "nextSampleId": "sap.m.sample.ComboBoxLazyLoading"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBox2Columns/preview"
          },
          {
            "id": "sap.m.sample.ComboBoxLazyLoading",
            "name": "Combo box - Lazy loading",
            "description": "Use this feature to defer initialization of items until the point at which the items are needed. It can improve performance, reduce memory usage and unnecessary client/server round-trips.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBox2Columns",
                "nextSampleId": "sap.m.sample.ComboBoxSearchBoth"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBoxLazyLoading/preview"
          },
          {
            "id": "sap.m.sample.ComboBoxSearchBoth",
            "name": "Combo box - Search in both columns",
            "description": "Combo box dropdown list with search functionality which checks both columns. When you need to display additional information on your options, like e.g. keys of countries or system abbreviations, and want to search in those as well.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBoxLazyLoading",
                "nextSampleId": "sap.m.sample.ComboBoxDefaultFiltering"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBoxSearchBoth/preview"
          },
          {
            "id": "sap.m.sample.ComboBoxDefaultFiltering",
            "name": "Combo box - Default Filtering",
            "description": "The default filtering is 'starts with per term', which filters by the beginning of every word in every column. Autocomplete (type-ahead) works only for the first column, the leading value.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBoxSearchBoth",
                "nextSampleId": "sap.m.sample.ComboBoxFilteringContains"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBoxDefaultFiltering/preview"
          },
          {
            "id": "sap.m.sample.ComboBoxFilteringContains",
            "name": "Combo box - Custom filtering \"Contains\"",
            "description": "You can override the default filtering \"Starts with per term\" with your own filter function using the setFilterFunction method. The \"Contains\" approach searches everywhere in the entries.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBoxDefaultFiltering",
                "nextSampleId": "sap.m.sample.ComboBoxFilteringStartsWith"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBoxFilteringContains/preview"
          },
          {
            "id": "sap.m.sample.ComboBoxFilteringStartsWith",
            "name": "Combo box - Custom filtering \"Starts with\"",
            "description": "You can override the default filtering \"Starts with per term\" with your own filter function using the setFilterFunction method. The \"Starts with\" approach searches only in the beginning of the entries in both columns.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBoxFilteringContains",
                "nextSampleId": "sap.m.sample.ComboBoxGrouping"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBoxFilteringStartsWith/preview"
          },
          {
            "id": "sap.m.sample.ComboBoxGrouping",
            "name": "ComboBox - Grouping of items",
            "description": "Items in the ComboBox could be grouped by a property",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBoxFilteringStartsWith",
                "nextSampleId": "sap.m.sample.ComboBoxValidation"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBoxGrouping/preview"
          },
          {
            "id": "sap.m.sample.ComboBoxValidation",
            "name": "ComboBox - Validation",
            "description": "The combo box control could be restricted to allow selection only from the items in the list.",
            "entityId": "sap.m.ComboBox",
            "contexts": {
              "sap.m.ComboBox": {
                "previousSampleId": "sap.m.sample.ComboBoxGrouping"
              }
            },
            "key": "#/sample/sap.m.sample.ComboBoxValidation/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "ComboBox ComboBox User Input Combo box The combo box control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items. Combo box - Two columns layout Use the combo box dropdown list with two columns layout if you need to display additional information to your options, like e.g. currencies to countries or abbreviations to systems. Combo box - Lazy loading Use this feature to defer initialization of items until the point at which the items are needed. It can improve performance, reduce memory usage and unnecessary client/server round-trips. Combo box - Search in both columns Combo box dropdown list with search functionality which checks both columns. When you need to display additional information on your options, like e.g. keys of countries or system abbreviations, and want to search in those as well. Combo box - Default Filtering The default filtering is 'starts with per term', which filters by the beginning of every word in every column. Autocomplete (type-ahead) works only for the first column, the leading value. Combo box - Custom filtering \"Contains\" You can override the default filtering \"Starts with per term\" with your own filter function using the setFilterFunction method. The \"Contains\" approach searches everywhere in the entries. Combo box - Custom filtering \"Starts with\" You can override the default filtering \"Starts with per term\" with your own filter function using the setFilterFunction method. The \"Starts with\" approach searches only in the beginning of the entries in both columns. ComboBox - Grouping of items Items in the ComboBox could be grouped by a property ComboBox - Validation The combo box control could be restricted to allow selection only from the items in the list. Combo box Combo box - Two columns layout Combo box - Lazy loading Combo box - Search in both columns Combo box - Default Filtering Combo box - Custom filtering \"Contains\" Combo box - Custom filtering \"Starts with\" ComboBox - Grouping of items ComboBox - Validation",
        "sampleCount": 9,
        "key": "#/entity/sap.m.ComboBox"
      },
      {
        "id": "sap.m.ColumnListItem",
        "name": "Column List Item",
        "category": "List",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.Table",
            "name": "Table - Columns",
            "description": "The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Column": {},
              "sap.m.ColumnListItem": {
                "nextSampleId": "sap.m.sample.TableTest"
              },
              "sap.m.ObjectIdentifier": {
                "previousSampleId": "sap.m.sample.ObjectIdentifier"
              },
              "sap.m.ObjectNumber": {
                "previousSampleId": "sap.m.sample.ObjectNumber"
              },
              "sap.m.Table": {
                "nextSampleId": "sap.m.sample.TableColumnWidth"
              }
            },
            "key": "#/sample/sap.m.sample.Table/preview"
          },
          {
            "id": "sap.m.sample.TableTest",
            "name": "Table Test with OPA",
            "description": "The following example simulates a click on a list item in a table.",
            "entityId": "sap.m.ColumnListItem",
            "contexts": {
              "sap.m.ColumnListItem": {
                "previousSampleId": "sap.m.sample.Table"
              }
            },
            "key": "#/sample/sap.m.sample.TableTest/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Column List Item ColumnListItem List Table - Columns The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options. Table Test with OPA The following example simulates a click on a list item in a table. Table - Columns Table Test with OPA",
        "sampleCount": 2,
        "key": "#/entity/sap.m.ColumnListItem"
      },
      {
        "id": "sap.m.CustomListItem",
        "name": "Custom List Item",
        "category": "List",
        "since": "1.10",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.CustomListItem",
            "name": "Custom List Item",
            "description": "With the Custom List Item you can add any kind of content to lists.",
            "entityId": "sap.m.CustomListItem",
            "contexts": {
              "sap.m.CustomListItem": {}
            },
            "key": "#/sample/sap.m.sample.CustomListItem/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Custom List Item CustomListItem List Custom List Item With the Custom List Item you can add any kind of content to lists. Custom List Item",
        "sampleCount": 1,
        "key": "#/entity/sap.m.CustomListItem"
      },
      {
        "id": "sap.m.ComparisonPattern",
        "name": "Comparison Pattern",
        "category": "Display",
        "since": "1.63",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.ComparisonPattern",
            "name": "Comparison Pattern",
            "description": "The pattern allows users to select multiple items from an sap.m.Table and display information about them in a structured way - all items are displayed next to each other for easy comparison, based on their specifics.",
            "entityId": "sap.m.ComparisonPattern",
            "contexts": {
              "sap.m.ComparisonPattern": {}
            },
            "key": "#/sample/sap.m.sample.ComparisonPattern/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Comparison Pattern ComparisonPattern Display Comparison Pattern The pattern allows users to select multiple items from an sap.m.Table and display information about them in a structured way - all items are displayed next to each other for easy comparison, based on their specifics. Comparison Pattern",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ComparisonPattern"
      },
      {
        "id": "sap.m.CustomTreeItem",
        "name": "Custom Tree Item",
        "category": "List",
        "since": "1.48",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.CustomTreeItem",
            "name": "Custom Tree Item",
            "description": "With the Custom Tree Item you can add any kind of content to Tree.",
            "entityId": "sap.m.CustomTreeItem",
            "contexts": {
              "sap.m.CustomTreeItem": {}
            },
            "key": "#/sample/sap.m.sample.CustomTreeItem/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Custom Tree Item CustomTreeItem List Custom Tree Item With the Custom Tree Item you can add any kind of content to Tree. Custom Tree Item",
        "sampleCount": 1,
        "key": "#/entity/sap.m.CustomTreeItem"
      },
      {
        "id": "sap.m.DatePicker",
        "name": "Date Picker",
        "category": "User Input",
        "since": "1.22",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.DatePicker",
            "name": "Date Picker",
            "description": "The Date Picker is an extension of the Input control and is dedicated to Date.",
            "entityId": "sap.m.DatePicker",
            "contexts": {
              "sap.m.DatePicker": {
                "nextSampleId": "sap.m.sample.DatePickerMassEdit"
              }
            },
            "key": "#/sample/sap.m.sample.DatePicker/preview"
          },
          {
            "id": "sap.m.sample.DatePickerMassEdit",
            "name": "Date Picker Mass Editing Scenario",
            "description": "Using calendar in a dialog for changing dates in mass editing scenario.",
            "entityId": "sap.m.DatePicker",
            "contexts": {
              "sap.m.DatePicker": {
                "previousSampleId": "sap.m.sample.DatePicker"
              }
            },
            "key": "#/sample/sap.m.sample.DatePickerMassEdit/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Date Picker DatePicker User Input Date Picker The Date Picker is an extension of the Input control and is dedicated to Date. Date Picker Mass Editing Scenario Using calendar in a dialog for changing dates in mass editing scenario. Date Picker Date Picker Mass Editing Scenario",
        "sampleCount": 2,
        "key": "#/entity/sap.m.DatePicker"
      },
      {
        "id": "sap.m.DateRangeSelection",
        "name": "Date Range Selection",
        "category": "User Input",
        "since": "1.22",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.DateRangeSelection",
            "name": "Date Range Selection",
            "description": "The Date Range Selection is an extension of the Date Picker Control and enables the user to select range of dates.",
            "entityId": "sap.m.DateRangeSelection",
            "contexts": {
              "sap.m.DateRangeSelection": {}
            },
            "key": "#/sample/sap.m.sample.DateRangeSelection/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Date Range Selection DateRangeSelection User Input Date Range Selection The Date Range Selection is an extension of the Date Picker Control and enables the user to select range of dates. Date Range Selection",
        "sampleCount": 1,
        "key": "#/entity/sap.m.DateRangeSelection"
      },
      {
        "id": "sap.m.DateTimeInput",
        "name": "Date Time Input",
        "category": "User Input",
        "since": "1.10",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.DateTimeInput",
            "name": "Date Time Input",
            "description": "The Date & Time Input control allows input of dates and times using date and time pickers. [Deprecated since 1.32.8]",
            "entityId": "sap.m.DateTimeInput",
            "contexts": {
              "sap.m.DateTimeInput": {}
            },
            "key": "#/sample/sap.m.sample.DateTimeInput/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Date Time Input DateTimeInput User Input Date Time Input The Date & Time Input control allows input of dates and times using date and time pickers. [Deprecated since 1.32.8] Date Time Input",
        "sampleCount": 1,
        "key": "#/entity/sap.m.DateTimeInput"
      },
      {
        "id": "sap.m.DateTimePicker",
        "name": "Date Time Picker",
        "category": "User Input",
        "since": "1.38",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.DateTimePicker",
            "name": "Date Time Picker",
            "description": "With the DateTimePicker a Date can be entered or selected including the time part.",
            "entityId": "sap.m.DateTimePicker",
            "contexts": {
              "sap.m.DateTimePicker": {}
            },
            "key": "#/sample/sap.m.sample.DateTimePicker/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Date Time Picker DateTimePicker User Input Date Time Picker With the DateTimePicker a Date can be entered or selected including the time part. Date Time Picker",
        "sampleCount": 1,
        "key": "#/entity/sap.m.DateTimePicker"
      },
      {
        "id": "sap.m.TimePickerSliders",
        "name": "Time Picker Sliders",
        "category": "User Input",
        "since": "1.54",
        "samples": [
          {
            "id": "sap.m.sample.TimePickerSliders",
            "name": "Time Picker Sliders",
            "description": "TimePickerSliders used in a Dialog.",
            "entityId": "sap.m.TimePickerSliders",
            "contexts": {
              "sap.m.TimePickerSliders": {}
            },
            "key": "#/sample/sap.m.sample.TimePickerSliders/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Time Picker Sliders TimePickerSliders User Input Time Picker Sliders TimePickerSliders used in a Dialog. Time Picker Sliders",
        "sampleCount": 1,
        "key": "#/entity/sap.m.TimePickerSliders"
      },
      {
        "id": "sap.m.Dialog",
        "name": "Dialog",
        "category": "Popup",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.Dialog",
            "name": "Dialog",
            "description": "Typically a Dialog prompts the user for decisions or additional information required by the application. The content of a dialog is fully customizable. If you want to highlight important information you should use the special type of 'Message Dialog'.",
            "entityId": "sap.m.Dialog",
            "contexts": {
              "sap.m.Dialog": {
                "nextSampleId": "sap.m.sample.DialogMessage"
              }
            },
            "key": "#/sample/sap.m.sample.Dialog/preview"
          },
          {
            "id": "sap.m.sample.DialogMessage",
            "name": "Message Dialog",
            "description": "Creating a dialog for showing UI messages. The possible messages types are: 'None', 'Success', 'Warning' and 'Error'.",
            "entityId": "sap.m.Dialog",
            "contexts": {
              "sap.m.Dialog": {
                "previousSampleId": "sap.m.sample.Dialog",
                "nextSampleId": "sap.m.sample.DialogConfirm"
              }
            },
            "key": "#/sample/sap.m.sample.DialogMessage/preview"
          },
          {
            "id": "sap.m.sample.DialogConfirm",
            "name": "Dialog With Confirm Options",
            "description": "Creating a dialog with confirm and reject options that replaces the confirmDialog functionality.",
            "entityId": "sap.m.Dialog",
            "contexts": {
              "sap.m.Dialog": {
                "previousSampleId": "sap.m.sample.DialogMessage"
              }
            },
            "key": "#/sample/sap.m.sample.DialogConfirm/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Dialog Dialog Popup Dialog Typically a Dialog prompts the user for decisions or additional information required by the application. The content of a dialog is fully customizable. If you want to highlight important information you should use the special type of 'Message Dialog'. Message Dialog Creating a dialog for showing UI messages. The possible messages types are: 'None', 'Success', 'Warning' and 'Error'. Dialog With Confirm Options Creating a dialog with confirm and reject options that replaces the confirmDialog functionality. Dialog Message Dialog Dialog With Confirm Options",
        "sampleCount": 3,
        "key": "#/entity/sap.m.Dialog"
      },
      {
        "id": "sap.m.SlideTile",
        "name": "Slide Tile",
        "category": "Container",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.SlideTile",
            "name": "Slide Tile",
            "description": "Shows Generic Tile with the 2x1 frame type displayed as sliding tiles.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.SlideTile": {},
              "sap.m.GenericTile": {
                "previousSampleId": "sap.m.sample.GenericTileAsFeedTile",
                "nextSampleId": "sap.m.sample.GenericTileLineMode"
              }
            },
            "key": "#/sample/sap.m.sample.SlideTile/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Slide Tile SlideTile Container Slide Tile Shows Generic Tile with the 2x1 frame type displayed as sliding tiles. Slide Tile",
        "sampleCount": 1,
        "key": "#/entity/sap.m.SlideTile"
      },
      {
        "id": "sap.m.NotificationListItem",
        "name": "Notification List Item",
        "category": "List",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.NotificationListItem",
            "name": "Notification List Item",
            "description": "A list item suitable for showing notifications to the user.",
            "entityId": "sap.m.NotificationListItem",
            "contexts": {
              "sap.m.NotificationListItem": {}
            },
            "key": "#/sample/sap.m.sample.NotificationListItem/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Notification List Item NotificationListItem List Notification List Item A list item suitable for showing notifications to the user. Notification List Item",
        "sampleCount": 1,
        "key": "#/entity/sap.m.NotificationListItem"
      },
      {
        "id": "sap.m.NotificationListGroup",
        "name": "Notification List Group",
        "category": "List",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.NotificationListGroup",
            "name": "Notification List Group",
            "description": "A control suitable for grouping notifications.",
            "entityId": "sap.m.NotificationListGroup",
            "contexts": {
              "sap.m.NotificationListGroup": {
                "nextSampleId": "sap.m.sample.NotificationListGroupBindings"
              }
            },
            "key": "#/sample/sap.m.sample.NotificationListGroup/preview"
          },
          {
            "id": "sap.m.sample.NotificationListGroupBindings",
            "name": "Notification List Group with data bindings",
            "description": "A control suitable for grouping notifications. The sample uses JSON data bindings.",
            "entityId": "sap.m.NotificationListGroup",
            "contexts": {
              "sap.m.NotificationListGroup": {
                "previousSampleId": "sap.m.sample.NotificationListGroup",
                "nextSampleId": "sap.m.sample.NotificationListGroupLazyLoading"
              }
            },
            "key": "#/sample/sap.m.sample.NotificationListGroupBindings/preview"
          },
          {
            "id": "sap.m.sample.NotificationListGroupLazyLoading",
            "name": "Notification List Group with lazy loading of the notifications",
            "description": "Notification List Group with lazy loading of the notifications.",
            "entityId": "sap.m.NotificationListGroup",
            "contexts": {
              "sap.m.NotificationListGroup": {
                "previousSampleId": "sap.m.sample.NotificationListGroupBindings",
                "nextSampleId": "sap.m.sample.MaxNumberOfNotificationsReached"
              }
            },
            "key": "#/sample/sap.m.sample.NotificationListGroupLazyLoading/preview"
          },
          {
            "id": "sap.m.sample.MaxNumberOfNotificationsReached",
            "name": "Notification List Group with max number of notifications reached",
            "description": "Notification List Group with max number of notifications reached. The group will render the max amount of notificatons, depending on device type allowed and then show a warning messge.",
            "entityId": "sap.m.NotificationListGroup",
            "contexts": {
              "sap.m.NotificationListGroup": {
                "previousSampleId": "sap.m.sample.NotificationListGroupLazyLoading"
              }
            },
            "key": "#/sample/sap.m.sample.MaxNumberOfNotificationsReached/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Notification List Group NotificationListGroup List Notification List Group A control suitable for grouping notifications. Notification List Group with data bindings A control suitable for grouping notifications. The sample uses JSON data bindings. Notification List Group with lazy loading of the notifications Notification List Group with lazy loading of the notifications. Notification List Group with max number of notifications reached Notification List Group with max number of notifications reached. The group will render the max amount of notificatons, depending on device type allowed and then show a warning messge. Notification List Group Notification List Group with data bindings Notification List Group with lazy loading of the notifications Notification List Group with max number of notifications reached",
        "sampleCount": 4,
        "key": "#/entity/sap.m.NotificationListGroup"
      },
      {
        "id": "sap.m.DisplayListItem",
        "name": "Display List Item",
        "category": "List",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.DisplayListItem",
            "name": "Display List Item",
            "description": "Use the Display List Item for showing name/value pairs.",
            "entityId": "sap.m.DisplayListItem",
            "contexts": {
              "sap.m.DisplayListItem": {}
            },
            "key": "#/sample/sap.m.sample.DisplayListItem/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Display List Item DisplayListItem List Display List Item Use the Display List Item for showing name/value pairs. Display List Item",
        "sampleCount": 1,
        "key": "#/entity/sap.m.DisplayListItem"
      },
      {
        "id": "sap.m.DraftIndicator",
        "name": "Draft Indicator",
        "category": "Display",
        "since": "1.32",
        "samples": [
          {
            "id": "sap.m.sample.DraftIndicator",
            "name": "Draft Indicator",
            "description": "The Draft Indicator shows that eighter currently a draft is saving or that it is already saved. It does not block the current UI screen so other operations could be triggered in parallel.",
            "entityId": "sap.m.DraftIndicator",
            "contexts": {
              "sap.m.DraftIndicator": {
                "nextSampleId": "sap.m.sample.SemanticPageDraftIndicator"
              }
            },
            "key": "#/sample/sap.m.sample.DraftIndicator/preview"
          },
          {
            "id": "sap.m.sample.SemanticPageDraftIndicator",
            "name": "Semantic Page using Draft Indicator",
            "description": "Integration of Draft Indicator inside Semantic Page",
            "entityId": "sap.m.semantic.SemanticPage",
            "contexts": {
              "sap.m.DraftIndicator": {
                "previousSampleId": "sap.m.sample.DraftIndicator"
              },
              "sap.m.semantic.SemanticPage": {
                "previousSampleId": "sap.m.sample.SemanticPageFullScreen",
                "nextSampleId": "sap.m.sample.SemanticPageFloatingFooter"
              }
            },
            "key": "#/sample/sap.m.sample.SemanticPageDraftIndicator/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Draft Indicator DraftIndicator Display Draft Indicator The Draft Indicator shows that eighter currently a draft is saving or that it is already saved. It does not block the current UI screen so other operations could be triggered in parallel. Semantic Page using Draft Indicator Integration of Draft Indicator inside Semantic Page Draft Indicator Semantic Page using Draft Indicator",
        "sampleCount": 2,
        "key": "#/entity/sap.m.DraftIndicator"
      },
      {
        "id": "sap.m.FacetFilter",
        "name": "Facet Filter",
        "category": "User Input",
        "since": "1.12",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.FacetFilterLight",
            "name": "Facet Filter - Light",
            "description": "This is a 'Light' version of the Facet Filter. It is for small displays where only a selectable summary bar is shown, and a dialog is shown for setting the facet values.",
            "entityId": "sap.m.FacetFilter",
            "contexts": {
              "sap.m.FacetFilter": {
                "nextSampleId": "sap.m.sample.FacetFilterSimple"
              }
            },
            "key": "#/sample/sap.m.sample.FacetFilterLight/preview"
          },
          {
            "id": "sap.m.sample.FacetFilterSimple",
            "name": "Facet Filter - Simple",
            "description": "With the Facet Filter you can offer multiple filters ('facets') to assist the user in narrowing down the data in, say, a table. With this default 'Simple' type, each filter is displayed in a row for selection.",
            "entityId": "sap.m.FacetFilter",
            "contexts": {
              "sap.m.FacetFilter": {
                "previousSampleId": "sap.m.sample.FacetFilterLight"
              }
            },
            "key": "#/sample/sap.m.sample.FacetFilterSimple/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Facet Filter FacetFilter User Input Facet Filter - Light This is a 'Light' version of the Facet Filter. It is for small displays where only a selectable summary bar is shown, and a dialog is shown for setting the facet values. Facet Filter - Simple With the Facet Filter you can offer multiple filters ('facets') to assist the user in narrowing down the data in, say, a table. With this default 'Simple' type, each filter is displayed in a row for selection. Facet Filter - Light Facet Filter - Simple",
        "sampleCount": 2,
        "key": "#/entity/sap.m.FacetFilter"
      },
      {
        "id": "sap.m.FeedInput",
        "name": "Feed Input",
        "category": "Display",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.m.sample.FeedInput",
            "name": "Feed Input",
            "description": "This sample shows a standalone feed input with different settings.",
            "entityId": "sap.m.FeedInput",
            "contexts": {
              "sap.m.FeedInput": {
                "nextSampleId": "sap.m.sample.Feed"
              }
            },
            "key": "#/sample/sap.m.sample.FeedInput/preview"
          },
          {
            "id": "sap.m.sample.Feed",
            "name": "Feed",
            "description": "This sample shows you how to build a complete feed user interface by combining a FeedInput with a list of FeedListItems.",
            "entityId": "sap.m.FeedListItem",
            "contexts": {
              "sap.m.FeedInput": {
                "previousSampleId": "sap.m.sample.FeedInput"
              },
              "sap.m.FeedListItem": {
                "previousSampleId": "sap.m.sample.FeedListItem"
              }
            },
            "key": "#/sample/sap.m.sample.Feed/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Feed Input FeedInput Display Feed Input This sample shows a standalone feed input with different settings. Feed This sample shows you how to build a complete feed user interface by combining a FeedInput with a list of FeedListItems. Feed Input Feed",
        "sampleCount": 2,
        "key": "#/entity/sap.m.FeedInput"
      },
      {
        "id": "sap.m.FeedListItem",
        "name": "Feed List Item",
        "category": "List",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.FeedListItem",
            "name": "Feed List Item",
            "description": "The Feed List Item provides a standard UI for 'feeds' where multiple users publish information on regular basis on a certain topic.",
            "entityId": "sap.m.FeedListItem",
            "contexts": {
              "sap.m.FeedListItem": {
                "nextSampleId": "sap.m.sample.Feed"
              }
            },
            "key": "#/sample/sap.m.sample.FeedListItem/preview"
          },
          {
            "id": "sap.m.sample.Feed",
            "name": "Feed",
            "description": "This sample shows you how to build a complete feed user interface by combining a FeedInput with a list of FeedListItems.",
            "entityId": "sap.m.FeedListItem",
            "contexts": {
              "sap.m.FeedInput": {
                "previousSampleId": "sap.m.sample.FeedInput"
              },
              "sap.m.FeedListItem": {
                "previousSampleId": "sap.m.sample.FeedListItem"
              }
            },
            "key": "#/sample/sap.m.sample.Feed/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Feed List Item FeedListItem List Feed List Item The Feed List Item provides a standard UI for 'feeds' where multiple users publish information on regular basis on a certain topic. Feed This sample shows you how to build a complete feed user interface by combining a FeedInput with a list of FeedListItems. Feed List Item Feed",
        "sampleCount": 2,
        "key": "#/entity/sap.m.FeedListItem"
      },
      {
        "id": "sap.m.FlexBox",
        "name": "Flex Box",
        "category": "Layout",
        "since": "1.10",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.FlexBoxBasicAlignment",
            "name": "Flex Box - Basic Alignment",
            "description": "Flex Box items can be placed in different areas using the justifyContent and alignItem properties.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "nextSampleId": "sap.m.sample.FlexBoxCols"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxBasicAlignment/preview"
          },
          {
            "id": "sap.m.sample.FlexBoxCols",
            "name": "Flex Box - Equal Height Cols",
            "description": "You can create balanced areas with Flex Box, such as these columns with equal height regardless of content.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "previousSampleId": "sap.m.sample.FlexBoxBasicAlignment",
                "nextSampleId": "sap.m.sample.FlexBoxDirectionOrder"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxCols/preview"
          },
          {
            "id": "sap.m.sample.FlexBoxDirectionOrder",
            "name": "Flex Box - Direction & Order",
            "description": "You can influence the direction and order of elements in horizontal and vertical Flex Box controls with the direction property.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "previousSampleId": "sap.m.sample.FlexBoxCols",
                "nextSampleId": "sap.m.sample.FlexBoxNav"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxDirectionOrder/preview"
          },
          {
            "id": "sap.m.sample.FlexBoxNav",
            "name": "Flex Box - Navigation Examples",
            "description": "Here is an example of how you can use navigation items as unordered list items in a Flex Box.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "previousSampleId": "sap.m.sample.FlexBoxDirectionOrder",
                "nextSampleId": "sap.m.sample.FlexBoxNested"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxNav/preview"
          },
          {
            "id": "sap.m.sample.FlexBoxNested",
            "name": "Flex Box - Nested",
            "description": "Flex Boxes can be nested. Remember also that HBox and VBox are 'convenience' controls based on the Flex Box control.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "previousSampleId": "sap.m.sample.FlexBoxNav",
                "nextSampleId": "sap.m.sample.FlexBoxOpposingAlignment"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxNested/preview"
          },
          {
            "id": "sap.m.sample.FlexBoxOpposingAlignment",
            "name": "Flex Box - Opposing Alignment",
            "description": "In this Flex Box the items are aligned at opposing ends of the container with justifyContent set to 'SpaceBetween'.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "previousSampleId": "sap.m.sample.FlexBoxNested",
                "nextSampleId": "sap.m.sample.FlexBoxSizeAdjustments"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxOpposingAlignment/preview"
          },
          {
            "id": "sap.m.sample.FlexBoxSizeAdjustments",
            "name": "Flex Box - Size Adjustments",
            "description": "Automatic size adjustments can be achieved for Flex Items with the use of Flex Item Data settings on the contained controls.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "previousSampleId": "sap.m.sample.FlexBoxOpposingAlignment",
                "nextSampleId": "sap.m.sample.FlexBoxRenderType"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxSizeAdjustments/preview"
          },
          {
            "id": "sap.m.sample.FlexBoxRenderType",
            "name": "Flex Box - Render Type",
            "description": "Flex items can be rendered differently. By default, they are wrapped in a <div> element. Optionally, the bare controls can be rendered directly. This can affect the resulting layout.",
            "entityId": "sap.m.FlexBox",
            "contexts": {
              "sap.m.FlexBox": {
                "previousSampleId": "sap.m.sample.FlexBoxSizeAdjustments"
              }
            },
            "key": "#/sample/sap.m.sample.FlexBoxRenderType/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Flex Box FlexBox Layout Flex Box - Basic Alignment Flex Box items can be placed in different areas using the justifyContent and alignItem properties. Flex Box - Equal Height Cols You can create balanced areas with Flex Box, such as these columns with equal height regardless of content. Flex Box - Direction & Order You can influence the direction and order of elements in horizontal and vertical Flex Box controls with the direction property. Flex Box - Navigation Examples Here is an example of how you can use navigation items as unordered list items in a Flex Box. Flex Box - Nested Flex Boxes can be nested. Remember also that HBox and VBox are 'convenience' controls based on the Flex Box control. Flex Box - Opposing Alignment In this Flex Box the items are aligned at opposing ends of the container with justifyContent set to 'SpaceBetween'. Flex Box - Size Adjustments Automatic size adjustments can be achieved for Flex Items with the use of Flex Item Data settings on the contained controls. Flex Box - Render Type Flex items can be rendered differently. By default, they are wrapped in a <div> element. Optionally, the bare controls can be rendered directly. This can affect the resulting layout. Flex Box - Basic Alignment Flex Box - Equal Height Cols Flex Box - Direction & Order Flex Box - Navigation Examples Flex Box - Nested Flex Box - Opposing Alignment Flex Box - Size Adjustments Flex Box - Render Type",
        "sampleCount": 8,
        "key": "#/entity/sap.m.FlexBox"
      },
      {
        "id": "sap.m.FormattedText",
        "name": "Formatted Text",
        "category": "Display",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.m.sample.FormattedText",
            "name": "Formatted Text",
            "description": "The control can be used for embedding formatted HTML text into your application.",
            "entityId": "sap.m.FormattedText",
            "contexts": {
              "sap.m.FormattedText": {}
            },
            "key": "#/sample/sap.m.sample.FormattedText/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Formatted Text FormattedText Display Formatted Text The control can be used for embedding formatted HTML text into your application. Formatted Text",
        "sampleCount": 1,
        "key": "#/entity/sap.m.FormattedText"
      },
      {
        "id": "sap.m.UploadCollection",
        "name": "Upload Collection",
        "category": "Action",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.m.sample.UploadCollection",
            "name": "Upload Collection - Instant Upload",
            "description": "This control allows you to upload single or multiple files from their devices (desktop, tablet or smartphone) and attach them to the application immediately. The selection and upload process is completed in one step and is automatically triggered by the UploadCollection control.",
            "entityId": "sap.m.UploadCollection",
            "contexts": {
              "sap.m.UploadCollection": {
                "nextSampleId": "sap.m.sample.UploadCollectionForPendingUpload"
              }
            },
            "key": "#/sample/sap.m.sample.UploadCollection/preview"
          },
          {
            "id": "sap.m.sample.UploadCollectionForPendingUpload",
            "name": "Upload Collection - Upload Pending",
            "description": "You can use this UploadCollection scenario to select single or mutliple files and to add them to the upload list first. In a second step, the application can upload the selected files by calling the upload() function.",
            "entityId": "sap.m.UploadCollection",
            "contexts": {
              "sap.m.UploadCollection": {
                "previousSampleId": "sap.m.sample.UploadCollection",
                "nextSampleId": "sap.m.sample.UploadCollectionVersioning"
              }
            },
            "key": "#/sample/sap.m.sample.UploadCollectionForPendingUpload/preview"
          },
          {
            "id": "sap.m.sample.UploadCollectionVersioning",
            "name": "With Download and Update Feature",
            "description": "Shows the UploadCollection with a download and update version feature. If one item is selected, you can download it or update the item to a new version. Both features can only be used in the Instant Upload scenario.",
            "entityId": "sap.m.UploadCollection",
            "contexts": {
              "sap.m.UploadCollection": {
                "previousSampleId": "sap.m.sample.UploadCollectionForPendingUpload",
                "nextSampleId": "sap.m.sample.UploadCollectionSortingFiltering"
              }
            },
            "key": "#/sample/sap.m.sample.UploadCollectionVersioning/preview"
          },
          {
            "id": "sap.m.sample.UploadCollectionSortingFiltering",
            "name": "With Grouping, Sorting and Filtering Feature",
            "description": "Shows the UploadCollection with grouping, sorting and filtering feature. After setting the criteria for filtering and sorting you get the filtering information displayed in the info toolbar.",
            "entityId": "sap.m.UploadCollection",
            "contexts": {
              "sap.m.UploadCollection": {
                "previousSampleId": "sap.m.sample.UploadCollectionVersioning",
                "nextSampleId": "sap.m.sample.UploadCollectionFolderHierarchy"
              }
            },
            "key": "#/sample/sap.m.sample.UploadCollectionSortingFiltering/preview"
          },
          {
            "id": "sap.m.sample.UploadCollectionFolderHierarchy",
            "name": "Upload Collection with Folder Hierarchy",
            "description": "Shows the UploadCollection with a navigable folder structure.",
            "entityId": "sap.m.UploadCollection",
            "contexts": {
              "sap.m.UploadCollection": {
                "previousSampleId": "sap.m.sample.UploadCollectionSortingFiltering"
              }
            },
            "key": "#/sample/sap.m.sample.UploadCollectionFolderHierarchy/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Upload Collection UploadCollection Action Upload Collection - Instant Upload This control allows you to upload single or multiple files from their devices (desktop, tablet or smartphone) and attach them to the application immediately. The selection and upload process is completed in one step and is automatically triggered by the UploadCollection control. Upload Collection - Upload Pending You can use this UploadCollection scenario to select single or mutliple files and to add them to the upload list first. In a second step, the application can upload the selected files by calling the upload() function. With Download and Update Feature Shows the UploadCollection with a download and update version feature. If one item is selected, you can download it or update the item to a new version. Both features can only be used in the Instant Upload scenario. With Grouping, Sorting and Filtering Feature Shows the UploadCollection with grouping, sorting and filtering feature. After setting the criteria for filtering and sorting you get the filtering information displayed in the info toolbar. Upload Collection with Folder Hierarchy Shows the UploadCollection with a navigable folder structure. Upload Collection - Instant Upload Upload Collection - Upload Pending With Download and Update Feature With Grouping, Sorting and Filtering Feature Upload Collection with Folder Hierarchy",
        "sampleCount": 5,
        "key": "#/entity/sap.m.UploadCollection"
      },
      {
        "id": "sap.m.upload.UploadSet",
        "name": "Upload Set",
        "category": "Action",
        "since": "1.62",
        "samples": [
          {
            "id": "sap.m.sample.UploadSet",
            "name": "Upload Set",
            "description": "This sample shows an Upload Set control with a list of files to be uploaded and actions you can perform on them.",
            "entityId": "sap.m.upload.UploadSet",
            "contexts": {
              "sap.m.upload.UploadSet": {
                "nextSampleId": "sap.m.sample.UploadSetCustomUploader"
              }
            },
            "key": "#/sample/sap.m.sample.UploadSet/preview"
          },
          {
            "id": "sap.m.sample.UploadSetCustomUploader",
            "name": "Upload Set with Custom Uploader",
            "description": "Shows how to customize the Upload Set control using a custom uploader.",
            "entityId": "sap.m.upload.UploadSet",
            "contexts": {
              "sap.m.upload.UploadSet": {
                "previousSampleId": "sap.m.sample.UploadSet"
              }
            },
            "key": "#/sample/sap.m.sample.UploadSetCustomUploader/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m.upload",
        "library": "sap.m",
        "searchTags": "Upload Set UploadSet Action Upload Set This sample shows an Upload Set control with a list of files to be uploaded and actions you can perform on them. Upload Set with Custom Uploader Shows how to customize the Upload Set control using a custom uploader. Upload Set Upload Set with Custom Uploader",
        "sampleCount": 2,
        "key": "#/entity/sap.m.upload.UploadSet"
      },
      {
        "id": "sap.m.GenericTag",
        "name": "Generic Tag",
        "category": "Action",
        "since": "1.62.0",
        "samples": [
          {
            "id": "sap.m.sample.GenericTag",
            "name": "Generic Tag with Different Configurations",
            "description": "Previews of the GenericTag control based on combinations of different sets of properties.",
            "entityId": "sap.m.GenericTag",
            "contexts": {
              "sap.m.GenericTag": {
                "nextSampleId": "sap.uxap.sample.ObjectPageHeaderActionButtons"
              }
            },
            "key": "#/sample/sap.m.sample.GenericTag/preview"
          },
          {
            "id": "sap.uxap.sample.ObjectPageHeaderActionButtons",
            "name": "Object Page with ObjectPageHeaderActionButtons",
            "description": "This example demonstrates ObjectPage with ObjectPageHeaderActionButtons and a GenericTag in the header.",
            "entityId": "sap.m.GenericTag",
            "contexts": {
              "sap.uxap.ObjectPageDynamicHeaderTitle": {
                "nextSampleId": "sap.uxap.sample.ObjectPageHeaderBackgroundDesign"
              },
              "sap.m.GenericTag": {
                "previousSampleId": "sap.m.sample.GenericTag",
                "nextSampleId": "sap.f.sample.DynamicPageFreeStyle"
              }
            },
            "key": "#/sample/sap.uxap.sample.ObjectPageHeaderActionButtons/preview"
          },
          {
            "id": "sap.f.sample.DynamicPageFreeStyle",
            "name": "Dynamic Page Freestyle Example",
            "description": "Dynamic Page freestyle example with a responsive <code>sap.m.Table</code> in the content area, showing that each control can be placed in the title and the header content areas.",
            "entityId": "sap.m.GenericTag",
            "contexts": {
              "sap.f.DynamicPage": {
                "nextSampleId": "sap.f.sample.DynamicPageAnalyticalTable"
              },
              "sap.m.GenericTag": {
                "previousSampleId": "sap.uxap.sample.ObjectPageHeaderActionButtons",
                "nextSampleId": "sap.m.sample.OverflowToolbarSimple"
              }
            },
            "key": "#/sample/sap.f.sample.DynamicPageFreeStyle/preview"
          },
          {
            "id": "sap.m.sample.OverflowToolbarSimple",
            "name": "Overflow Toolbar - layout",
            "description": "Overflow Toolbar can contain the same controls as Toolbar with the added benefit that buttons that do not fit are moved to an overflow area when overflow occurs.",
            "entityId": "sap.m.OverflowToolbar",
            "contexts": {
              "sap.m.GenericTag": {
                "previousSampleId": "sap.f.sample.DynamicPageFreeStyle"
              },
              "sap.m.OverflowToolbar": {
                "nextSampleId": "sap.m.sample.OverflowToolbarFooter"
              }
            },
            "key": "#/sample/sap.m.sample.OverflowToolbarSimple/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Generic Tag GenericTag Action Generic Tag with Different Configurations Previews of the GenericTag control based on combinations of different sets of properties. Object Page with ObjectPageHeaderActionButtons This example demonstrates ObjectPage with ObjectPageHeaderActionButtons and a GenericTag in the header. Dynamic Page Freestyle Example Dynamic Page freestyle example with a responsive <code>sap.m.Table</code> in the content area, showing that each control can be placed in the title and the header content areas. Overflow Toolbar - layout Overflow Toolbar can contain the same controls as Toolbar with the added benefit that buttons that do not fit are moved to an overflow area when overflow occurs. Generic Tag with Different Configurations Object Page with ObjectPageHeaderActionButtons Dynamic Page Freestyle Example Overflow Toolbar - layout",
        "sampleCount": 4,
        "key": "#/entity/sap.m.GenericTag"
      },
      {
        "id": "sap.m.GenericTile",
        "name": "Generic Tile",
        "category": "Tile",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.GenericTileAsLaunchTile",
            "name": "Launch Tile",
            "description": "Shows Launch Tile samples that can contain header, subheader, image content, unit, and a footer.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.GenericTile": {
                "nextSampleId": "sap.m.sample.GenericTileAsMonitorTile"
              }
            },
            "key": "#/sample/sap.m.sample.GenericTileAsLaunchTile/preview"
          },
          {
            "id": "sap.m.sample.GenericTileAsMonitorTile",
            "name": "Monitor Tile",
            "description": "Shows Monitor Tile samples that can contain header, subheader, icon, key value, unit, and a footer.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.GenericTile": {
                "previousSampleId": "sap.m.sample.GenericTileAsLaunchTile",
                "nextSampleId": "sap.m.sample.GenericTileAsKPITile"
              }
            },
            "key": "#/sample/sap.m.sample.GenericTileAsMonitorTile/preview"
          },
          {
            "id": "sap.m.sample.GenericTileAsKPITile",
            "name": "KPI Tile",
            "description": "Shows KPI Tile samples that can contain header, subheader, key value, trend, scale, unit, and a footer.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.GenericTile": {
                "previousSampleId": "sap.m.sample.GenericTileAsMonitorTile",
                "nextSampleId": "sap.m.sample.GenericTileAsFeedTile"
              }
            },
            "key": "#/sample/sap.m.sample.GenericTileAsKPITile/preview"
          },
          {
            "id": "sap.m.sample.GenericTileAsFeedTile",
            "name": "Feed and News Tile",
            "description": "Shows Feed Tile and News Tile samples that can contain feed content, news content, and a footer.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.GenericTile": {
                "previousSampleId": "sap.m.sample.GenericTileAsKPITile",
                "nextSampleId": "sap.m.sample.SlideTile"
              }
            },
            "key": "#/sample/sap.m.sample.GenericTileAsFeedTile/preview"
          },
          {
            "id": "sap.m.sample.SlideTile",
            "name": "Slide Tile",
            "description": "Shows Generic Tile with the 2x1 frame type displayed as sliding tiles.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.SlideTile": {},
              "sap.m.GenericTile": {
                "previousSampleId": "sap.m.sample.GenericTileAsFeedTile",
                "nextSampleId": "sap.m.sample.GenericTileLineMode"
              }
            },
            "key": "#/sample/sap.m.sample.SlideTile/preview"
          },
          {
            "id": "sap.m.sample.GenericTileLineMode",
            "name": "Tile Modes and Scopes",
            "description": "Shows Generic Tile regular and in line mode, and you can switch between the display scope and actions scope for Generic Tiles on a web page.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.GenericTile": {
                "previousSampleId": "sap.m.sample.SlideTile",
                "nextSampleId": "sap.m.sample.GenericTileStates"
              }
            },
            "key": "#/sample/sap.m.sample.GenericTileLineMode/preview"
          },
          {
            "id": "sap.m.sample.GenericTileStates",
            "name": "Tile Statuses",
            "description": "Shows the GenericTile while it is loading, if loading fails, and in disabled status.",
            "entityId": "sap.m.GenericTile",
            "contexts": {
              "sap.m.GenericTile": {
                "previousSampleId": "sap.m.sample.GenericTileLineMode"
              }
            },
            "key": "#/sample/sap.m.sample.GenericTileStates/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Generic Tile GenericTile Tile Launch Tile Shows Launch Tile samples that can contain header, subheader, image content, unit, and a footer. Monitor Tile Shows Monitor Tile samples that can contain header, subheader, icon, key value, unit, and a footer. KPI Tile Shows KPI Tile samples that can contain header, subheader, key value, trend, scale, unit, and a footer. Feed and News Tile Shows Feed Tile and News Tile samples that can contain feed content, news content, and a footer. Slide Tile Shows Generic Tile with the 2x1 frame type displayed as sliding tiles. Tile Modes and Scopes Shows Generic Tile regular and in line mode, and you can switch between the display scope and actions scope for Generic Tiles on a web page. Tile Statuses Shows the GenericTile while it is loading, if loading fails, and in disabled status. Launch Tile Monitor Tile KPI Tile Feed and News Tile Slide Tile Tile Modes and Scopes Tile Statuses",
        "sampleCount": 7,
        "key": "#/entity/sap.m.GenericTile"
      },
      {
        "id": "sap.m.HeaderContainer",
        "name": "Header Container",
        "category": "Container",
        "since": "1.44",
        "samples": [
          {
            "id": "sap.m.sample.HeaderContainer",
            "name": "Header Container - Horizontal Mode",
            "description": "The Header Container with horizontal layout. It provides horizontal scrolling on mobile devices (tablet and phone). On a desktop, it provides scroll left and scroll right buttons.",
            "entityId": "sap.m.HeaderContainer",
            "contexts": {
              "sap.m.HeaderContainer": {
                "nextSampleId": "sap.m.sample.HeaderContainerNoDividers"
              }
            },
            "key": "#/sample/sap.m.sample.HeaderContainer/preview"
          },
          {
            "id": "sap.m.sample.HeaderContainerNoDividers",
            "name": "Header Container Without Dividers",
            "description": "The Header Container without divider lines.",
            "entityId": "sap.m.HeaderContainer",
            "contexts": {
              "sap.m.HeaderContainer": {
                "previousSampleId": "sap.m.sample.HeaderContainer",
                "nextSampleId": "sap.m.sample.HeaderContainerOH"
              }
            },
            "key": "#/sample/sap.m.sample.HeaderContainerNoDividers/preview"
          },
          {
            "id": "sap.m.sample.HeaderContainerOH",
            "name": "Header Container With Object Header",
            "description": "The Header Container combined with sap.m.ObjectHeader.",
            "entityId": "sap.m.HeaderContainer",
            "contexts": {
              "sap.m.HeaderContainer": {
                "previousSampleId": "sap.m.sample.HeaderContainerNoDividers",
                "nextSampleId": "sap.m.sample.HeaderContainerVM"
              }
            },
            "key": "#/sample/sap.m.sample.HeaderContainerOH/preview"
          },
          {
            "id": "sap.m.sample.HeaderContainerVM",
            "name": "Header Container - Vertical Mode",
            "description": "The Header Container with a vertical layout and with divider lines.",
            "entityId": "sap.m.HeaderContainer",
            "contexts": {
              "sap.m.HeaderContainer": {
                "previousSampleId": "sap.m.sample.HeaderContainerOH"
              }
            },
            "key": "#/sample/sap.m.sample.HeaderContainerVM/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Header Container HeaderContainer Container Header Container - Horizontal Mode The Header Container with horizontal layout. It provides horizontal scrolling on mobile devices (tablet and phone). On a desktop, it provides scroll left and scroll right buttons. Header Container Without Dividers The Header Container without divider lines. Header Container With Object Header The Header Container combined with sap.m.ObjectHeader. Header Container - Vertical Mode The Header Container with a vertical layout and with divider lines. Header Container - Horizontal Mode Header Container Without Dividers Header Container With Object Header Header Container - Vertical Mode",
        "sampleCount": 4,
        "key": "#/entity/sap.m.HeaderContainer"
      },
      {
        "id": "sap.m.IconTabBar",
        "name": "Icon Tab Bar",
        "category": "Container",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.IconTabBar",
            "name": "Icon Tab Bar - Filter",
            "description": "In this example, the Icon Tab Bar is used to apply filters on a table and display the count of the items for each view.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "nextSampleId": "sap.m.sample.IconTabBarMulti"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBar/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarMulti",
            "name": "Icon Tab Bar - Icons Only",
            "description": "In this example, the Icon Tab Bar tabs display icons only.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBar",
                "nextSampleId": "sap.m.sample.IconTabBarFiori2"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarMulti/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarFiori2",
            "name": "Icon Tab Bar - Text and Count",
            "description": "In this example, the Icon Tab Bar tabs display text and corresponding count.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarMulti",
                "nextSampleId": "sap.m.sample.IconTabBarInlineMode"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarFiori2/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarInlineMode",
            "name": "Icon Tab Bar - Inline Mode",
            "description": "In this example, the Icon Tab Bar tabs display the text and the count in one line.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarFiori2",
                "nextSampleId": "sap.m.sample.IconTabBarNoIcons"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarInlineMode/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarNoIcons",
            "name": "Icon Tab Bar - Text Only",
            "description": "In this example, the Icon Tab Bar tabs display text only.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarInlineMode",
                "nextSampleId": "sap.m.sample.IconTabBarProcess"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarNoIcons/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarProcess",
            "name": "Icon Tab Bar - Process",
            "description": "In this example, the Icon Tab Bar is used to apply filters on the same content along a business process.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarNoIcons",
                "nextSampleId": "sap.m.sample.IconTabBarStretchContent"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarProcess/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarStretchContent",
            "name": "Icon Tab Bar - Stretch Content Height",
            "description": "In this example, the IconTabBar height is stretched to the maximum height of the page content. Note: The height of the parent container must be defined as a fixed value. Also, applyContentPadding property is set to false and backgroundDesign property is set to Transparent.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarProcess",
                "nextSampleId": "sap.m.sample.IconTabSeparator"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarStretchContent/preview"
          },
          {
            "id": "sap.m.sample.IconTabSeparator",
            "name": "Icon Tab - Separator",
            "description": "This is an example how to use separators in the Icon Tab Bar. You can choose an icon as a separator or use the default vertical line.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarStretchContent",
                "nextSampleId": "sap.m.sample.IconTabBarOverflowSelectList"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabSeparator/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarOverflowSelectList",
            "name": "Icon Tab Bar - Overflow Select List",
            "description": "In this example when some of the tab items are not visible, they are displayed in an overflow select list for easier selection.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabSeparator",
                "nextSampleId": "sap.m.sample.IconTabBarBackgroundDesign"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarOverflowSelectList/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarBackgroundDesign",
            "name": "Icon Tab Bar - Background Design",
            "description": "In this example the backgroundDesign and headerBackgroundDesign properties are demonstrated.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarOverflowSelectList",
                "nextSampleId": "sap.m.sample.IconTabBarDragDrop"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarBackgroundDesign/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarDragDrop",
            "name": "Icon Tab Bar - Tabs drag and drop",
            "description": "This example shows how the tab filters can be reordered with drag and drop. Works only on desktop devices.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarBackgroundDesign",
                "nextSampleId": "sap.m.sample.IconTabBarTabDensityMode"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarDragDrop/preview"
          },
          {
            "id": "sap.m.sample.IconTabBarTabDensityMode",
            "name": "Icon Tab Bar - Tab Density Mode",
            "description": "In this example, the Icon Tab Bar is used in different tab density modes.",
            "entityId": "sap.m.IconTabBar",
            "contexts": {
              "sap.m.IconTabBar": {
                "previousSampleId": "sap.m.sample.IconTabBarDragDrop"
              }
            },
            "key": "#/sample/sap.m.sample.IconTabBarTabDensityMode/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Icon Tab Bar IconTabBar Container Icon Tab Bar - Filter In this example, the Icon Tab Bar is used to apply filters on a table and display the count of the items for each view. Icon Tab Bar - Icons Only In this example, the Icon Tab Bar tabs display icons only. Icon Tab Bar - Text and Count In this example, the Icon Tab Bar tabs display text and corresponding count. Icon Tab Bar - Inline Mode In this example, the Icon Tab Bar tabs display the text and the count in one line. Icon Tab Bar - Text Only In this example, the Icon Tab Bar tabs display text only. Icon Tab Bar - Process In this example, the Icon Tab Bar is used to apply filters on the same content along a business process. Icon Tab Bar - Stretch Content Height In this example, the IconTabBar height is stretched to the maximum height of the page content. Note: The height of the parent container must be defined as a fixed value. Also, applyContentPadding property is set to false and backgroundDesign property is set to Transparent. Icon Tab - Separator This is an example how to use separators in the Icon Tab Bar. You can choose an icon as a separator or use the default vertical line. Icon Tab Bar - Overflow Select List In this example when some of the tab items are not visible, they are displayed in an overflow select list for easier selection. Icon Tab Bar - Background Design In this example the backgroundDesign and headerBackgroundDesign properties are demonstrated. Icon Tab Bar - Tabs drag and drop This example shows how the tab filters can be reordered with drag and drop. Works only on desktop devices. Icon Tab Bar - Tab Density Mode In this example, the Icon Tab Bar is used in different tab density modes. Icon Tab Bar - Filter Icon Tab Bar - Icons Only Icon Tab Bar - Text and Count Icon Tab Bar - Inline Mode Icon Tab Bar - Text Only Icon Tab Bar - Process Icon Tab Bar - Stretch Content Height Icon Tab - Separator Icon Tab Bar - Overflow Select List Icon Tab Bar - Background Design Icon Tab Bar - Tabs drag and drop Icon Tab Bar - Tab Density Mode",
        "sampleCount": 12,
        "key": "#/entity/sap.m.IconTabBar"
      },
      {
        "id": "sap.m.TabContainer",
        "name": "Tab Container",
        "category": "Container",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.TabContainer",
            "name": "Tab Container",
            "description": "The sap.m.TabContainer allows for working with multiple tabs.",
            "entityId": "sap.m.TabContainer",
            "contexts": {
              "sap.m.TabContainer": {
                "nextSampleId": "sap.m.sample.TabContainerMHC"
              }
            },
            "key": "#/sample/sap.m.sample.TabContainer/preview"
          },
          {
            "id": "sap.m.sample.TabContainerMHC",
            "name": "Tab Container - Multi-instance handling concept",
            "description": "Allows detail view / edit in <code>sap.m.TabContainer</code> after selecting items from table.",
            "entityId": "sap.m.TabContainer",
            "contexts": {
              "sap.m.TabContainer": {
                "previousSampleId": "sap.m.sample.TabContainer",
                "nextSampleId": "sap.m.sample.TabContainerIcons"
              }
            },
            "key": "#/sample/sap.m.sample.TabContainerMHC/preview"
          },
          {
            "id": "sap.m.sample.TabContainerIcons",
            "name": "Tab Container - with icons and additional text",
            "description": "This example shows how you can add additional text and an Icon to the tabs in TabContainer.",
            "entityId": "sap.m.TabContainer",
            "contexts": {
              "sap.m.TabContainer": {
                "previousSampleId": "sap.m.sample.TabContainerMHC"
              }
            },
            "key": "#/sample/sap.m.sample.TabContainerIcons/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Tab Container TabContainer Container Tab Container The sap.m.TabContainer allows for working with multiple tabs. Tab Container - Multi-instance handling concept Allows detail view / edit in <code>sap.m.TabContainer</code> after selecting items from table. Tab Container - with icons and additional text This example shows how you can add additional text and an Icon to the tabs in TabContainer. Tab Container Tab Container - Multi-instance handling concept Tab Container - with icons and additional text",
        "sampleCount": 3,
        "key": "#/entity/sap.m.TabContainer"
      },
      {
        "id": "sap.m.Image",
        "name": "Image",
        "category": "Display",
        "since": "1.10",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.Image",
            "name": "Image",
            "description": "Images are faster than words and attract people's attention. Images can also have an active state like the last image in this example.",
            "entityId": "sap.m.Image",
            "contexts": {
              "sap.m.Image": {
                "nextSampleId": "sap.m.sample.ImageModeBackground"
              }
            },
            "key": "#/sample/sap.m.sample.Image/preview"
          },
          {
            "id": "sap.m.sample.ImageModeBackground",
            "name": "Image with ImageMode.Background",
            "description": "Visualizes the state of the control when the mode property is set to ImageMode.Background.",
            "entityId": "sap.m.Image",
            "contexts": {
              "sap.m.Image": {
                "previousSampleId": "sap.m.sample.Image"
              }
            },
            "key": "#/sample/sap.m.sample.ImageModeBackground/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Image Image Display Image Images are faster than words and attract people's attention. Images can also have an active state like the last image in this example. Image with ImageMode.Background Visualizes the state of the control when the mode property is set to ImageMode.Background. Image Image with ImageMode.Background",
        "sampleCount": 2,
        "key": "#/entity/sap.m.Image"
      },
      {
        "id": "sap.m.ImageContent",
        "name": "Image Content",
        "category": "Tile",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.m.sample.ImageContent",
            "name": "ImageContent",
            "description": "Shows ImageContent that can include an icon, a profile image, or a logo with a tooltip.",
            "entityId": "sap.m.ImageContent",
            "contexts": {
              "sap.m.ImageContent": {}
            },
            "key": "#/sample/sap.m.sample.ImageContent/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Image Content ImageContent Tile ImageContent Shows ImageContent that can include an icon, a profile image, or a logo with a tooltip. ImageContent",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ImageContent"
      },
      {
        "id": "sap.m.Input",
        "name": "Input",
        "category": "User Input",
        "since": "1.10",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.InputAssisted",
            "name": "Input - Assisted",
            "description": "Assisted input is available via suggestions - shown as you type - and a value help dialog.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "nextSampleId": "sap.m.sample.InputAssistedTwoValues"
              }
            },
            "key": "#/sample/sap.m.sample.InputAssisted/preview"
          },
          {
            "id": "sap.m.sample.InputAssistedTwoValues",
            "name": "Input - Assisted Two Values",
            "description": "This example shows how to easily implement an assisted input with two-value suggestions.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputAssisted",
                "nextSampleId": "sap.m.sample.InputAssistedTabularSuggestions"
              }
            },
            "key": "#/sample/sap.m.sample.InputAssistedTwoValues/preview"
          },
          {
            "id": "sap.m.sample.InputAssistedTabularSuggestions",
            "name": "Input - Assisted Tabular Suggestions",
            "description": "In this example assisted input is provided with table-like suggestions where several columns can display more details.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputAssistedTwoValues",
                "nextSampleId": "sap.m.sample.InputChecked"
              }
            },
            "key": "#/sample/sap.m.sample.InputAssistedTabularSuggestions/preview"
          },
          {
            "id": "sap.m.sample.InputChecked",
            "name": "Input - Checked",
            "description": "Input checks are handled via the validation of the data binding. In this example there are two inputs that are validated (a) while the user types and (b) when the user continues the process. If the built-in validation types are not sufficient you can create your own, like the email type in this example.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputAssistedTabularSuggestions",
                "nextSampleId": "sap.m.sample.InputDescription"
              }
            },
            "key": "#/sample/sap.m.sample.InputChecked/preview"
          },
          {
            "id": "sap.m.sample.InputDescription",
            "name": "Input - Description",
            "description": "This sample illustrates the usage of the description with input fields, e.g. description for units of measurements and currencies.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputChecked",
                "nextSampleId": "sap.m.sample.InputPassword"
              }
            },
            "key": "#/sample/sap.m.sample.InputDescription/preview"
          },
          {
            "id": "sap.m.sample.InputPassword",
            "name": "Input - Password",
            "description": "To make sure the password is not shown as clear text you set the 'type' of an input control to 'Password'.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputDescription",
                "nextSampleId": "sap.m.sample.InputSuggestionsCustomFilter"
              }
            },
            "key": "#/sample/sap.m.sample.InputPassword/preview"
          },
          {
            "id": "sap.m.sample.InputSuggestionsCustomFilter",
            "name": "Input - Suggestions - Custom",
            "description": "The default filtering for the suggestionItems aggregation uses a 'begins with' style operator. You can override this with your own custom filter function using the Input control's setFilterFunction method.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputPassword",
                "nextSampleId": "sap.m.sample.InputSuggestionsDynamic"
              }
            },
            "key": "#/sample/sap.m.sample.InputSuggestionsCustomFilter/preview"
          },
          {
            "id": "sap.m.sample.InputSuggestionsDynamic",
            "name": "Input - Suggestions - Dynamic",
            "description": "With the Input control's suggest event, you can handle the suggestionItems yourself dynamically. This is useful when you have a server-side source of possible entries, and want to retrieve a specific subset by setting a filter on the aggregation binding with the model.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputSuggestionsCustomFilter",
                "nextSampleId": "sap.m.sample.InputSuggestionsOpenSearch"
              }
            },
            "key": "#/sample/sap.m.sample.InputSuggestionsDynamic/preview"
          },
          {
            "id": "sap.m.sample.InputSuggestionsOpenSearch",
            "name": "Input - Suggestions - OSP",
            "description": "If you need to use an Open Search Provider (OSP) to supply possible values, you can do this with the Input control's suggest event, and build the suggestionItems dynamically according to the results of the Open Search call.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputSuggestionsDynamic",
                "nextSampleId": "sap.m.sample.InputTypes"
              }
            },
            "key": "#/sample/sap.m.sample.InputSuggestionsOpenSearch/preview"
          },
          {
            "id": "sap.m.sample.InputTypes",
            "name": "Input - Types",
            "description": "Input type corresponds to the type attribute of the HTML input tag. On touch devices, it controls the keyboard layout. On desktop, the effect of this setting is browser dependent.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputSuggestionsOpenSearch",
                "nextSampleId": "sap.m.sample.InputStates"
              }
            },
            "key": "#/sample/sap.m.sample.InputTypes/preview"
          },
          {
            "id": "sap.m.sample.InputStates",
            "name": "Input - States",
            "description": "This example demonstrates the different input field states, e.g. disabled, editable, with value help and value help only.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputTypes",
                "nextSampleId": "sap.m.sample.InputValueState"
              }
            },
            "key": "#/sample/sap.m.sample.InputStates/preview"
          },
          {
            "id": "sap.m.sample.InputValueState",
            "name": "Input - Value States",
            "description": "This example shows different input value states.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputStates",
                "nextSampleId": "sap.m.sample.InputValueUpdate"
              }
            },
            "key": "#/sample/sap.m.sample.InputValueState/preview"
          },
          {
            "id": "sap.m.sample.InputValueUpdate",
            "name": "Input - Value Update",
            "description": "Since 1.24 the value property of sap.m.Input is not updated on every keystroke, but first when the user presses Enter or leaves the input. The change was necessary to fully support the standard UI5 data binding with formatters and types. If you still need immediate update you have 2 options: Handle liveChange events or enable the boolean property valueLiveUpdate.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputValueState",
                "nextSampleId": "sap.m.sample.InputKeyValue"
              }
            },
            "key": "#/sample/sap.m.sample.InputValueUpdate/preview"
          },
          {
            "id": "sap.m.sample.InputKeyValue",
            "name": "Input - Key and Value",
            "description": "This sample illustrates how the Input works with key and value values, when the data is available via list of suggestions.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputValueUpdate",
                "nextSampleId": "sap.m.sample.InputKeyValueTabularSuggestions"
              }
            },
            "key": "#/sample/sap.m.sample.InputKeyValue/preview"
          },
          {
            "id": "sap.m.sample.InputKeyValueTabularSuggestions",
            "name": "Input - Key and Value Tabular Suggestions",
            "description": "This sample illustrates how the Input works with key and value values, when the data is provided with table-like suggestions.",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputKeyValue",
                "nextSampleId": "sap.m.sample.InputGrouping"
              }
            },
            "key": "#/sample/sap.m.sample.InputKeyValueTabularSuggestions/preview"
          },
          {
            "id": "sap.m.sample.InputGrouping",
            "name": "Input - Grouping of items",
            "description": "Items in the Input could be grouped by a property",
            "entityId": "sap.m.Input",
            "contexts": {
              "sap.m.Input": {
                "previousSampleId": "sap.m.sample.InputKeyValueTabularSuggestions"
              }
            },
            "key": "#/sample/sap.m.sample.InputGrouping/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Input Input User Input Input - Assisted Assisted input is available via suggestions - shown as you type - and a value help dialog. Input - Assisted Two Values This example shows how to easily implement an assisted input with two-value suggestions. Input - Assisted Tabular Suggestions In this example assisted input is provided with table-like suggestions where several columns can display more details. Input - Checked Input checks are handled via the validation of the data binding. In this example there are two inputs that are validated (a) while the user types and (b) when the user continues the process. If the built-in validation types are not sufficient you can create your own, like the email type in this example. Input - Description This sample illustrates the usage of the description with input fields, e.g. description for units of measurements and currencies. Input - Password To make sure the password is not shown as clear text you set the 'type' of an input control to 'Password'. Input - Suggestions - Custom The default filtering for the suggestionItems aggregation uses a 'begins with' style operator. You can override this with your own custom filter function using the Input control's setFilterFunction method. Input - Suggestions - Dynamic With the Input control's suggest event, you can handle the suggestionItems yourself dynamically. This is useful when you have a server-side source of possible entries, and want to retrieve a specific subset by setting a filter on the aggregation binding with the model. Input - Suggestions - OSP If you need to use an Open Search Provider (OSP) to supply possible values, you can do this with the Input control's suggest event, and build the suggestionItems dynamically according to the results of the Open Search call. Input - Types Input type corresponds to the type attribute of the HTML input tag. On touch devices, it controls the keyboard layout. On desktop, the effect of this setting is browser dependent. Input - States This example demonstrates the different input field states, e.g. disabled, editable, with value help and value help only. Input - Value States This example shows different input value states. Input - Value Update Since 1.24 the value property of sap.m.Input is not updated on every keystroke, but first when the user presses Enter or leaves the input. The change was necessary to fully support the standard UI5 data binding with formatters and types. If you still need immediate update you have 2 options: Handle liveChange events or enable the boolean property valueLiveUpdate. Input - Key and Value This sample illustrates how the Input works with key and value values, when the data is available via list of suggestions. Input - Key and Value Tabular Suggestions This sample illustrates how the Input works with key and value values, when the data is provided with table-like suggestions. Input - Grouping of items Items in the Input could be grouped by a property Input - Assisted Input - Assisted Two Values Input - Assisted Tabular Suggestions Input - Checked Input - Description Input - Password Input - Suggestions - Custom Input - Suggestions - Dynamic Input - Suggestions - OSP Input - Types Input - States Input - Value States Input - Value Update Input - Key and Value Input - Key and Value Tabular Suggestions Input - Grouping of items",
        "sampleCount": 16,
        "key": "#/entity/sap.m.Input"
      },
      {
        "id": "sap.m.InputListItem",
        "name": "Input List Item",
        "category": "List",
        "since": "1.10",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.InputListItem",
            "name": "Input List Item",
            "description": "Use the Input List Item on phones to build form like user interfaces.",
            "entityId": "sap.m.InputListItem",
            "contexts": {
              "sap.m.InputListItem": {}
            },
            "key": "#/sample/sap.m.sample.InputListItem/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Input List Item InputListItem List Input List Item Use the Input List Item on phones to build form like user interfaces. Input List Item",
        "sampleCount": 1,
        "key": "#/entity/sap.m.InputListItem"
      },
      {
        "id": "sap.m.FeedContent",
        "name": "Feed Content",
        "category": "Tile",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.FeedContent",
            "name": "Feed Content",
            "description": "Shows the tile containing the text of the feed, a subheader, and a numeric value.",
            "entityId": "sap.m.FeedContent",
            "contexts": {
              "sap.m.FeedContent": {}
            },
            "key": "#/sample/sap.m.sample.FeedContent/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Feed Content FeedContent Tile Feed Content Shows the tile containing the text of the feed, a subheader, and a numeric value. Feed Content",
        "sampleCount": 1,
        "key": "#/entity/sap.m.FeedContent"
      },
      {
        "id": "sap.m.Label",
        "name": "Label",
        "category": "Display",
        "since": "1.10",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.Label",
            "name": "Label with Inputs",
            "description": "Labels are helpful when you need to describe some other UI control.",
            "entityId": "sap.m.Label",
            "contexts": {
              "sap.m.Label": {
                "nextSampleId": "sap.m.sample.LabelProperties"
              }
            },
            "key": "#/sample/sap.m.sample.Label/preview"
          },
          {
            "id": "sap.m.sample.LabelProperties",
            "name": "Label Properties",
            "description": "This sample shows the different behaviors of a label.",
            "entityId": "sap.m.Label",
            "contexts": {
              "sap.m.Label": {
                "previousSampleId": "sap.m.sample.Label",
                "nextSampleId": "sap.ui.layout.sample.Form354"
              }
            },
            "key": "#/sample/sap.m.sample.LabelProperties/preview"
          },
          {
            "id": "sap.ui.layout.sample.Form354",
            "name": "Fullscreen – one group",
            "description": "Form with one single group in a fullscreen app with a label field ratio of 3:5:4 in all sizes besides size S (12:12:0).",
            "entityId": "sap.m.Label",
            "contexts": {
              "sap.ui.layout.form.Form": {
                "nextSampleId": "sap.ui.layout.sample.Form354wide"
              },
              "sap.m.Label": {
                "previousSampleId": "sap.m.sample.LabelProperties"
              }
            },
            "key": "#/sample/sap.ui.layout.sample.Form354/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Label Label Display Label with Inputs Labels are helpful when you need to describe some other UI control. Label Properties This sample shows the different behaviors of a label. Fullscreen – one group Form with one single group in a fullscreen app with a label field ratio of 3:5:4 in all sizes besides size S (12:12:0). Label with Inputs Label Properties Fullscreen – one group",
        "sampleCount": 3,
        "key": "#/entity/sap.m.Label"
      },
      {
        "id": "sap.m.Link",
        "name": "Link",
        "category": "Action",
        "since": "1.12",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.Link",
            "name": "Link",
            "description": "Here are some links. Typically links are used in user interfaces to trigger navigation to related content inside or outside of the current application.",
            "entityId": "sap.m.Link",
            "contexts": {
              "sap.m.Link": {
                "nextSampleId": "sap.m.sample.LinkSubtle"
              }
            },
            "key": "#/sample/sap.m.sample.Link/preview"
          },
          {
            "id": "sap.m.sample.LinkSubtle",
            "name": "Link - Subtle",
            "description": "Subtle links should be used to indicate less important links in tables with a large number of links. In this example all columns contain links, only the first column is non-subtle.",
            "entityId": "sap.m.Link",
            "contexts": {
              "sap.m.Link": {
                "previousSampleId": "sap.m.sample.Link",
                "nextSampleId": "sap.m.sample.LinkEmphasized"
              }
            },
            "key": "#/sample/sap.m.sample.LinkSubtle/preview"
          },
          {
            "id": "sap.m.sample.LinkEmphasized",
            "name": "Link - Emphasized",
            "description": "Usually you use an Object Identifier in the first column of a table. But if you need an active identifier you should use an 'emphasized' link instead.",
            "entityId": "sap.m.Link",
            "contexts": {
              "sap.m.Link": {
                "previousSampleId": "sap.m.sample.LinkSubtle"
              }
            },
            "key": "#/sample/sap.m.sample.LinkEmphasized/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Link Link Action Link Here are some links. Typically links are used in user interfaces to trigger navigation to related content inside or outside of the current application. Link - Subtle Subtle links should be used to indicate less important links in tables with a large number of links. In this example all columns contain links, only the first column is non-subtle. Link - Emphasized Usually you use an Object Identifier in the first column of a table. But if you need an active identifier you should use an 'emphasized' link instead. Link Link - Subtle Link - Emphasized",
        "sampleCount": 3,
        "key": "#/entity/sap.m.Link"
      },
      {
        "id": "sap.m.LightBox",
        "name": "LightBox",
        "category": "Popup",
        "since": "1.42",
        "samples": [
          {
            "id": "sap.m.sample.LightBox",
            "name": "LightBox",
            "description": "Displays several image thumbnails. Clicking on each of them will open a LightBox.",
            "entityId": "sap.m.LightBox",
            "contexts": {
              "sap.m.LightBox": {}
            },
            "key": "#/sample/sap.m.sample.LightBox/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "LightBox LightBox Popup LightBox Displays several image thumbnails. Clicking on each of them will open a LightBox. LightBox",
        "sampleCount": 1,
        "key": "#/entity/sap.m.LightBox"
      },
      {
        "id": "sap.m.List",
        "name": "List",
        "category": "List",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.ListCounter",
            "name": "List - Counter Indication",
            "description": "The counter of an item quickly shows how many detail entries are related, without having to navigate to the detail page.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "nextSampleId": "sap.m.sample.ListDeletion"
              }
            },
            "key": "#/sample/sap.m.sample.ListCounter/preview"
          },
          {
            "id": "sap.m.sample.ListDeletion",
            "name": "List - Deletion",
            "description": "Setting 'Delete' mode on a List means you can trigger the deletion of single items with a single press. The application has to decide if an additional confirmation is required.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListCounter",
                "nextSampleId": "sap.m.sample.ListFooter"
              }
            },
            "key": "#/sample/sap.m.sample.ListDeletion/preview"
          },
          {
            "id": "sap.m.sample.ListFooter",
            "name": "List - Footer",
            "description": "With the 'footerText' property you can set a message that is shown at the very end of the list.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListDeletion",
                "nextSampleId": "sap.m.sample.ListGrouping"
              }
            },
            "key": "#/sample/sap.m.sample.ListFooter/preview"
          },
          {
            "id": "sap.m.sample.ListGrouping",
            "name": "List - Grouping & Context Menu",
            "description": "Grouping your items makes it easier for the user to browse and find the desired content. This example also shows the context menu for the items in the List control.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListFooter",
                "nextSampleId": "sap.m.sample.ListGrowing"
              }
            },
            "key": "#/sample/sap.m.sample.ListGrouping/preview"
          },
          {
            "id": "sap.m.sample.ListGrowing",
            "name": "List - Growing",
            "description": "The Growing feature helps if your content is too big to be loaded/shown at once. It paginates the content into smaller chunks - aka pages - which are loaded/shown one after another. Random access to pages (e.g jumping to the end) is not possible. Depending on the model the content is loaded on demand (OData) or shown on demand (JSON).",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListGrouping",
                "nextSampleId": "sap.m.sample.ListGrowingUpwards"
              }
            },
            "key": "#/sample/sap.m.sample.ListGrowing/preview"
          },
          {
            "id": "sap.m.sample.ListGrowingUpwards",
            "name": "List - Growing Upwards",
            "description": "The Upwards Growing",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListGrowing",
                "nextSampleId": "sap.m.sample.ListItemTypes"
              }
            },
            "key": "#/sample/sap.m.sample.ListGrowingUpwards/preview"
          },
          {
            "id": "sap.m.sample.ListItemTypes",
            "name": "List - Items Type",
            "description": "You can use the ‘type’ property of any list item, which inherits from ListItemBase control, to demonstrate all possible types (see sap.m.ListType). In this example, you can see the Standard List Item behavior when different values of ‘type’ property are selected.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListGrowingUpwards",
                "nextSampleId": "sap.m.sample.ListLoading"
              }
            },
            "key": "#/sample/sap.m.sample.ListItemTypes/preview"
          },
          {
            "id": "sap.m.sample.ListLoading",
            "name": "List - Loading Indication",
            "description": "You can use enableBusyIndicator property to display loading animation while the data is being loaded from server. By default, this property is true and busy indicator will be shown after 1000ms. This behavior can be customized by setting the busyIndicatorDelay property. When this property is set to false, items stay on the List until data loading is completed.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListItemTypes",
                "nextSampleId": "sap.m.sample.ListNavType"
              }
            },
            "key": "#/sample/sap.m.sample.ListLoading/preview"
          },
          {
            "id": "sap.m.sample.ListNavType",
            "name": "List - Navigation Indication",
            "description": "If only a subset of the list items are navigable you should indicate those by setting their 'type' to 'Navigation'. This displays an navigation arrow. Do not show arrows if all items are navigable. This achieved by setting the 'type' to 'Active'.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListLoading",
                "nextSampleId": "sap.m.sample.ListNoData"
              }
            },
            "key": "#/sample/sap.m.sample.ListNavType/preview"
          },
          {
            "id": "sap.m.sample.ListNoData",
            "name": "List - No Data Indication",
            "description": "If the list is empty it indicates this state by displaying a message text.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListNavType",
                "nextSampleId": "sap.m.sample.ListSelection"
              }
            },
            "key": "#/sample/sap.m.sample.ListNoData/preview"
          },
          {
            "id": "sap.m.sample.ListSelection",
            "name": "List - Selection",
            "description": "'Single selection' forces the user to choose exactly one out of many items. With the 'multi' selection the user can pick multiple items at the same time. This is helpful for e.g. batch processing. With 'includeItem' the selection is also changed when pressing the item.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListNoData",
                "nextSampleId": "sap.m.sample.ListSelectionSearch"
              }
            },
            "key": "#/sample/sap.m.sample.ListSelection/preview"
          },
          {
            "id": "sap.m.sample.ListSelectionSearch",
            "name": "List - Selection & Search",
            "description": "When searching a list with multi selection the previously selected items will stay selected. This is managed by the list control for you.",
            "entityId": "sap.m.SearchField",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListSelection",
                "nextSampleId": "sap.m.sample.ListSwipe"
              },
              "sap.m.SearchField": {
                "previousSampleId": "sap.m.sample.SearchField",
                "nextSampleId": "sap.m.sample.SearchFieldSuggestions"
              }
            },
            "key": "#/sample/sap.m.sample.ListSelectionSearch/preview"
          },
          {
            "id": "sap.m.sample.ListSwipe",
            "name": "List - Swipe",
            "description": "With a swipe gesture you can show additional content for an item without having to navigate to a detail page. This feature is only available for touch devices.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListSelectionSearch",
                "nextSampleId": "sap.m.sample.ListToolbar"
              }
            },
            "key": "#/sample/sap.m.sample.ListSwipe/preview"
          },
          {
            "id": "sap.m.sample.ListToolbar",
            "name": "List - Header & Info Toolbar",
            "description": "The 'headerText' property is an easy but limited way of setting the list header. If you need more flexibility you should assemble your own header or info toolbar that can also contain buttons. This example also demonstrates the sticky header toolbar and info toolbar options.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListSwipe",
                "nextSampleId": "sap.m.sample.ListUnread"
              }
            },
            "key": "#/sample/sap.m.sample.ListToolbar/preview"
          },
          {
            "id": "sap.m.sample.ListUnread",
            "name": "List - Unread Indication",
            "description": "With the Unread Indicator you can highlight new items making it easier for the user to discover them.",
            "entityId": "sap.m.List",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListToolbar"
              }
            },
            "key": "#/sample/sap.m.sample.ListUnread/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "List List List List - Counter Indication The counter of an item quickly shows how many detail entries are related, without having to navigate to the detail page. List - Deletion Setting 'Delete' mode on a List means you can trigger the deletion of single items with a single press. The application has to decide if an additional confirmation is required. List - Footer With the 'footerText' property you can set a message that is shown at the very end of the list. List - Grouping & Context Menu Grouping your items makes it easier for the user to browse and find the desired content. This example also shows the context menu for the items in the List control. List - Growing The Growing feature helps if your content is too big to be loaded/shown at once. It paginates the content into smaller chunks - aka pages - which are loaded/shown one after another. Random access to pages (e.g jumping to the end) is not possible. Depending on the model the content is loaded on demand (OData) or shown on demand (JSON). List - Growing Upwards The Upwards Growing List - Items Type You can use the ‘type’ property of any list item, which inherits from ListItemBase control, to demonstrate all possible types (see sap.m.ListType). In this example, you can see the Standard List Item behavior when different values of ‘type’ property are selected. List - Loading Indication You can use enableBusyIndicator property to display loading animation while the data is being loaded from server. By default, this property is true and busy indicator will be shown after 1000ms. This behavior can be customized by setting the busyIndicatorDelay property. When this property is set to false, items stay on the List until data loading is completed. List - Navigation Indication If only a subset of the list items are navigable you should indicate those by setting their 'type' to 'Navigation'. This displays an navigation arrow. Do not show arrows if all items are navigable. This achieved by setting the 'type' to 'Active'. List - No Data Indication If the list is empty it indicates this state by displaying a message text. List - Selection 'Single selection' forces the user to choose exactly one out of many items. With the 'multi' selection the user can pick multiple items at the same time. This is helpful for e.g. batch processing. With 'includeItem' the selection is also changed when pressing the item. List - Selection & Search When searching a list with multi selection the previously selected items will stay selected. This is managed by the list control for you. List - Swipe With a swipe gesture you can show additional content for an item without having to navigate to a detail page. This feature is only available for touch devices. List - Header & Info Toolbar The 'headerText' property is an easy but limited way of setting the list header. If you need more flexibility you should assemble your own header or info toolbar that can also contain buttons. This example also demonstrates the sticky header toolbar and info toolbar options. List - Unread Indication With the Unread Indicator you can highlight new items making it easier for the user to discover them. List - Counter Indication List - Deletion List - Footer List - Grouping & Context Menu List - Growing List - Growing Upwards List - Items Type List - Loading Indication List - Navigation Indication List - No Data Indication List - Selection List - Selection & Search List - Swipe List - Header & Info Toolbar List - Unread Indication",
        "sampleCount": 15,
        "key": "#/entity/sap.m.List"
      },
      {
        "id": "sap.m.MaskInput",
        "name": "Mask Input",
        "category": "User Input",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.MaskInput",
            "name": "MaskInput",
            "description": "The sap.m.MaskInput control allows users to easily enter data in a certain format and in a fixed-width input (for example: date, time, credit card number, and others).",
            "entityId": "sap.m.MaskInput",
            "contexts": {
              "sap.m.MaskInput": {}
            },
            "key": "#/sample/sap.m.sample.MaskInput/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Mask Input MaskInput User Input MaskInput The sap.m.MaskInput control allows users to easily enter data in a certain format and in a fixed-width input (for example: date, time, credit card number, and others). MaskInput",
        "sampleCount": 1,
        "key": "#/entity/sap.m.MaskInput"
      },
      {
        "id": "sap.m.MenuButton",
        "name": "Menu Button",
        "category": "User Input",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.m.sample.MenuButton",
            "name": "Menu Button",
            "description": "This control is used to open a menu in both desktop and mobile.",
            "entityId": "sap.m.MenuButton",
            "contexts": {
              "sap.m.MenuButton": {}
            },
            "key": "#/sample/sap.m.sample.MenuButton/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Menu Button MenuButton User Input Menu Button This control is used to open a menu in both desktop and mobile. Menu Button",
        "sampleCount": 1,
        "key": "#/entity/sap.m.MenuButton"
      },
      {
        "id": "sap.m.MessageBox",
        "name": "Message Box",
        "category": "Popup",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.MessageBox",
            "name": "Message Box",
            "description": "MessageBox is an easy way of displaying a message-type dialog to the user. You can display different types of dialogs:\n- Types of message (Alert, Confirmation, etc.)\n- Initial focus can be set to the buttons or the controls used in the message",
            "entityId": "sap.m.MessageBox",
            "contexts": {
              "sap.m.MessageBox": {
                "nextSampleId": "sap.m.sample.MessageBoxInitialFocus"
              }
            },
            "key": "#/sample/sap.m.sample.MessageBox/preview"
          },
          {
            "id": "sap.m.sample.MessageBoxInitialFocus",
            "name": "Message Box Initial Focus",
            "description": "Shows how to set initial focus to MessageBox button.",
            "entityId": "sap.m.MessageBox",
            "contexts": {
              "sap.m.MessageBox": {
                "previousSampleId": "sap.m.sample.MessageBox",
                "nextSampleId": "sap.m.sample.MessageBoxInfo"
              }
            },
            "key": "#/sample/sap.m.sample.MessageBoxInitialFocus/preview"
          },
          {
            "id": "sap.m.sample.MessageBoxInfo",
            "name": "Message Box Details",
            "description": "MessageBox with the option to display detailed information.",
            "entityId": "sap.m.MessageBox",
            "contexts": {
              "sap.m.MessageBox": {
                "previousSampleId": "sap.m.sample.MessageBoxInitialFocus"
              }
            },
            "key": "#/sample/sap.m.sample.MessageBoxInfo/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Message Box MessageBox Popup Message Box MessageBox is an easy way of displaying a message-type dialog to the user. You can display different types of dialogs:\n- Types of message (Alert, Confirmation, etc.)\n- Initial focus can be set to the buttons or the controls used in the message Message Box Initial Focus Shows how to set initial focus to MessageBox button. Message Box Details MessageBox with the option to display detailed information. Message Box Message Box Initial Focus Message Box Details",
        "sampleCount": 3,
        "key": "#/entity/sap.m.MessageBox"
      },
      {
        "id": "sap.m.MessageStrip",
        "name": "Message Strip",
        "category": "Container",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.m.sample.MessageStrip",
            "name": "Message Strip",
            "description": "MessageStrip for showing status messages.",
            "entityId": "sap.m.MessageStrip",
            "contexts": {
              "sap.m.MessageStrip": {
                "nextSampleId": "sap.m.sample.DynamicMessageStripGenerator"
              }
            },
            "key": "#/sample/sap.m.sample.MessageStrip/preview"
          },
          {
            "id": "sap.m.sample.DynamicMessageStripGenerator",
            "name": "Dynamic Message Strip Generator",
            "description": "Generates MessageStrips with random properties.",
            "entityId": "sap.m.MessageStrip",
            "contexts": {
              "sap.m.MessageStrip": {
                "previousSampleId": "sap.m.sample.MessageStrip",
                "nextSampleId": "sap.m.sample.MessageStripWithEnableFormattedText"
              }
            },
            "key": "#/sample/sap.m.sample.DynamicMessageStripGenerator/preview"
          },
          {
            "id": "sap.m.sample.MessageStripWithEnableFormattedText",
            "name": "Message Strip with enableFormattedText",
            "description": "A sample MessageStrip that shows status messages with additional formatting.",
            "entityId": "sap.m.MessageStrip",
            "contexts": {
              "sap.m.MessageStrip": {
                "previousSampleId": "sap.m.sample.DynamicMessageStripGenerator"
              }
            },
            "key": "#/sample/sap.m.sample.MessageStripWithEnableFormattedText/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Message Strip MessageStrip Container Message Strip MessageStrip for showing status messages. Dynamic Message Strip Generator Generates MessageStrips with random properties. Message Strip with enableFormattedText A sample MessageStrip that shows status messages with additional formatting. Message Strip Dynamic Message Strip Generator Message Strip with enableFormattedText",
        "sampleCount": 3,
        "key": "#/entity/sap.m.MessageStrip"
      },
      {
        "id": "sap.m.MessagePopover",
        "name": "Message Popover",
        "category": "Popup",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.m.sample.MessagePopover",
            "name": "MessagePopover",
            "description": "MessagePopover is a control that displays a summarized list of different types of messages (errors, warnings, success and information). It provides a handy and systemized way to navigate and explore details for every message.",
            "entityId": "sap.m.MessagePopover",
            "contexts": {
              "sap.m.MessagePopover": {
                "nextSampleId": "sap.m.sample.MessagePopoverMessageHandling"
              }
            },
            "key": "#/sample/sap.m.sample.MessagePopover/preview"
          },
          {
            "id": "sap.m.sample.MessagePopoverMessageHandling",
            "name": "Message Popover - Message Handling",
            "description": "The message handling concept sample shows how you can connect an error inside the page (such as input validation error) with an error, visualized as an item in a message popover.",
            "entityId": "sap.m.MessagePopover",
            "contexts": {
              "sap.m.MessagePopover": {
                "previousSampleId": "sap.m.sample.MessagePopover"
              }
            },
            "key": "#/sample/sap.m.sample.MessagePopoverMessageHandling/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Message Popover MessagePopover Popup MessagePopover MessagePopover is a control that displays a summarized list of different types of messages (errors, warnings, success and information). It provides a handy and systemized way to navigate and explore details for every message. Message Popover - Message Handling The message handling concept sample shows how you can connect an error inside the page (such as input validation error) with an error, visualized as an item in a message popover. MessagePopover Message Popover - Message Handling",
        "sampleCount": 2,
        "key": "#/entity/sap.m.MessagePopover"
      },
      {
        "id": "sap.m.MessageView",
        "name": "Message View",
        "category": "Container",
        "since": "1.46",
        "samples": [
          {
            "id": "sap.m.sample.MessageViewInsidePopover",
            "name": "Message View inside Popover",
            "description": "A sample with Message View inside a Popover.",
            "entityId": "sap.m.MessageView",
            "contexts": {
              "sap.m.MessageView": {
                "nextSampleId": "sap.m.sample.MessageViewInsideResponsivePopover"
              }
            },
            "key": "#/sample/sap.m.sample.MessageViewInsidePopover/preview"
          },
          {
            "id": "sap.m.sample.MessageViewInsideResponsivePopover",
            "name": "Message View inside ResponsivePopover",
            "description": "A sample with Message View inside a ResponsivePopover.",
            "entityId": "sap.m.MessageView",
            "contexts": {
              "sap.m.MessageView": {
                "previousSampleId": "sap.m.sample.MessageViewInsidePopover",
                "nextSampleId": "sap.m.sample.MessageViewInsideDialog"
              }
            },
            "key": "#/sample/sap.m.sample.MessageViewInsideResponsivePopover/preview"
          },
          {
            "id": "sap.m.sample.MessageViewInsideDialog",
            "name": "Message View inside Dialog",
            "description": "A sample with Message View placed inside a Dialog.",
            "entityId": "sap.m.MessageView",
            "contexts": {
              "sap.m.MessageView": {
                "previousSampleId": "sap.m.sample.MessageViewInsideResponsivePopover",
                "nextSampleId": "sap.m.sample.MessageViewWithGrouping"
              }
            },
            "key": "#/sample/sap.m.sample.MessageViewInsideDialog/preview"
          },
          {
            "id": "sap.m.sample.MessageViewWithGrouping",
            "name": "Message View with Grouping",
            "description": "A sample with Message View and inside a Dialog and grouping of items",
            "entityId": "sap.m.MessageView",
            "contexts": {
              "sap.m.MessageView": {
                "previousSampleId": "sap.m.sample.MessageViewInsideDialog"
              }
            },
            "key": "#/sample/sap.m.sample.MessageViewWithGrouping/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Message View MessageView Container Message View inside Popover A sample with Message View inside a Popover. Message View inside ResponsivePopover A sample with Message View inside a ResponsivePopover. Message View inside Dialog A sample with Message View placed inside a Dialog. Message View with Grouping A sample with Message View and inside a Dialog and grouping of items Message View inside Popover Message View inside ResponsivePopover Message View inside Dialog Message View with Grouping",
        "sampleCount": 4,
        "key": "#/entity/sap.m.MessageView"
      },
      {
        "id": "sap.m.NumericContent",
        "name": "Numeric Content",
        "category": "Tile",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.NumericContentDifColors",
            "name": "Numeric Content of Different Colors",
            "description": "Shows NumericContent including numbers, units of measurement, and status arrows indicating a trend. The numbers can be colored according to their meaning.",
            "entityId": "sap.m.NumericContent",
            "contexts": {
              "sap.m.NumericContent": {
                "nextSampleId": "sap.m.sample.NumericContentIcon"
              }
            },
            "key": "#/sample/sap.m.sample.NumericContentDifColors/preview"
          },
          {
            "id": "sap.m.sample.NumericContentIcon",
            "name": "Numeric Content with Icon",
            "description": "Shows NumericContent including an icon.",
            "entityId": "sap.m.NumericContent",
            "contexts": {
              "sap.m.NumericContent": {
                "previousSampleId": "sap.m.sample.NumericContentDifColors",
                "nextSampleId": "sap.m.sample.NumericContentWithoutMargin"
              }
            },
            "key": "#/sample/sap.m.sample.NumericContentIcon/preview"
          },
          {
            "id": "sap.m.sample.NumericContentWithoutMargin",
            "name": "Numeric Content Without Margins",
            "description": "This is an example of the NumericContent that contains no margins, so the control is aligned to the left and to the top without any margins.",
            "entityId": "sap.m.NumericContent",
            "contexts": {
              "sap.m.NumericContent": {
                "previousSampleId": "sap.m.sample.NumericContentIcon"
              }
            },
            "key": "#/sample/sap.m.sample.NumericContentWithoutMargin/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Numeric Content NumericContent Tile Numeric Content of Different Colors Shows NumericContent including numbers, units of measurement, and status arrows indicating a trend. The numbers can be colored according to their meaning. Numeric Content with Icon Shows NumericContent including an icon. Numeric Content Without Margins This is an example of the NumericContent that contains no margins, so the control is aligned to the left and to the top without any margins. Numeric Content of Different Colors Numeric Content with Icon Numeric Content Without Margins",
        "sampleCount": 3,
        "key": "#/entity/sap.m.NumericContent"
      },
      {
        "id": "sap.m.QuickView",
        "name": "Quick View",
        "category": "Popup",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.m.sample.QuickView",
            "name": "QuickView",
            "description": "QuickView embedded in popover",
            "entityId": "sap.m.QuickView",
            "contexts": {
              "sap.m.QuickView": {
                "nextSampleId": "sap.m.sample.QuickViewNavOrigin"
              }
            },
            "key": "#/sample/sap.m.sample.QuickView/preview"
          },
          {
            "id": "sap.m.sample.QuickViewNavOrigin",
            "name": "QuickView with navigation and data binding",
            "description": "QuickView using navOrigin parameter when navigating",
            "entityId": "sap.m.QuickView",
            "contexts": {
              "sap.m.QuickView": {
                "previousSampleId": "sap.m.sample.QuickView"
              }
            },
            "key": "#/sample/sap.m.sample.QuickViewNavOrigin/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Quick View QuickView Popup QuickView QuickView embedded in popover QuickView with navigation and data binding QuickView using navOrigin parameter when navigating QuickView QuickView with navigation and data binding",
        "sampleCount": 2,
        "key": "#/entity/sap.m.QuickView"
      },
      {
        "id": "sap.m.QuickViewCard",
        "name": "Quick View Card",
        "category": "Container",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.m.sample.QuickViewCard",
            "name": "QuickViewCard",
            "description": "QuickView embedded in container",
            "entityId": "sap.m.QuickViewCard",
            "contexts": {
              "sap.m.QuickViewCard": {
                "nextSampleId": "sap.m.sample.QuickViewCardScrollBar"
              }
            },
            "key": "#/sample/sap.m.sample.QuickViewCard/preview"
          },
          {
            "id": "sap.m.sample.QuickViewCardScrollBar",
            "name": "QuickViewCard - Scroll example",
            "description": "QuickView embedded in container with scroll bar",
            "entityId": "sap.m.QuickViewCard",
            "contexts": {
              "sap.m.QuickViewCard": {
                "previousSampleId": "sap.m.sample.QuickViewCard"
              }
            },
            "key": "#/sample/sap.m.sample.QuickViewCardScrollBar/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Quick View Card QuickViewCard Container QuickViewCard QuickView embedded in container QuickViewCard - Scroll example QuickView embedded in container with scroll bar QuickViewCard QuickViewCard - Scroll example",
        "sampleCount": 2,
        "key": "#/entity/sap.m.QuickViewCard"
      },
      {
        "id": "sap.m.MessageToast",
        "name": "Message Toast",
        "category": "Popup",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.MessageToast",
            "name": "Message Toast",
            "description": "The Message Toast displays the message text as an overlay to the current screen. It closes automatically after some time without requiring further user interaction.",
            "entityId": "sap.m.MessageToast",
            "contexts": {
              "sap.m.MessageToast": {}
            },
            "key": "#/sample/sap.m.sample.MessageToast/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Message Toast MessageToast Popup Message Toast The Message Toast displays the message text as an overlay to the current screen. It closes automatically after some time without requiring further user interaction. Message Toast",
        "sampleCount": 1,
        "key": "#/entity/sap.m.MessageToast"
      },
      {
        "id": "sap.m.NewsContent",
        "name": "News Content",
        "category": "Tile",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.NewsContent",
            "name": "News Content",
            "description": "This control is used to display the news content text and subheader in a tile.",
            "entityId": "sap.m.NewsContent",
            "contexts": {
              "sap.m.NewsContent": {}
            },
            "key": "#/sample/sap.m.sample.NewsContent/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "News Content NewsContent Tile News Content This control is used to display the news content text and subheader in a tile. News Content",
        "sampleCount": 1,
        "key": "#/entity/sap.m.NewsContent"
      },
      {
        "id": "sap.m.NavContainer",
        "name": "Nav Container",
        "category": "Container",
        "since": "1.10",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.NavContainer",
            "name": "Nav Container",
            "description": "The Nav Container stacks multiple pages and offers an API to switch between them with some animation. Typically application developers would use the App control which inherits from NavContainer.",
            "entityId": "sap.m.NavContainer",
            "contexts": {
              "sap.m.NavContainer": {}
            },
            "key": "#/sample/sap.m.sample.NavContainer/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Nav Container NavContainer Container Nav Container The Nav Container stacks multiple pages and offers an API to switch between them with some animation. Typically application developers would use the App control which inherits from NavContainer. Nav Container",
        "sampleCount": 1,
        "key": "#/entity/sap.m.NavContainer"
      },
      {
        "id": "sap.m.ObjectAttribute",
        "name": "Object Attribute",
        "category": "Display",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.ObjectAttributes",
            "name": "Object Attribute",
            "description": "This is an example of Object Attribute used standalone.",
            "entityId": "sap.m.ObjectAttribute",
            "contexts": {
              "sap.m.ObjectAttribute": {
                "nextSampleId": "sap.m.sample.ObjectAttributeInTable"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectAttributes/preview"
          },
          {
            "id": "sap.m.sample.ObjectAttributeInTable",
            "name": "Object Attribute inside Table",
            "description": "This is an example of Object Attribute used inside Table.",
            "entityId": "sap.m.ObjectAttribute",
            "contexts": {
              "sap.m.ObjectAttribute": {
                "previousSampleId": "sap.m.sample.ObjectAttributes",
                "nextSampleId": "sap.m.sample.ObjectHeaderResponsiveI"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectAttributeInTable/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderResponsiveI",
            "name": "Object Header Responsive I",
            "description": "This is a responsive Object Header with a Title, 2 Statuses/Attributes rendered next to the title in a fullScreenOptimized mode (fullScreenOptimized = true).",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectAttribute": {
                "previousSampleId": "sap.m.sample.ObjectAttributeInTable",
                "nextSampleId": "sap.m.sample.ObjectHeaderActiveAttributes"
              },
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderTitleSel",
                "nextSampleId": "sap.m.sample.ObjectHeaderResponsiveII"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderResponsiveI/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderActiveAttributes",
            "name": "Object Header – Active Attributes",
            "description": "Active Object Attributes can trigger actions, such as navigating to related content inside or outside of the current application, or displaying additional information in a popover.",
            "entityId": "sap.m.ObjectAttribute",
            "contexts": {
              "sap.m.ObjectAttribute": {
                "previousSampleId": "sap.m.sample.ObjectHeaderResponsiveI"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderActiveAttributes/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Object Attribute ObjectAttribute Display Object Attribute This is an example of Object Attribute used standalone. Object Attribute inside Table This is an example of Object Attribute used inside Table. Object Header Responsive I This is a responsive Object Header with a Title, 2 Statuses/Attributes rendered next to the title in a fullScreenOptimized mode (fullScreenOptimized = true). Object Header – Active Attributes Active Object Attributes can trigger actions, such as navigating to related content inside or outside of the current application, or displaying additional information in a popover. Object Attribute Object Attribute inside Table Object Header Responsive I Object Header – Active Attributes",
        "sampleCount": 4,
        "key": "#/entity/sap.m.ObjectAttribute"
      },
      {
        "id": "sap.m.ObjectHeader",
        "name": "Object Header",
        "category": "Display",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.ObjectHeader",
            "name": "Object Header",
            "description": "This is a Object Header which displays the basic information about objects similar to the Object List Item. Besides a title and number you can show multiple attributes (on the left) and statuses (on the right).",
            "entityId": "sap.m.ObjectStatus",
            "contexts": {
              "sap.m.ObjectHeader": {
                "nextSampleId": "sap.m.sample.ObjectHeaderCondensed"
              },
              "sap.m.ObjectStatus": {
                "previousSampleId": "sap.m.sample.ObjectStatus"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeader/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderCondensed",
            "name": "Object Header - Condensed",
            "description": "The Object Header is shown in condensed mode with title, number, number unit and one attribute.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeader",
                "nextSampleId": "sap.m.sample.ObjectHeaderFavFlag"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderCondensed/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderFavFlag",
            "name": "Object Header - Favorite & Flag",
            "description": "The Object Header can indicate whether the object is a favorite, or has been flagged for further action. Changing these states is done elsewhere.<br><br><b>Note:</b> The <code>markFlagged</code> and <code>markFavorite</code> properties are deprecated as of version 1.42. We recommend using the <code>markers</code> aggregation instead.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderCondensed",
                "nextSampleId": "sap.m.sample.ObjectHeaderImage"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderFavFlag/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderImage",
            "name": "Object Header - With Image",
            "description": "An Object Header will also make space for an image if one is specified, via a URL for the 'icon' property. \nNote: This example shows the image inside ObjectHeader with the responsive property set to false. On phone in portrait mode, the image remains visible.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderFavFlag",
                "nextSampleId": "sap.m.sample.ObjectHeaderCircleImage"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderImage/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderCircleImage",
            "name": "Object Header - With Circle-shaped Image",
            "description": "An Object Header can set shape of the image by using 'imageShape' property. The shapes could be Square (by default) and Circle. \nNote: This example shows the image inside ObjectHeader with the responsive property set to true. On phone in portrait mode, the image is hidden.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderImage",
                "nextSampleId": "sap.m.sample.ObjectHeaderTitleActive"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderCircleImage/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderTitleActive",
            "name": "Object Header - Active Title",
            "description": "The Object Header's title can be active to trigger further actions like showing additional information in a Popover.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderCircleImage",
                "nextSampleId": "sap.m.sample.ObjectHeaderTitleSel"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderTitleActive/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderTitleSel",
            "name": "Object Header - Select Title",
            "description": "This is a Object Header with a title selection. This can be used to switch between variants of the business object being shown.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderTitleActive",
                "nextSampleId": "sap.m.sample.ObjectHeaderResponsiveI"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderTitleSel/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderResponsiveI",
            "name": "Object Header Responsive I",
            "description": "This is a responsive Object Header with a Title, 2 Statuses/Attributes rendered next to the title in a fullScreenOptimized mode (fullScreenOptimized = true).",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectAttribute": {
                "previousSampleId": "sap.m.sample.ObjectAttributeInTable",
                "nextSampleId": "sap.m.sample.ObjectHeaderActiveAttributes"
              },
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderTitleSel",
                "nextSampleId": "sap.m.sample.ObjectHeaderResponsiveII"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderResponsiveI/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderResponsiveII",
            "name": "Object Header Responsive II",
            "description": "This is a responsive Object Header with a Title, 2 Statuses/Attributes rendered below the title in a Master/Detail mode (fullScreenOptimized = false).",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderResponsiveI",
                "nextSampleId": "sap.m.sample.ObjectHeaderResponsiveIII"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderResponsiveII/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderResponsiveIII",
            "name": "Object Header Responsive III",
            "description": "This is a responsive Object Header with a Title, number, 6 Statuses/Attributes rendered in 4 columns in a fullScreenOptimized mode (fullScreenOptimized = true).",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderResponsiveII",
                "nextSampleId": "sap.m.sample.ObjectHeaderResponsiveIV"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderResponsiveIII/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderResponsiveIV",
            "name": "Object Header Responsive IV",
            "description": "This is a responsive Object Header with a Title, number, 6 Statuses/Attributes rendered in 3 columns in a Master/Detail mode (fullScreenOptimized = false).",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderResponsiveIII",
                "nextSampleId": "sap.m.sample.ObjectHeaderResponsiveV"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderResponsiveIV/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderResponsiveV",
            "name": "Object Header Responsive V",
            "description": "This is a responsive Object Header without a number and with a Title, 3 Statuses/Attributes.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderResponsiveIV",
                "nextSampleId": "sap.m.sample.ObjectHeaderMarkers"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderResponsiveV/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeaderMarkers",
            "name": "Object Header - markers aggregation",
            "description": "This sample shows the different states of an Object Header, which can be set using the <code>markers</code>.",
            "entityId": "sap.m.ObjectHeader",
            "contexts": {
              "sap.m.ObjectHeader": {
                "previousSampleId": "sap.m.sample.ObjectHeaderResponsiveV"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeaderMarkers/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Object Header ObjectHeader Display Object Header This is a Object Header which displays the basic information about objects similar to the Object List Item. Besides a title and number you can show multiple attributes (on the left) and statuses (on the right). Object Header - Condensed The Object Header is shown in condensed mode with title, number, number unit and one attribute. Object Header - Favorite & Flag The Object Header can indicate whether the object is a favorite, or has been flagged for further action. Changing these states is done elsewhere.<br><br><b>Note:</b> The <code>markFlagged</code> and <code>markFavorite</code> properties are deprecated as of version 1.42. We recommend using the <code>markers</code> aggregation instead. Object Header - With Image An Object Header will also make space for an image if one is specified, via a URL for the 'icon' property. \nNote: This example shows the image inside ObjectHeader with the responsive property set to false. On phone in portrait mode, the image remains visible. Object Header - With Circle-shaped Image An Object Header can set shape of the image by using 'imageShape' property. The shapes could be Square (by default) and Circle. \nNote: This example shows the image inside ObjectHeader with the responsive property set to true. On phone in portrait mode, the image is hidden. Object Header - Active Title The Object Header's title can be active to trigger further actions like showing additional information in a Popover. Object Header - Select Title This is a Object Header with a title selection. This can be used to switch between variants of the business object being shown. Object Header Responsive I This is a responsive Object Header with a Title, 2 Statuses/Attributes rendered next to the title in a fullScreenOptimized mode (fullScreenOptimized = true). Object Header Responsive II This is a responsive Object Header with a Title, 2 Statuses/Attributes rendered below the title in a Master/Detail mode (fullScreenOptimized = false). Object Header Responsive III This is a responsive Object Header with a Title, number, 6 Statuses/Attributes rendered in 4 columns in a fullScreenOptimized mode (fullScreenOptimized = true). Object Header Responsive IV This is a responsive Object Header with a Title, number, 6 Statuses/Attributes rendered in 3 columns in a Master/Detail mode (fullScreenOptimized = false). Object Header Responsive V This is a responsive Object Header without a number and with a Title, 3 Statuses/Attributes. Object Header - markers aggregation This sample shows the different states of an Object Header, which can be set using the <code>markers</code>. Object Header Object Header - Condensed Object Header - Favorite & Flag Object Header - With Image Object Header - With Circle-shaped Image Object Header - Active Title Object Header - Select Title Object Header Responsive I Object Header Responsive II Object Header Responsive III Object Header Responsive IV Object Header Responsive V Object Header - markers aggregation",
        "sampleCount": 13,
        "key": "#/entity/sap.m.ObjectHeader"
      },
      {
        "id": "sap.m.ObjectIdentifier",
        "name": "Object Identifier",
        "category": "Display",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.ObjectIdentifier",
            "name": "Object Identifier",
            "description": "The object identifier is a small building block representing an object by a title and short description. Often it is used in the first column of a table.",
            "entityId": "sap.m.ObjectIdentifier",
            "contexts": {
              "sap.m.ObjectIdentifier": {
                "nextSampleId": "sap.m.sample.Table"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectIdentifier/preview"
          },
          {
            "id": "sap.m.sample.Table",
            "name": "Table - Columns",
            "description": "The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Column": {},
              "sap.m.ColumnListItem": {
                "nextSampleId": "sap.m.sample.TableTest"
              },
              "sap.m.ObjectIdentifier": {
                "previousSampleId": "sap.m.sample.ObjectIdentifier"
              },
              "sap.m.ObjectNumber": {
                "previousSampleId": "sap.m.sample.ObjectNumber"
              },
              "sap.m.Table": {
                "nextSampleId": "sap.m.sample.TableColumnWidth"
              }
            },
            "key": "#/sample/sap.m.sample.Table/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Object Identifier ObjectIdentifier Display Object Identifier The object identifier is a small building block representing an object by a title and short description. Often it is used in the first column of a table. Table - Columns The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options. Object Identifier Table - Columns",
        "sampleCount": 2,
        "key": "#/entity/sap.m.ObjectIdentifier"
      },
      {
        "id": "sap.m.ObjectMarker",
        "name": "Object Marker",
        "category": "Display",
        "since": "1.38",
        "samples": [
          {
            "id": "sap.m.sample.ObjectMarker",
            "name": "Object Marker in a table",
            "description": "The <code>ObjectMarker</code> is a small building block representing an object by an icon or text and icon. Often it is used in a table.",
            "entityId": "sap.m.ObjectMarker",
            "contexts": {
              "sap.m.ObjectMarker": {}
            },
            "key": "#/sample/sap.m.sample.ObjectMarker/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Object Marker ObjectMarker Display Object Marker in a table The <code>ObjectMarker</code> is a small building block representing an object by an icon or text and icon. Often it is used in a table. Object Marker in a table",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ObjectMarker"
      },
      {
        "id": "sap.m.ObjectNumber",
        "name": "Object Number",
        "category": "Display",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.ObjectNumber",
            "name": "Object Number",
            "description": "The object number is a small building block representing an important, numerical attribute of an object together with it's unit. Often it is used in the last column of a table.",
            "entityId": "sap.m.ObjectNumber",
            "contexts": {
              "sap.m.ObjectNumber": {
                "nextSampleId": "sap.m.sample.Table"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectNumber/preview"
          },
          {
            "id": "sap.m.sample.Table",
            "name": "Table - Columns",
            "description": "The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Column": {},
              "sap.m.ColumnListItem": {
                "nextSampleId": "sap.m.sample.TableTest"
              },
              "sap.m.ObjectIdentifier": {
                "previousSampleId": "sap.m.sample.ObjectIdentifier"
              },
              "sap.m.ObjectNumber": {
                "previousSampleId": "sap.m.sample.ObjectNumber"
              },
              "sap.m.Table": {
                "nextSampleId": "sap.m.sample.TableColumnWidth"
              }
            },
            "key": "#/sample/sap.m.sample.Table/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Object Number ObjectNumber Display Object Number The object number is a small building block representing an important, numerical attribute of an object together with it's unit. Often it is used in the last column of a table. Table - Columns The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options. Object Number Table - Columns",
        "sampleCount": 2,
        "key": "#/entity/sap.m.ObjectNumber"
      },
      {
        "id": "sap.m.ObjectStatus",
        "name": "Object Status",
        "category": "Display",
        "since": "1.12",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.ObjectStatus",
            "name": "Object Status",
            "description": "The object status is a small building block representing a status with a semantic color.",
            "entityId": "sap.m.ObjectStatus",
            "contexts": {
              "sap.m.ObjectStatus": {
                "nextSampleId": "sap.m.sample.ObjectHeader"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectStatus/preview"
          },
          {
            "id": "sap.m.sample.ObjectHeader",
            "name": "Object Header",
            "description": "This is a Object Header which displays the basic information about objects similar to the Object List Item. Besides a title and number you can show multiple attributes (on the left) and statuses (on the right).",
            "entityId": "sap.m.ObjectStatus",
            "contexts": {
              "sap.m.ObjectHeader": {
                "nextSampleId": "sap.m.sample.ObjectHeaderCondensed"
              },
              "sap.m.ObjectStatus": {
                "previousSampleId": "sap.m.sample.ObjectStatus"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectHeader/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Object Status ObjectStatus Display Object Status The object status is a small building block representing a status with a semantic color. Object Header This is a Object Header which displays the basic information about objects similar to the Object List Item. Besides a title and number you can show multiple attributes (on the left) and statuses (on the right). Object Status Object Header",
        "sampleCount": 2,
        "key": "#/entity/sap.m.ObjectStatus"
      },
      {
        "id": "sap.m.ObjectListItem",
        "name": "Object List Item",
        "category": "List",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.ObjectListItem",
            "name": "Object List Item",
            "description": "The Object List Item has many possibilities to provide a quick overview for an object within a list.",
            "entityId": "sap.m.ObjectListItem",
            "contexts": {
              "sap.m.ObjectListItem": {
                "nextSampleId": "sap.m.sample.ObjectListItemMarkLocked"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectListItem/preview"
          },
          {
            "id": "sap.m.sample.ObjectListItemMarkLocked",
            "name": "Object List Item - markLocked, markFlagged, markFavorite",
            "description": "This sample shows the different states of an Object List Item, which can be set using the <code>markLocked</code>, <code>markFlagged</code>, and <code>markFavorite</code> properties.<br><br><b>Note:</b> The <code>markLocked</code>, <code>markFlagged</code>, and <code>markFavourite</code> properties are deprecated as of version 1.42. We recommend using the <code>markers</code> aggregation instead.",
            "entityId": "sap.m.ObjectListItem",
            "contexts": {
              "sap.m.ObjectListItem": {
                "previousSampleId": "sap.m.sample.ObjectListItem",
                "nextSampleId": "sap.m.sample.ObjectListItemMarkers"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectListItemMarkLocked/preview"
          },
          {
            "id": "sap.m.sample.ObjectListItemMarkers",
            "name": "Object List Item - markers aggregation",
            "description": "This sample shows the different states of an Object List Item, which can be set using the <code>markers</code> aggregation.",
            "entityId": "sap.m.ObjectListItem",
            "contexts": {
              "sap.m.ObjectListItem": {
                "previousSampleId": "sap.m.sample.ObjectListItemMarkLocked"
              }
            },
            "key": "#/sample/sap.m.sample.ObjectListItemMarkers/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Object List Item ObjectListItem List Object List Item The Object List Item has many possibilities to provide a quick overview for an object within a list. Object List Item - markLocked, markFlagged, markFavorite This sample shows the different states of an Object List Item, which can be set using the <code>markLocked</code>, <code>markFlagged</code>, and <code>markFavorite</code> properties.<br><br><b>Note:</b> The <code>markLocked</code>, <code>markFlagged</code>, and <code>markFavourite</code> properties are deprecated as of version 1.42. We recommend using the <code>markers</code> aggregation instead. Object List Item - markers aggregation This sample shows the different states of an Object List Item, which can be set using the <code>markers</code> aggregation. Object List Item Object List Item - markLocked, markFlagged, markFavorite Object List Item - markers aggregation",
        "sampleCount": 3,
        "key": "#/entity/sap.m.ObjectListItem"
      },
      {
        "id": "sap.m.OverflowToolbar",
        "name": "Overflow Toolbar",
        "category": "Container",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.m.sample.OverflowToolbarSimple",
            "name": "Overflow Toolbar - layout",
            "description": "Overflow Toolbar can contain the same controls as Toolbar with the added benefit that buttons that do not fit are moved to an overflow area when overflow occurs.",
            "entityId": "sap.m.OverflowToolbar",
            "contexts": {
              "sap.m.GenericTag": {
                "previousSampleId": "sap.f.sample.DynamicPageFreeStyle"
              },
              "sap.m.OverflowToolbar": {
                "nextSampleId": "sap.m.sample.OverflowToolbarFooter"
              }
            },
            "key": "#/sample/sap.m.sample.OverflowToolbarSimple/preview"
          },
          {
            "id": "sap.m.sample.OverflowToolbarFooter",
            "name": "Overflow Toolbar - in a table and in the footer of a page",
            "description": "Overflow Toolbar is useful for showing lists of action buttons that can display an icon in the toolbar, and icon+text when in the overflow.",
            "entityId": "sap.m.OverflowToolbarToggleButton",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.OverflowToolbarSimple",
                "nextSampleId": "sap.m.sample.ToolbarAlignment"
              },
              "sap.m.OverflowToolbarButton": {},
              "sap.m.OverflowToolbarToggleButton": {}
            },
            "key": "#/sample/sap.m.sample.OverflowToolbarFooter/preview"
          },
          {
            "id": "sap.m.sample.ToolbarAlignment",
            "name": "OverflowToolbar - Alignment",
            "description": "OverflowToolbar and Toolbar are often used for left/right alignment. This is easily achieved with ToolbarSpacer.",
            "entityId": "sap.m.OverflowToolbar",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.OverflowToolbarFooter",
                "nextSampleId": "sap.m.sample.ToolbarActive"
              }
            },
            "key": "#/sample/sap.m.sample.ToolbarAlignment/preview"
          },
          {
            "id": "sap.m.sample.ToolbarActive",
            "name": "OverflowToolbar - Active",
            "description": "Making an OverflowToolbar or a Toolbar active allows them to react to the click event.",
            "entityId": "sap.m.OverflowToolbar",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.ToolbarAlignment",
                "nextSampleId": "sap.m.sample.ToolbarEnabled"
              }
            },
            "key": "#/sample/sap.m.sample.ToolbarActive/preview"
          },
          {
            "id": "sap.m.sample.ToolbarEnabled",
            "name": "OverflowToolbar - Enabled",
            "description": "The Enabled property can be used to enable or disable all the controls inside the OverflowToolbar/Toolbar.",
            "entityId": "sap.m.OverflowToolbar",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.ToolbarActive",
                "nextSampleId": "sap.m.sample.ToolbarDesign"
              }
            },
            "key": "#/sample/sap.m.sample.ToolbarEnabled/preview"
          },
          {
            "id": "sap.m.sample.ToolbarDesign",
            "name": "OverflowToolbar - Design and styling",
            "description": "The Design and Style properties can be used to specify the visual design of the OverflowToolbar/Toolbar.",
            "entityId": "sap.m.OverflowToolbar",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.ToolbarEnabled",
                "nextSampleId": "sap.m.sample.TitleToolBar"
              }
            },
            "key": "#/sample/sap.m.sample.ToolbarDesign/preview"
          },
          {
            "id": "sap.m.sample.TitleToolBar",
            "name": "Placing a Title in OverflowToolbar/Toolbar",
            "description": "The sap.m.Title control can be used to place a title inside an OverflowToolbar/Toolbar.",
            "entityId": "sap.m.OverflowToolbar",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.ToolbarDesign"
              }
            },
            "key": "#/sample/sap.m.sample.TitleToolBar/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Overflow Toolbar OverflowToolbar Container Overflow Toolbar - layout Overflow Toolbar can contain the same controls as Toolbar with the added benefit that buttons that do not fit are moved to an overflow area when overflow occurs. Overflow Toolbar - in a table and in the footer of a page Overflow Toolbar is useful for showing lists of action buttons that can display an icon in the toolbar, and icon+text when in the overflow. OverflowToolbar - Alignment OverflowToolbar and Toolbar are often used for left/right alignment. This is easily achieved with ToolbarSpacer. OverflowToolbar - Active Making an OverflowToolbar or a Toolbar active allows them to react to the click event. OverflowToolbar - Enabled The Enabled property can be used to enable or disable all the controls inside the OverflowToolbar/Toolbar. OverflowToolbar - Design and styling The Design and Style properties can be used to specify the visual design of the OverflowToolbar/Toolbar. Placing a Title in OverflowToolbar/Toolbar The sap.m.Title control can be used to place a title inside an OverflowToolbar/Toolbar. Overflow Toolbar - layout Overflow Toolbar - in a table and in the footer of a page OverflowToolbar - Alignment OverflowToolbar - Active OverflowToolbar - Enabled OverflowToolbar - Design and styling Placing a Title in OverflowToolbar/Toolbar",
        "sampleCount": 7,
        "key": "#/entity/sap.m.OverflowToolbar"
      },
      {
        "id": "sap.m.OverflowToolbarButton",
        "name": "Overflow Toolbar Button",
        "category": "Action",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.m.sample.OverflowToolbarFooter",
            "name": "Overflow Toolbar - in a table and in the footer of a page",
            "description": "Overflow Toolbar is useful for showing lists of action buttons that can display an icon in the toolbar, and icon+text when in the overflow.",
            "entityId": "sap.m.OverflowToolbarToggleButton",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.OverflowToolbarSimple",
                "nextSampleId": "sap.m.sample.ToolbarAlignment"
              },
              "sap.m.OverflowToolbarButton": {},
              "sap.m.OverflowToolbarToggleButton": {}
            },
            "key": "#/sample/sap.m.sample.OverflowToolbarFooter/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Overflow Toolbar Button OverflowToolbarButton Action Overflow Toolbar - in a table and in the footer of a page Overflow Toolbar is useful for showing lists of action buttons that can display an icon in the toolbar, and icon+text when in the overflow. Overflow Toolbar - in a table and in the footer of a page",
        "sampleCount": 1,
        "key": "#/entity/sap.m.OverflowToolbarButton"
      },
      {
        "id": "sap.m.OverflowToolbarToggleButton",
        "name": "Overflow Toolbar Toggle Button",
        "category": "Action",
        "since": "1.52",
        "samples": [
          {
            "id": "sap.m.sample.OverflowToolbarFooter",
            "name": "Overflow Toolbar - in a table and in the footer of a page",
            "description": "Overflow Toolbar is useful for showing lists of action buttons that can display an icon in the toolbar, and icon+text when in the overflow.",
            "entityId": "sap.m.OverflowToolbarToggleButton",
            "contexts": {
              "sap.m.OverflowToolbar": {
                "previousSampleId": "sap.m.sample.OverflowToolbarSimple",
                "nextSampleId": "sap.m.sample.ToolbarAlignment"
              },
              "sap.m.OverflowToolbarButton": {},
              "sap.m.OverflowToolbarToggleButton": {}
            },
            "key": "#/sample/sap.m.sample.OverflowToolbarFooter/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Overflow Toolbar Toggle Button OverflowToolbarToggleButton Action Overflow Toolbar - in a table and in the footer of a page Overflow Toolbar is useful for showing lists of action buttons that can display an icon in the toolbar, and icon+text when in the overflow. Overflow Toolbar - in a table and in the footer of a page",
        "sampleCount": 1,
        "key": "#/entity/sap.m.OverflowToolbarToggleButton"
      },
      {
        "id": "sap.m.Page",
        "name": "Page",
        "category": "Container",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.Page",
            "name": "Page,Toolbar and Bar",
            "description": "Each screen of a mobile application is typically represented by a 'Page' consisting of a header, a scrollable content area and optionally a footer. The standard header offers a navigation button and a title. Alternatively you can provide a customer header. Gernerally you should use Toolbars in the Page. If you need a centered title you may use a Bar.",
            "entityId": "sap.m.Page",
            "contexts": {
              "sap.m.Bar": {
                "nextSampleId": "sap.m.sample.ToolbarVsBar"
              },
              "sap.m.Page": {
                "nextSampleId": "sap.m.sample.PageStandardClasses"
              }
            },
            "key": "#/sample/sap.m.sample.Page/preview"
          },
          {
            "id": "sap.m.sample.PageStandardClasses",
            "name": "Fiori Object Page - Standard Classes",
            "description": "This page implements the same sample as in 'Fiori Sample Page - sapUiFioriObjectPage' using standard margin classes. In contrast to using 'sapUiFioriObjectPage', the margins used for form, list, table and panel are responsive: they adapt to the available screen width. For more information, please search for 'Standard Margins' and take a look at our samples.",
            "entityId": "sap.m.Page",
            "contexts": {
              "sap.m.Page": {
                "previousSampleId": "sap.m.sample.Page",
                "nextSampleId": "sap.m.sample.PageListReportIconTabBar"
              }
            },
            "key": "#/sample/sap.m.sample.PageStandardClasses/preview"
          },
          {
            "id": "sap.m.sample.PageListReportIconTabBar",
            "name": "Flexible sizing - Icon Tab Bar",
            "description": "This page shows flexible sizing with an Icon Tab Bar: The upper part extends with its content, but doesn't react to viewport changes. The Icon Tab Bar reacts to the viewport size. The table inside takes the available space. If the minimum size of the table is reached, the page begins to scroll.",
            "entityId": "sap.m.Page",
            "contexts": {
              "sap.m.Page": {
                "previousSampleId": "sap.m.sample.PageStandardClasses",
                "nextSampleId": "sap.m.sample.PageListReportToolbar"
              }
            },
            "key": "#/sample/sap.m.sample.PageListReportIconTabBar/preview"
          },
          {
            "id": "sap.m.sample.PageListReportToolbar",
            "name": "Flexible sizing - Toolbar",
            "description": "This page shows flexible sizing with a Toolbar. The upper part extends with its content, but doesn't react to viewport changes. The lower part reacts to the viewport size. The table inside takes the available space. If the minimum size of the table is reached, the page begins to scroll.",
            "entityId": "sap.m.Page",
            "contexts": {
              "sap.m.Page": {
                "previousSampleId": "sap.m.sample.PageListReportIconTabBar",
                "nextSampleId": "sap.m.sample.PageFloatingFooter"
              }
            },
            "key": "#/sample/sap.m.sample.PageListReportToolbar/preview"
          },
          {
            "id": "sap.m.sample.PageFloatingFooter",
            "name": "Page Floating Footer",
            "description": "The floating Footer allows the user to see the underlying content.",
            "entityId": "sap.m.Page",
            "contexts": {
              "sap.m.Page": {
                "previousSampleId": "sap.m.sample.PageListReportToolbar"
              }
            },
            "key": "#/sample/sap.m.sample.PageFloatingFooter/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Page Page Container Page,Toolbar and Bar Each screen of a mobile application is typically represented by a 'Page' consisting of a header, a scrollable content area and optionally a footer. The standard header offers a navigation button and a title. Alternatively you can provide a customer header. Gernerally you should use Toolbars in the Page. If you need a centered title you may use a Bar. Fiori Object Page - Standard Classes This page implements the same sample as in 'Fiori Sample Page - sapUiFioriObjectPage' using standard margin classes. In contrast to using 'sapUiFioriObjectPage', the margins used for form, list, table and panel are responsive: they adapt to the available screen width. For more information, please search for 'Standard Margins' and take a look at our samples. Flexible sizing - Icon Tab Bar This page shows flexible sizing with an Icon Tab Bar: The upper part extends with its content, but doesn't react to viewport changes. The Icon Tab Bar reacts to the viewport size. The table inside takes the available space. If the minimum size of the table is reached, the page begins to scroll. Flexible sizing - Toolbar This page shows flexible sizing with a Toolbar. The upper part extends with its content, but doesn't react to viewport changes. The lower part reacts to the viewport size. The table inside takes the available space. If the minimum size of the table is reached, the page begins to scroll. Page Floating Footer The floating Footer allows the user to see the underlying content. Page,Toolbar and Bar Fiori Object Page - Standard Classes Flexible sizing - Icon Tab Bar Flexible sizing - Toolbar Page Floating Footer",
        "sampleCount": 5,
        "key": "#/entity/sap.m.Page"
      },
      {
        "id": "sap.m.Panel",
        "name": "Panel",
        "category": "Container",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.m.sample.Panel",
            "name": "Panel",
            "description": "Panels are helpful to group custom content. They can be decorated with header and info toolbars.",
            "entityId": "sap.m.Panel",
            "contexts": {
              "sap.m.Panel": {
                "nextSampleId": "sap.m.sample.PanelExpanded"
              }
            },
            "key": "#/sample/sap.m.sample.Panel/preview"
          },
          {
            "id": "sap.m.sample.PanelExpanded",
            "name": "Panel - Expand / Collapse",
            "description": "Panels also have the possibility to expand/collapse their content (including the infoToolbar if available). [since rel. 1.22]",
            "entityId": "sap.m.Panel",
            "contexts": {
              "sap.m.Panel": {
                "previousSampleId": "sap.m.sample.Panel"
              }
            },
            "key": "#/sample/sap.m.sample.PanelExpanded/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Panel Panel Container Panel Panels are helpful to group custom content. They can be decorated with header and info toolbars. Panel - Expand / Collapse Panels also have the possibility to expand/collapse their content (including the infoToolbar if available). [since rel. 1.22] Panel Panel - Expand / Collapse",
        "sampleCount": 2,
        "key": "#/entity/sap.m.Panel"
      },
      {
        "id": "sap.m.PDFViewer",
        "name": "PDF Viewer",
        "category": "Display",
        "since": "1.48",
        "samples": [
          {
            "id": "sap.m.sample.PDFViewerEmbedded",
            "name": "PDF Viewer - Embedded",
            "description": "A PDF viewer embedded in another control.",
            "entityId": "sap.m.PDFViewer",
            "contexts": {
              "sap.m.PDFViewer": {
                "nextSampleId": "sap.m.sample.PDFViewerPopup"
              }
            },
            "key": "#/sample/sap.m.sample.PDFViewerEmbedded/preview"
          },
          {
            "id": "sap.m.sample.PDFViewerPopup",
            "name": "PDF Viewer - Popup",
            "description": "A PDF viewer opening as a popup dialog.",
            "entityId": "sap.m.PDFViewer",
            "contexts": {
              "sap.m.PDFViewer": {
                "previousSampleId": "sap.m.sample.PDFViewerEmbedded",
                "nextSampleId": "sap.m.sample.PDFViewerMultiple"
              }
            },
            "key": "#/sample/sap.m.sample.PDFViewerPopup/preview"
          },
          {
            "id": "sap.m.sample.PDFViewerMultiple",
            "name": "PDF Viewer - Two PDF Documents",
            "description": "Two PDF viewer frames displayed side by side.",
            "entityId": "sap.m.PDFViewer",
            "contexts": {
              "sap.m.PDFViewer": {
                "previousSampleId": "sap.m.sample.PDFViewerPopup"
              }
            },
            "key": "#/sample/sap.m.sample.PDFViewerMultiple/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "PDF Viewer PDFViewer Display PDF Viewer - Embedded A PDF viewer embedded in another control. PDF Viewer - Popup A PDF viewer opening as a popup dialog. PDF Viewer - Two PDF Documents Two PDF viewer frames displayed side by side. PDF Viewer - Embedded PDF Viewer - Popup PDF Viewer - Two PDF Documents",
        "sampleCount": 3,
        "key": "#/entity/sap.m.PDFViewer"
      },
      {
        "id": "sap.m.PlanningCalendar",
        "name": "Planning Calendar",
        "category": "User Input",
        "since": "1.34",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.PlanningCalendar",
            "name": "simple Planning Calendar",
            "description": "PlanningCalendar with single row selection that illustrates the built-in views.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "nextSampleId": "sap.m.sample.PlanningCalendarMulti"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendar/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarMulti",
            "name": "Planning Calendar - multiple selection",
            "description": "PlanningCalendar with multiple row selection. No interval headers are displayed. On click on an interval a new appointment is created.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendar",
                "nextSampleId": "sap.m.sample.PlanningCalendarSingle"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarMulti/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarSingle",
            "name": "Planning Calendar - without row header",
            "description": "PlanningCalendar with only one row without row header.  On click on an interval a new appointment is created.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarMulti",
                "nextSampleId": "sap.m.sample.PlanningCalendarViews"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarSingle/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarViews",
            "name": "Planning Calendar - with custom views",
            "description": "PlanningCalendar with custom views to set number of hours, days and months and change view description. It illustrates both built-in and custom views. Sub-intervals are shown. Custom non-working days and hours are set. In months view some appointments are grouped. The group appointment mode can be toggled to expand the appointments.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarSingle",
                "nextSampleId": "sap.m.sample.PlanningCalendarOneLine"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarViews/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarOneLine",
            "name": "Planning Calendar - with one line appointments",
            "description": "PlanningCalendar showing appointment with only title in one line to save space. The interval headers are only shown if there are some assigned in the visible area.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarViews",
                "nextSampleId": "sap.m.sample.PlanningCalendarMinMax"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarOneLine/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarMinMax",
            "name": "Planning Calendar - with min. and max. date",
            "description": "PlanningCalendar with min. date 2000-01-01 and max. date 2050-12-31",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarOneLine",
                "nextSampleId": "sap.m.sample.PlanningCalendarModifyAppointments"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarMinMax/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarModifyAppointments",
            "name": "Planning Calendar - with appointments modification",
            "description": "PlanningCalendar containing sap.m.Popover with information for the appointments and sap.m.Dialog for creating a new appointment. Note: Illustrates how the PlanningCalendar can be used in combination with the sap.m.Popover and sap.m.Dialog controls for details/create. These features are NOT part of the control.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarMinMax",
                "nextSampleId": "sap.m.sample.PlanningCalendarWithLegend"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarModifyAppointments/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarWithLegend",
            "name": "Planning Calendar - with legend",
            "description": "PlanningCalendar inside the main part of a sap.ui.layout.DynamicSideContent and a sap.m.PlanningCalendarLegend inside the side part. The legend includes calendar and appointments sections. For each sap.m.PlanningCalendarRow in the sap.m.PlanningCalendar some specific special dates of type non-working are set.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarModifyAppointments",
                "nextSampleId": "sap.m.sample.PlanningCalendarDnD"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarWithLegend/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarDnD",
            "name": "Planning Calendar - Drag and Drop",
            "description": "PlanningCalendar with draggable appointments. The sample represents three possible roles. If you are logged as an Admin, you can move appointments both within the same row and between different rows without any restrictions. As a Manager, you have the same rights as the Admin but appointments can be dropped only on free slots (no overlapping). As a team member you can only move the appointments within your own row. By pressing Ctrl/Cmd while dragging, the dropped appointment will copy the initial one.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarWithLegend",
                "nextSampleId": "sap.m.sample.PlanningCalendarWithStickyHeader"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarDnD/preview"
          },
          {
            "id": "sap.m.sample.PlanningCalendarWithStickyHeader",
            "name": "Planning Calendar - with header that remains visible (fixed on top) on scroll",
            "description": "PlanningCalendar with header area that remains visible (fixed on top) when the rest of the content is scrolled out of view.",
            "entityId": "sap.m.PlanningCalendar",
            "contexts": {
              "sap.m.PlanningCalendar": {
                "previousSampleId": "sap.m.sample.PlanningCalendarDnD"
              }
            },
            "key": "#/sample/sap.m.sample.PlanningCalendarWithStickyHeader/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Planning Calendar PlanningCalendar User Input simple Planning Calendar PlanningCalendar with single row selection that illustrates the built-in views. Planning Calendar - multiple selection PlanningCalendar with multiple row selection. No interval headers are displayed. On click on an interval a new appointment is created. Planning Calendar - without row header PlanningCalendar with only one row without row header.  On click on an interval a new appointment is created. Planning Calendar - with custom views PlanningCalendar with custom views to set number of hours, days and months and change view description. It illustrates both built-in and custom views. Sub-intervals are shown. Custom non-working days and hours are set. In months view some appointments are grouped. The group appointment mode can be toggled to expand the appointments. Planning Calendar - with one line appointments PlanningCalendar showing appointment with only title in one line to save space. The interval headers are only shown if there are some assigned in the visible area. Planning Calendar - with min. and max. date PlanningCalendar with min. date 2000-01-01 and max. date 2050-12-31 Planning Calendar - with appointments modification PlanningCalendar containing sap.m.Popover with information for the appointments and sap.m.Dialog for creating a new appointment. Note: Illustrates how the PlanningCalendar can be used in combination with the sap.m.Popover and sap.m.Dialog controls for details/create. These features are NOT part of the control. Planning Calendar - with legend PlanningCalendar inside the main part of a sap.ui.layout.DynamicSideContent and a sap.m.PlanningCalendarLegend inside the side part. The legend includes calendar and appointments sections. For each sap.m.PlanningCalendarRow in the sap.m.PlanningCalendar some specific special dates of type non-working are set. Planning Calendar - Drag and Drop PlanningCalendar with draggable appointments. The sample represents three possible roles. If you are logged as an Admin, you can move appointments both within the same row and between different rows without any restrictions. As a Manager, you have the same rights as the Admin but appointments can be dropped only on free slots (no overlapping). As a team member you can only move the appointments within your own row. By pressing Ctrl/Cmd while dragging, the dropped appointment will copy the initial one. Planning Calendar - with header that remains visible (fixed on top) on scroll PlanningCalendar with header area that remains visible (fixed on top) when the rest of the content is scrolled out of view. simple Planning Calendar Planning Calendar - multiple selection Planning Calendar - without row header Planning Calendar - with custom views Planning Calendar - with one line appointments Planning Calendar - with min. and max. date Planning Calendar - with appointments modification Planning Calendar - with legend Planning Calendar - Drag and Drop Planning Calendar - with header that remains visible (fixed on top) on scroll",
        "sampleCount": 10,
        "key": "#/entity/sap.m.PlanningCalendar"
      },
      {
        "id": "sap.m.SinglePlanningCalendar",
        "name": "Single Planning Calendar",
        "category": "User Input",
        "since": "1.61",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.SinglePlanningCalendar",
            "name": "Single Planning Calendar",
            "description": "This sample demonstrates most of the features available for the SinglePlanningCalendar control.",
            "entityId": "sap.m.SinglePlanningCalendar",
            "contexts": {
              "sap.m.SinglePlanningCalendar": {
                "nextSampleId": "sap.m.sample.SinglePlanningCalendarWithCustomViews"
              }
            },
            "key": "#/sample/sap.m.sample.SinglePlanningCalendar/preview"
          },
          {
            "id": "sap.m.sample.SinglePlanningCalendarWithCustomViews",
            "name": "Single Planning Calendar with Custom Views",
            "description": "SinglePlanningCalendar showing the provided predefined views and custom views.",
            "entityId": "sap.m.SinglePlanningCalendar",
            "contexts": {
              "sap.m.SinglePlanningCalendar": {
                "previousSampleId": "sap.m.sample.SinglePlanningCalendar",
                "nextSampleId": "sap.m.sample.SinglePlanningCalendarWithLegend"
              }
            },
            "key": "#/sample/sap.m.sample.SinglePlanningCalendarWithCustomViews/preview"
          },
          {
            "id": "sap.m.sample.SinglePlanningCalendarWithLegend",
            "name": "Single Planning Calendar with Legend",
            "description": "SinglePlanningCalendar and PlanningCalendarLegend controls used as main and side parts of an sap.ui.layout.DynamicSideContent control.",
            "entityId": "sap.m.SinglePlanningCalendar",
            "contexts": {
              "sap.m.SinglePlanningCalendar": {
                "previousSampleId": "sap.m.sample.SinglePlanningCalendarWithCustomViews",
                "nextSampleId": "sap.m.sample.SinglePlanningCalendarDND"
              }
            },
            "key": "#/sample/sap.m.sample.SinglePlanningCalendarWithLegend/preview"
          },
          {
            "id": "sap.m.sample.SinglePlanningCalendarDND",
            "name": "Single Planning Calendar with Drag and Drop",
            "description": "SinglePlanningCalendar with enabled drag and drop functionality, allowing to create appointments with dragging and dropping, to change the start and end date of appointments by selecting and dragging their top or bottom end, and to copy and paste appointments.",
            "entityId": "sap.m.SinglePlanningCalendar",
            "contexts": {
              "sap.m.SinglePlanningCalendar": {
                "previousSampleId": "sap.m.sample.SinglePlanningCalendarWithLegend",
                "nextSampleId": "sap.m.sample.SinglePlanningCalendarSnappingHeader"
              }
            },
            "key": "#/sample/sap.m.sample.SinglePlanningCalendarDND/preview"
          },
          {
            "id": "sap.m.sample.SinglePlanningCalendarSnappingHeader",
            "name": "Single Planning Calendar with Snapping Header",
            "description": "SinglePlanningCalendar showing the modes for snapping the header part of the calendar.",
            "entityId": "sap.m.SinglePlanningCalendar",
            "contexts": {
              "sap.m.SinglePlanningCalendar": {
                "previousSampleId": "sap.m.sample.SinglePlanningCalendarDND",
                "nextSampleId": "sap.m.sample.SinglePlanningCalendarCreateApp"
              }
            },
            "key": "#/sample/sap.m.sample.SinglePlanningCalendarSnappingHeader/preview"
          },
          {
            "id": "sap.m.sample.SinglePlanningCalendarCreateApp",
            "name": "Single Planning Calendar - Create and Modify Appointments",
            "description": "This sample demonstrates how the SinglePlanningCalendar control can be used in combination with sap.m.Dialog to create new appointments and sap.m.ResponsivePopover to edit already existing appointments. It also showcases how appointments can be deleted. Please note that these features are not part of the control.",
            "entityId": "sap.m.SinglePlanningCalendar",
            "contexts": {
              "sap.m.SinglePlanningCalendar": {
                "previousSampleId": "sap.m.sample.SinglePlanningCalendarSnappingHeader"
              }
            },
            "key": "#/sample/sap.m.sample.SinglePlanningCalendarCreateApp/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Single Planning Calendar SinglePlanningCalendar User Input Single Planning Calendar This sample demonstrates most of the features available for the SinglePlanningCalendar control. Single Planning Calendar with Custom Views SinglePlanningCalendar showing the provided predefined views and custom views. Single Planning Calendar with Legend SinglePlanningCalendar and PlanningCalendarLegend controls used as main and side parts of an sap.ui.layout.DynamicSideContent control. Single Planning Calendar with Drag and Drop SinglePlanningCalendar with enabled drag and drop functionality, allowing to create appointments with dragging and dropping, to change the start and end date of appointments by selecting and dragging their top or bottom end, and to copy and paste appointments. Single Planning Calendar with Snapping Header SinglePlanningCalendar showing the modes for snapping the header part of the calendar. Single Planning Calendar - Create and Modify Appointments This sample demonstrates how the SinglePlanningCalendar control can be used in combination with sap.m.Dialog to create new appointments and sap.m.ResponsivePopover to edit already existing appointments. It also showcases how appointments can be deleted. Please note that these features are not part of the control. Single Planning Calendar Single Planning Calendar with Custom Views Single Planning Calendar with Legend Single Planning Calendar with Drag and Drop Single Planning Calendar with Snapping Header Single Planning Calendar - Create and Modify Appointments",
        "sampleCount": 6,
        "key": "#/entity/sap.m.SinglePlanningCalendar"
      },
      {
        "id": "sap.m.Popover",
        "name": "Popover",
        "category": "Popup",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.Popover",
            "name": "Popover",
            "description": "The Popover controls allows to show contextual information without leaving the current page. Press somewhere outside the popover to close it.",
            "entityId": "sap.m.Popover",
            "contexts": {
              "sap.m.Popover": {
                "nextSampleId": "sap.m.sample.PopoverNavCon"
              }
            },
            "key": "#/sample/sap.m.sample.Popover/preview"
          },
          {
            "id": "sap.m.sample.PopoverNavCon",
            "name": "Popover With NavContainer",
            "description": "You can nest NavContainers in Popovers (and Dialogs) to navigate to further details in place.",
            "entityId": "sap.m.Popover",
            "contexts": {
              "sap.m.Popover": {
                "previousSampleId": "sap.m.sample.Popover"
              }
            },
            "key": "#/sample/sap.m.sample.PopoverNavCon/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Popover Popover Popup Popover The Popover controls allows to show contextual information without leaving the current page. Press somewhere outside the popover to close it. Popover With NavContainer You can nest NavContainers in Popovers (and Dialogs) to navigate to further details in place. Popover Popover With NavContainer",
        "sampleCount": 2,
        "key": "#/entity/sap.m.Popover"
      },
      {
        "id": "sap.m.ProgressIndicator",
        "name": "Progress Indicator",
        "category": "Display",
        "since": "1.14",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.ProgressIndicator",
            "name": "Progress Indicator",
            "description": "Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.",
            "entityId": "sap.m.ProgressIndicator",
            "contexts": {
              "sap.m.ProgressIndicator": {}
            },
            "key": "#/sample/sap.m.sample.ProgressIndicator/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Progress Indicator ProgressIndicator Display Progress Indicator Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color. Progress Indicator",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ProgressIndicator"
      },
      {
        "id": "sap.m.PullToRefresh",
        "name": "Pull To Refresh",
        "category": "Action",
        "since": "1.10",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.PullToRefresh",
            "name": "Pull To Refresh",
            "description": "With the Pull to Refresh you can trigger an update operation by swiping the current page down on touch devices. On other devices the Pull To Refresh is visible all the time and the user clicks it like a button.",
            "entityId": "sap.m.PullToRefresh",
            "contexts": {
              "sap.m.PullToRefresh": {
                "nextSampleId": "sap.m.sample.RefreshResponsive"
              }
            },
            "key": "#/sample/sap.m.sample.PullToRefresh/preview"
          },
          {
            "id": "sap.m.sample.RefreshResponsive",
            "name": "Responsive Refresh",
            "description": "An 'Responsive Refresh' can be achieved by the combination of a Search Field's refresh button and a Pull To Refresh, both of which appear depending on whether the device is touch-enabled. A growing stream of backend data is simulated here.",
            "entityId": "sap.m.PullToRefresh",
            "contexts": {
              "sap.m.PullToRefresh": {
                "previousSampleId": "sap.m.sample.PullToRefresh"
              }
            },
            "key": "#/sample/sap.m.sample.RefreshResponsive/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Pull To Refresh PullToRefresh Action Pull To Refresh With the Pull to Refresh you can trigger an update operation by swiping the current page down on touch devices. On other devices the Pull To Refresh is visible all the time and the user clicks it like a button. Responsive Refresh An 'Responsive Refresh' can be achieved by the combination of a Search Field's refresh button and a Pull To Refresh, both of which appear depending on whether the device is touch-enabled. A growing stream of backend data is simulated here. Pull To Refresh Responsive Refresh",
        "sampleCount": 2,
        "key": "#/entity/sap.m.PullToRefresh"
      },
      {
        "id": "sap.m.RadioButton",
        "name": "Radio Button",
        "category": "User Input",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.RadioButton",
            "name": "Radio Button",
            "description": "Typically the Radio Button is used by other controls. E.g. the List uses it for the single selection. But you can also use the Radio Buttons control directly, to allow selection of exactly one of multiple options.",
            "entityId": "sap.m.RadioButton",
            "contexts": {
              "sap.m.RadioButton": {}
            },
            "key": "#/sample/sap.m.sample.RadioButton/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Radio Button RadioButton User Input Radio Button Typically the Radio Button is used by other controls. E.g. the List uses it for the single selection. But you can also use the Radio Buttons control directly, to allow selection of exactly one of multiple options. Radio Button",
        "sampleCount": 1,
        "key": "#/entity/sap.m.RadioButton"
      },
      {
        "id": "sap.m.RadioButtonGroup",
        "name": "Radio Button Group",
        "category": "User Input",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.m.sample.RadioButtonGroup",
            "name": "Radio Button Group",
            "description": "A wrapper for a group of radio buttons.",
            "entityId": "sap.m.RadioButtonGroup",
            "contexts": {
              "sap.m.RadioButtonGroup": {}
            },
            "key": "#/sample/sap.m.sample.RadioButtonGroup/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Radio Button Group RadioButtonGroup User Input Radio Button Group A wrapper for a group of radio buttons. Radio Button Group",
        "sampleCount": 1,
        "key": "#/entity/sap.m.RadioButtonGroup"
      },
      {
        "id": "sap.m.RatingIndicator",
        "name": "Rating Indicator",
        "category": "User Input",
        "since": "1.14",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.RatingIndicator",
            "name": "Rating Indicator",
            "description": "A Rating Indicator can be used to both indicate and/or rate content.",
            "entityId": "sap.m.RatingIndicator",
            "contexts": {
              "sap.m.RatingIndicator": {}
            },
            "key": "#/sample/sap.m.sample.RatingIndicator/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Rating Indicator RatingIndicator User Input Rating Indicator A Rating Indicator can be used to both indicate and/or rate content. Rating Indicator",
        "sampleCount": 1,
        "key": "#/entity/sap.m.RatingIndicator"
      },
      {
        "id": "sap.m.ResponsivePopover",
        "name": "Responsive Popover",
        "category": "Popup",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.m.sample.ResponsivePopover",
            "name": "Responsive Popover",
            "description": "The Responsive Popover is an abstraction of Popover and Dialog. On the phone a Dialog will be shown. On tablet and desktop a Popover is shown.",
            "entityId": "sap.m.ResponsivePopover",
            "contexts": {
              "sap.m.ResponsivePopover": {}
            },
            "key": "#/sample/sap.m.sample.ResponsivePopover/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Responsive Popover ResponsivePopover Popup Responsive Popover The Responsive Popover is an abstraction of Popover and Dialog. On the phone a Dialog will be shown. On tablet and desktop a Popover is shown. Responsive Popover",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ResponsivePopover"
      },
      {
        "id": "sap.m.ScrollContainer",
        "name": "Scroll Container",
        "category": "Container",
        "since": "1.10",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.ScrollContainer",
            "name": "Scroll Container",
            "description": "The Scroll Container is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.",
            "entityId": "sap.m.ScrollContainer",
            "contexts": {
              "sap.m.ScrollContainer": {}
            },
            "key": "#/sample/sap.m.sample.ScrollContainer/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Scroll Container ScrollContainer Container Scroll Container The Scroll Container is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible. Scroll Container",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ScrollContainer"
      },
      {
        "id": "sap.m.SearchField",
        "name": "Search Field",
        "category": "User Input",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.SearchField",
            "name": "Search Field",
            "description": "Use the Search Field to let the user enter a search string and trigger the search process.",
            "entityId": "sap.m.SearchField",
            "contexts": {
              "sap.m.SearchField": {
                "nextSampleId": "sap.m.sample.ListSelectionSearch"
              }
            },
            "key": "#/sample/sap.m.sample.SearchField/preview"
          },
          {
            "id": "sap.m.sample.ListSelectionSearch",
            "name": "List - Selection & Search",
            "description": "When searching a list with multi selection the previously selected items will stay selected. This is managed by the list control for you.",
            "entityId": "sap.m.SearchField",
            "contexts": {
              "sap.m.List": {
                "previousSampleId": "sap.m.sample.ListSelection",
                "nextSampleId": "sap.m.sample.ListSwipe"
              },
              "sap.m.SearchField": {
                "previousSampleId": "sap.m.sample.SearchField",
                "nextSampleId": "sap.m.sample.SearchFieldSuggestions"
              }
            },
            "key": "#/sample/sap.m.sample.ListSelectionSearch/preview"
          },
          {
            "id": "sap.m.sample.SearchFieldSuggestions",
            "name": "Search Field - Suggestions",
            "description": "Add suggestion capabilities to a basic Search Field.",
            "entityId": "sap.m.SearchField",
            "contexts": {
              "sap.m.SearchField": {
                "previousSampleId": "sap.m.sample.ListSelectionSearch"
              }
            },
            "key": "#/sample/sap.m.sample.SearchFieldSuggestions/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Search Field SearchField User Input Search Field Use the Search Field to let the user enter a search string and trigger the search process. List - Selection & Search When searching a list with multi selection the previously selected items will stay selected. This is managed by the list control for you. Search Field - Suggestions Add suggestion capabilities to a basic Search Field. Search Field List - Selection & Search Search Field - Suggestions",
        "sampleCount": 3,
        "key": "#/entity/sap.m.SearchField"
      },
      {
        "id": "sap.m.SegmentedButton",
        "name": "Segmented Button",
        "category": "User Input",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.SegmentedButton",
            "name": "Segmented Button",
            "description": "The Segmented Button allows the user to pick one out of many options for displaying the content of the current page. It is a UI pattern from iOS, now also available for other platforms. Putting the Segmented Button to a Bar control on non-iOS platforms will result in something very close to a tab.",
            "entityId": "sap.m.SegmentedButton",
            "contexts": {
              "sap.m.SegmentedButton": {
                "nextSampleId": "sap.m.sample.SegmentedButtonVSD"
              }
            },
            "key": "#/sample/sap.m.sample.SegmentedButton/preview"
          },
          {
            "id": "sap.m.sample.SegmentedButtonVSD",
            "name": "Segmented Button in View Settings Dialog",
            "description": "Segmented Button used in View Settings Dialog component",
            "entityId": "sap.m.SegmentedButton",
            "contexts": {
              "sap.m.SegmentedButton": {
                "previousSampleId": "sap.m.sample.SegmentedButton",
                "nextSampleId": "sap.m.sample.SegmentedButtonDialog"
              }
            },
            "key": "#/sample/sap.m.sample.SegmentedButtonVSD/preview"
          },
          {
            "id": "sap.m.sample.SegmentedButtonDialog",
            "name": "Segmented Button in Dialog",
            "description": "Segmented Button used in Dialog component",
            "entityId": "sap.m.SegmentedButton",
            "contexts": {
              "sap.m.SegmentedButton": {
                "previousSampleId": "sap.m.sample.SegmentedButtonVSD",
                "nextSampleId": "sap.m.sample.SegmentedButtonLI"
              }
            },
            "key": "#/sample/sap.m.sample.SegmentedButtonDialog/preview"
          },
          {
            "id": "sap.m.sample.SegmentedButtonLI",
            "name": "Segmented Button in Input List Item",
            "description": "Segmented Button used in Input List Item component",
            "entityId": "sap.m.SegmentedButton",
            "contexts": {
              "sap.m.SegmentedButton": {
                "previousSampleId": "sap.m.sample.SegmentedButtonDialog"
              }
            },
            "key": "#/sample/sap.m.sample.SegmentedButtonLI/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Segmented Button SegmentedButton User Input Segmented Button The Segmented Button allows the user to pick one out of many options for displaying the content of the current page. It is a UI pattern from iOS, now also available for other platforms. Putting the Segmented Button to a Bar control on non-iOS platforms will result in something very close to a tab. Segmented Button in View Settings Dialog Segmented Button used in View Settings Dialog component Segmented Button in Dialog Segmented Button used in Dialog component Segmented Button in Input List Item Segmented Button used in Input List Item component Segmented Button Segmented Button in View Settings Dialog Segmented Button in Dialog Segmented Button in Input List Item",
        "sampleCount": 4,
        "key": "#/entity/sap.m.SegmentedButton"
      },
      {
        "id": "sap.m.Select",
        "name": "Select",
        "category": "User Input",
        "since": "1.10",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.Select",
            "name": "Select",
            "description": "Illustrates the usage of a Select in header, footer and content of a page. Note the different display options.",
            "entityId": "sap.m.Select",
            "contexts": {
              "sap.m.Select": {
                "nextSampleId": "sap.m.sample.Select2Columns"
              }
            },
            "key": "#/sample/sap.m.sample.Select/preview"
          },
          {
            "id": "sap.m.sample.Select2Columns",
            "name": "Select - Two columns layout",
            "description": "Use the select dropdown list with two columns layout if you need to display additional information to your options, like e.g. currencies to countries or abbreviations to systems.",
            "entityId": "sap.m.Select",
            "contexts": {
              "sap.m.Select": {
                "previousSampleId": "sap.m.sample.Select",
                "nextSampleId": "sap.m.sample.SelectWithIcons"
              }
            },
            "key": "#/sample/sap.m.sample.Select2Columns/preview"
          },
          {
            "id": "sap.m.sample.SelectWithIcons",
            "name": "Select - with icons",
            "description": "Illustrates the usage of a Select with icons",
            "entityId": "sap.m.Select",
            "contexts": {
              "sap.m.Select": {
                "previousSampleId": "sap.m.sample.Select2Columns",
                "nextSampleId": "sap.m.sample.SelectValueState"
              }
            },
            "key": "#/sample/sap.m.sample.SelectWithIcons/preview"
          },
          {
            "id": "sap.m.sample.SelectValueState",
            "name": "Select - Validation states",
            "description": "Visualizes the validation state of the control, for example, Error, Warning and Success.",
            "entityId": "sap.m.Select",
            "contexts": {
              "sap.m.Select": {
                "previousSampleId": "sap.m.sample.SelectWithIcons"
              }
            },
            "key": "#/sample/sap.m.sample.SelectValueState/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Select Select User Input Select Illustrates the usage of a Select in header, footer and content of a page. Note the different display options. Select - Two columns layout Use the select dropdown list with two columns layout if you need to display additional information to your options, like e.g. currencies to countries or abbreviations to systems. Select - with icons Illustrates the usage of a Select with icons Select - Validation states Visualizes the validation state of the control, for example, Error, Warning and Success. Select Select - Two columns layout Select - with icons Select - Validation states",
        "sampleCount": 4,
        "key": "#/entity/sap.m.Select"
      },
      {
        "id": "sap.m.SelectList",
        "name": "SelectList",
        "category": "List",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.m.sample.SelectList",
            "name": "SelectList",
            "description": "A SelectList allows the user to select one item from a list of choices.",
            "entityId": "sap.m.SelectList",
            "contexts": {
              "sap.m.SelectList": {
                "nextSampleId": "sap.m.sample.SelectListWithIcons"
              }
            },
            "key": "#/sample/sap.m.sample.SelectList/preview"
          },
          {
            "id": "sap.m.sample.SelectListWithIcons",
            "name": "SelectList - with icons",
            "description": "A SelectList with icons.",
            "entityId": "sap.m.SelectList",
            "contexts": {
              "sap.m.SelectList": {
                "previousSampleId": "sap.m.sample.SelectList"
              }
            },
            "key": "#/sample/sap.m.sample.SelectListWithIcons/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "SelectList SelectList List SelectList A SelectList allows the user to select one item from a list of choices. SelectList - with icons A SelectList with icons. SelectList SelectList - with icons",
        "sampleCount": 2,
        "key": "#/entity/sap.m.SelectList"
      },
      {
        "id": "sap.m.semantic.SemanticPage",
        "name": "Semantic Page",
        "category": "Container",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.m.sample.SemanticPage",
            "name": "Semantic Page Master-Detail",
            "description": "Semantic Page Master/Detail",
            "entityId": "sap.m.semantic.SemanticPage",
            "contexts": {
              "sap.m.semantic.SemanticPage": {
                "nextSampleId": "sap.m.sample.SemanticPageFullScreen"
              }
            },
            "key": "#/sample/sap.m.sample.SemanticPage/preview"
          },
          {
            "id": "sap.m.sample.SemanticPageFullScreen",
            "name": "Semantic Page Full Screen",
            "description": "Semantic Page Full Screen",
            "entityId": "sap.m.semantic.SemanticPage",
            "contexts": {
              "sap.m.semantic.SemanticPage": {
                "previousSampleId": "sap.m.sample.SemanticPage",
                "nextSampleId": "sap.m.sample.SemanticPageDraftIndicator"
              }
            },
            "key": "#/sample/sap.m.sample.SemanticPageFullScreen/preview"
          },
          {
            "id": "sap.m.sample.SemanticPageDraftIndicator",
            "name": "Semantic Page using Draft Indicator",
            "description": "Integration of Draft Indicator inside Semantic Page",
            "entityId": "sap.m.semantic.SemanticPage",
            "contexts": {
              "sap.m.DraftIndicator": {
                "previousSampleId": "sap.m.sample.DraftIndicator"
              },
              "sap.m.semantic.SemanticPage": {
                "previousSampleId": "sap.m.sample.SemanticPageFullScreen",
                "nextSampleId": "sap.m.sample.SemanticPageFloatingFooter"
              }
            },
            "key": "#/sample/sap.m.sample.SemanticPageDraftIndicator/preview"
          },
          {
            "id": "sap.m.sample.SemanticPageFloatingFooter",
            "name": "Semantic Page using Floating Footer",
            "description": "Integration of Floating Footer inside Semantic Page",
            "entityId": "sap.m.semantic.SemanticPage",
            "contexts": {
              "sap.m.semantic.SemanticPage": {
                "previousSampleId": "sap.m.sample.SemanticPageDraftIndicator"
              }
            },
            "key": "#/sample/sap.m.sample.SemanticPageFloatingFooter/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m.semantic",
        "library": "sap.m",
        "searchTags": "Semantic Page SemanticPage Container Semantic Page Master-Detail Semantic Page Master/Detail Semantic Page Full Screen Semantic Page Full Screen Semantic Page using Draft Indicator Integration of Draft Indicator inside Semantic Page Semantic Page using Floating Footer Integration of Floating Footer inside Semantic Page Semantic Page Master-Detail Semantic Page Full Screen Semantic Page using Draft Indicator Semantic Page using Floating Footer",
        "sampleCount": 4,
        "key": "#/entity/sap.m.semantic.SemanticPage"
      },
      {
        "id": "sap.m.MultiComboBox",
        "name": "Multi Combo Box",
        "category": "User Input",
        "since": "1.22",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.MultiComboBox",
            "name": "MultiComboBox",
            "description": "Choose one or more out of multiple options with the MultiComboBox control.",
            "entityId": "sap.m.MultiComboBox",
            "contexts": {
              "sap.m.MultiComboBox": {
                "nextSampleId": "sap.m.sample.MultiComboBoxDefaultFiltering"
              }
            },
            "key": "#/sample/sap.m.sample.MultiComboBox/preview"
          },
          {
            "id": "sap.m.sample.MultiComboBoxDefaultFiltering",
            "name": "MultiComboBox - Filtering and Suggestions",
            "description": "The default filtering is 'starts with per term', which filters by the beginning of every word in every column.",
            "entityId": "sap.m.MultiComboBox",
            "contexts": {
              "sap.m.MultiComboBox": {
                "previousSampleId": "sap.m.sample.MultiComboBox",
                "nextSampleId": "sap.m.sample.MultiComboBoxCustomFiltering"
              }
            },
            "key": "#/sample/sap.m.sample.MultiComboBoxDefaultFiltering/preview"
          },
          {
            "id": "sap.m.sample.MultiComboBoxCustomFiltering",
            "name": "MultiComboBox - Custom Filtering and Suggestions",
            "description": "The default filtering for the suggestionsItems aggregation uses a 'starts with per term' style operator. You can override this with your own custom filter function using the setFilterFunction method.",
            "entityId": "sap.m.MultiComboBox",
            "contexts": {
              "sap.m.MultiComboBox": {
                "previousSampleId": "sap.m.sample.MultiComboBoxDefaultFiltering",
                "nextSampleId": "sap.m.sample.MultiComboBoxTwoColumnsLayout"
              }
            },
            "key": "#/sample/sap.m.sample.MultiComboBoxCustomFiltering/preview"
          },
          {
            "id": "sap.m.sample.MultiComboBoxTwoColumnsLayout",
            "name": "MultiComboBox - Two columns layout",
            "description": "Use the dropdown list with two columns layout if you need to display additional information to your options, like e.g. currencies to countries or abbreviations to systems.",
            "entityId": "sap.m.MultiComboBox",
            "contexts": {
              "sap.m.MultiComboBox": {
                "previousSampleId": "sap.m.sample.MultiComboBoxCustomFiltering",
                "nextSampleId": "sap.m.sample.MultiComboBoxGrouping"
              }
            },
            "key": "#/sample/sap.m.sample.MultiComboBoxTwoColumnsLayout/preview"
          },
          {
            "id": "sap.m.sample.MultiComboBoxGrouping",
            "name": "MultiComboBox - Grouping of items",
            "description": "Items in the MultiComboBox could be grouped by a property",
            "entityId": "sap.m.MultiComboBox",
            "contexts": {
              "sap.m.MultiComboBox": {
                "previousSampleId": "sap.m.sample.MultiComboBoxTwoColumnsLayout"
              }
            },
            "key": "#/sample/sap.m.sample.MultiComboBoxGrouping/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Multi Combo Box MultiComboBox User Input MultiComboBox Choose one or more out of multiple options with the MultiComboBox control. MultiComboBox - Filtering and Suggestions The default filtering is 'starts with per term', which filters by the beginning of every word in every column. MultiComboBox - Custom Filtering and Suggestions The default filtering for the suggestionsItems aggregation uses a 'starts with per term' style operator. You can override this with your own custom filter function using the setFilterFunction method. MultiComboBox - Two columns layout Use the dropdown list with two columns layout if you need to display additional information to your options, like e.g. currencies to countries or abbreviations to systems. MultiComboBox - Grouping of items Items in the MultiComboBox could be grouped by a property MultiComboBox MultiComboBox - Filtering and Suggestions MultiComboBox - Custom Filtering and Suggestions MultiComboBox - Two columns layout MultiComboBox - Grouping of items",
        "sampleCount": 5,
        "key": "#/entity/sap.m.MultiComboBox"
      },
      {
        "id": "sap.m.P13nDialog",
        "name": "Personalization Dialog",
        "category": "Popup",
        "since": "1.26",
        "samples": [
          {
            "id": "sap.m.sample.P13nDialog",
            "name": "P13nDialog stand-alone",
            "description": "Dialog for personalization of column order and their visibility.",
            "entityId": "sap.m.P13nDialog",
            "contexts": {
              "sap.m.P13nDialog": {
                "nextSampleId": "sap.m.sample.P13nDialogWithDimMeasurePanel"
              }
            },
            "key": "#/sample/sap.m.sample.P13nDialog/preview"
          },
          {
            "id": "sap.m.sample.P13nDialogWithDimMeasurePanel",
            "name": "P13nDialog stand-alone",
            "description": "Dialog for personalization of dimension/measure order and their visibility.",
            "entityId": "sap.m.P13nDialog",
            "contexts": {
              "sap.m.P13nDialog": {
                "previousSampleId": "sap.m.sample.P13nDialog"
              }
            },
            "key": "#/sample/sap.m.sample.P13nDialogWithDimMeasurePanel/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Personalization Dialog PersonalizationDialog Popup P13nDialog stand-alone Dialog for personalization of column order and their visibility. P13nDialog stand-alone Dialog for personalization of dimension/measure order and their visibility. P13nDialog stand-alone P13nDialog stand-alone",
        "sampleCount": 2,
        "key": "#/entity/sap.m.P13nDialog"
      },
      {
        "id": "sap.m.MultiInput",
        "name": "Multi Input",
        "category": "User Input",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.m.sample.MultiInput",
            "name": "MultiInput",
            "description": "MultiInput provides functionality to add / remove / enter tokens.",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "nextSampleId": "sap.m.sample.MultiInputValidators"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInput/preview"
          },
          {
            "id": "sap.m.sample.MultiInputValidators",
            "name": "MultiInput Validators",
            "description": "MultiInput uses validators to accept, decline and change tokens.",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "previousSampleId": "sap.m.sample.MultiInput",
                "nextSampleId": "sap.m.sample.MultiInputFilteringSuggestions"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInputValidators/preview"
          },
          {
            "id": "sap.m.sample.MultiInputFilteringSuggestions",
            "name": "MultiInput Filtering and Suggestions",
            "description": "The default filtering is 'starts with per term', which filters by the beginning of every word in every column.",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "previousSampleId": "sap.m.sample.MultiInputValidators",
                "nextSampleId": "sap.m.sample.MultiInputCustomFiltering"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInputFilteringSuggestions/preview"
          },
          {
            "id": "sap.m.sample.MultiInputCustomFiltering",
            "name": "MultiInput Custom Filtering",
            "description": "The default filtering for the suggestionItems aggregation uses is a 'starts with per term' style operator. You can overwrite this with your own custom filter function using the Input control's setFilterFunction method.",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "previousSampleId": "sap.m.sample.MultiInputFilteringSuggestions",
                "nextSampleId": "sap.m.sample.MultiInputDatabinding"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInputCustomFiltering/preview"
          },
          {
            "id": "sap.m.sample.MultiInputDatabinding",
            "name": "MultiInput Data Binding",
            "description": "MultiInput data binding allows data to be bound to tokens in MultiInput.",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "previousSampleId": "sap.m.sample.MultiInputCustomFiltering",
                "nextSampleId": "sap.m.sample.MultiInputMaxTokens"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInputDatabinding/preview"
          },
          {
            "id": "sap.m.sample.MultiInputMaxTokens",
            "name": "MultiInput with Max Tokens",
            "description": "Number of Tokens in MultiInput cannot exceed the maxToken number.",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "previousSampleId": "sap.m.sample.MultiInputDatabinding",
                "nextSampleId": "sap.m.sample.MultiInputTokenUpdate"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInputMaxTokens/preview"
          },
          {
            "id": "sap.m.sample.MultiInputTokenUpdate",
            "name": "MultiInput tokenUpdate event example",
            "description": "MultiInput fires several tokenUpdate events depending on when the tokens were validated.",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "previousSampleId": "sap.m.sample.MultiInputMaxTokens",
                "nextSampleId": "sap.m.sample.MultiInputGrouping"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInputTokenUpdate/preview"
          },
          {
            "id": "sap.m.sample.MultiInputGrouping",
            "name": "MultiInput - Grouping of items",
            "description": "Items in the MultiInput could be grouped by a property",
            "entityId": "sap.m.MultiInput",
            "contexts": {
              "sap.m.MultiInput": {
                "previousSampleId": "sap.m.sample.MultiInputTokenUpdate"
              }
            },
            "key": "#/sample/sap.m.sample.MultiInputGrouping/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Multi Input MultiInput User Input MultiInput MultiInput provides functionality to add / remove / enter tokens. MultiInput Validators MultiInput uses validators to accept, decline and change tokens. MultiInput Filtering and Suggestions The default filtering is 'starts with per term', which filters by the beginning of every word in every column. MultiInput Custom Filtering The default filtering for the suggestionItems aggregation uses is a 'starts with per term' style operator. You can overwrite this with your own custom filter function using the Input control's setFilterFunction method. MultiInput Data Binding MultiInput data binding allows data to be bound to tokens in MultiInput. MultiInput with Max Tokens Number of Tokens in MultiInput cannot exceed the maxToken number. MultiInput tokenUpdate event example MultiInput fires several tokenUpdate events depending on when the tokens were validated. MultiInput - Grouping of items Items in the MultiInput could be grouped by a property MultiInput MultiInput Validators MultiInput Filtering and Suggestions MultiInput Custom Filtering MultiInput Data Binding MultiInput with Max Tokens MultiInput tokenUpdate event example MultiInput - Grouping of items",
        "sampleCount": 8,
        "key": "#/entity/sap.m.MultiInput"
      },
      {
        "id": "sap.m.RangeSlider",
        "name": "RangeSlider",
        "category": "User Input",
        "since": "1.38",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.RangeSlider",
            "name": "RangeSlider",
            "description": "With the RangeSlider a user can specify range from a numerical interval.",
            "entityId": "sap.m.RangeSlider",
            "contexts": {
              "sap.m.RangeSlider": {}
            },
            "key": "#/sample/sap.m.sample.RangeSlider/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "RangeSlider RangeSlider User Input RangeSlider With the RangeSlider a user can specify range from a numerical interval. RangeSlider",
        "sampleCount": 1,
        "key": "#/entity/sap.m.RangeSlider"
      },
      {
        "id": "sap.m.SelectDialog",
        "name": "Select Dialog",
        "category": "Popup",
        "since": "1.16",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.SelectDialog",
            "name": "Select Dialog",
            "description": "The Select Dialog allows the user to search for and pick an item from a possibly long option list. Basically it is a convenience function to quickly assemble a Dialog, a Search Field and a List with Standard List Items. You can have single select or multi select mode. The dialog can remember the selections previously set on the dialog.",
            "entityId": "sap.m.SelectDialog",
            "contexts": {
              "sap.m.SelectDialog": {}
            },
            "key": "#/sample/sap.m.sample.SelectDialog/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Select Dialog SelectDialog Popup Select Dialog The Select Dialog allows the user to search for and pick an item from a possibly long option list. Basically it is a convenience function to quickly assemble a Dialog, a Search Field and a List with Standard List Items. You can have single select or multi select mode. The dialog can remember the selections previously set on the dialog. Select Dialog",
        "sampleCount": 1,
        "key": "#/entity/sap.m.SelectDialog"
      },
      {
        "id": "sap.m.Slider",
        "name": "Slider",
        "category": "User Input",
        "since": "1.10",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.Slider",
            "name": "Slider",
            "description": "With the Slider a user can choose a value from a numerical range.",
            "entityId": "sap.m.Slider",
            "contexts": {
              "sap.m.Slider": {}
            },
            "key": "#/sample/sap.m.sample.Slider/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Slider Slider User Input Slider With the Slider a user can choose a value from a numerical range. Slider",
        "sampleCount": 1,
        "key": "#/entity/sap.m.Slider"
      },
      {
        "id": "sap.m.StandardListItem",
        "name": "Standard List Item",
        "category": "List",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.StandardListItem",
            "name": "Standard List Item",
            "description": "This list item offers a standardized user interface for list content with only title.",
            "entityId": "sap.m.StandardListItem",
            "contexts": {
              "sap.m.StandardListItem": {
                "nextSampleId": "sap.m.sample.StandardListItemTitle"
              }
            },
            "key": "#/sample/sap.m.sample.StandardListItem/preview"
          },
          {
            "id": "sap.m.sample.StandardListItemTitle",
            "name": "Standard List Item - Adapt Title",
            "description": "By default the title size adapts to the available space and gets bigger if the description is empty. List items with and without descriptions results in titles with different sizes. In this cases it is better to switch the size adaption off.",
            "entityId": "sap.m.StandardListItem",
            "contexts": {
              "sap.m.StandardListItem": {
                "previousSampleId": "sap.m.sample.StandardListItem",
                "nextSampleId": "sap.m.sample.StandardListItemDescription"
              }
            },
            "key": "#/sample/sap.m.sample.StandardListItemTitle/preview"
          },
          {
            "id": "sap.m.sample.StandardListItemDescription",
            "name": "Standard List Item - Description",
            "description": "This list item offers a standardized user interface for list content with title and description.",
            "entityId": "sap.m.StandardListItem",
            "contexts": {
              "sap.m.StandardListItem": {
                "previousSampleId": "sap.m.sample.StandardListItemTitle",
                "nextSampleId": "sap.m.sample.StandardListItemIcon"
              }
            },
            "key": "#/sample/sap.m.sample.StandardListItemDescription/preview"
          },
          {
            "id": "sap.m.sample.StandardListItemIcon",
            "name": "Standard List Item - Icon",
            "description": "This list item offers a standardized user interface for list content with title, description and icon.",
            "entityId": "sap.m.StandardListItem",
            "contexts": {
              "sap.m.StandardListItem": {
                "previousSampleId": "sap.m.sample.StandardListItemDescription",
                "nextSampleId": "sap.m.sample.StandardListItemInfo"
              }
            },
            "key": "#/sample/sap.m.sample.StandardListItemIcon/preview"
          },
          {
            "id": "sap.m.sample.StandardListItemInfo",
            "name": "Standard List Item - Info",
            "description": "This list item offers a standardized user interface for list content with title and info.",
            "entityId": "sap.m.StandardListItem",
            "contexts": {
              "sap.m.StandardListItem": {
                "previousSampleId": "sap.m.sample.StandardListItemIcon",
                "nextSampleId": "sap.m.sample.StandardListItemWrapping"
              }
            },
            "key": "#/sample/sap.m.sample.StandardListItemInfo/preview"
          },
          {
            "id": "sap.m.sample.StandardListItemWrapping",
            "name": "Standard List Item - Wrapping",
            "description": "This sample demonstrates the wrapping behavior of the title text and the description text. In desktop mode, the character limit is set to 300 characters, whereas in the phone mode, the character limit is set to 100 characters.",
            "entityId": "sap.m.StandardListItem",
            "contexts": {
              "sap.m.StandardListItem": {
                "previousSampleId": "sap.m.sample.StandardListItemInfo"
              }
            },
            "key": "#/sample/sap.m.sample.StandardListItemWrapping/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Standard List Item StandardListItem List Standard List Item This list item offers a standardized user interface for list content with only title. Standard List Item - Adapt Title By default the title size adapts to the available space and gets bigger if the description is empty. List items with and without descriptions results in titles with different sizes. In this cases it is better to switch the size adaption off. Standard List Item - Description This list item offers a standardized user interface for list content with title and description. Standard List Item - Icon This list item offers a standardized user interface for list content with title, description and icon. Standard List Item - Info This list item offers a standardized user interface for list content with title and info. Standard List Item - Wrapping This sample demonstrates the wrapping behavior of the title text and the description text. In desktop mode, the character limit is set to 300 characters, whereas in the phone mode, the character limit is set to 100 characters. Standard List Item Standard List Item - Adapt Title Standard List Item - Description Standard List Item - Icon Standard List Item - Info Standard List Item - Wrapping",
        "sampleCount": 6,
        "key": "#/entity/sap.m.StandardListItem"
      },
      {
        "id": "sap.m.StandardTile",
        "name": "Standard Tile",
        "category": "Tile",
        "since": "1.12",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.TileContainer",
            "name": "Tile Container",
            "description": "Tiles: a modern UI design pattern for overview & navigation.",
            "entityId": "sap.m.TileContainer",
            "contexts": {
              "sap.m.StandardTile": {},
              "sap.m.TileContainer": {}
            },
            "key": "#/sample/sap.m.sample.TileContainer/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Standard Tile StandardTile Tile Tile Container Tiles: a modern UI design pattern for overview & navigation. Tile Container",
        "sampleCount": 1,
        "key": "#/entity/sap.m.StandardTile"
      },
      {
        "id": "sap.m.StepInput",
        "name": "Step Input",
        "category": "User Input",
        "since": "1.40",
        "samples": [
          {
            "id": "sap.m.sample.StepInput",
            "name": "StepInput",
            "description": "The StepInput allows the user to change stepwise a value by a predefined step and also to set additional description, such as units of measurement and currencies after the input field.",
            "entityId": "sap.m.StepInput",
            "contexts": {
              "sap.m.StepInput": {}
            },
            "key": "#/sample/sap.m.sample.StepInput/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Step Input StepInput User Input StepInput The StepInput allows the user to change stepwise a value by a predefined step and also to set additional description, such as units of measurement and currencies after the input field. StepInput",
        "sampleCount": 1,
        "key": "#/entity/sap.m.StepInput"
      },
      {
        "id": "sap.m.Switch",
        "name": "Switch",
        "category": "User Input",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.Switch",
            "name": "Switch",
            "description": "\"Some say it is only a switch, I say it is one of the most stylish controls in the universe of mobile UI controls.\" (unknown developer)",
            "entityId": "sap.m.Switch",
            "contexts": {
              "sap.m.Switch": {}
            },
            "key": "#/sample/sap.m.sample.Switch/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Switch Switch User Input Switch \"Some say it is only a switch, I say it is one of the most stylish controls in the universe of mobile UI controls.\" (unknown developer) Switch",
        "sampleCount": 1,
        "key": "#/entity/sap.m.Switch"
      },
      {
        "id": "sap.m.Table",
        "name": "Responsive Table",
        "category": "List",
        "since": "1.12",
        "samples": [
          {
            "id": "sap.m.sample.Table",
            "name": "Table - Columns",
            "description": "The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Column": {},
              "sap.m.ColumnListItem": {
                "nextSampleId": "sap.m.sample.TableTest"
              },
              "sap.m.ObjectIdentifier": {
                "previousSampleId": "sap.m.sample.ObjectIdentifier"
              },
              "sap.m.ObjectNumber": {
                "previousSampleId": "sap.m.sample.ObjectNumber"
              },
              "sap.m.Table": {
                "nextSampleId": "sap.m.sample.TableColumnWidth"
              }
            },
            "key": "#/sample/sap.m.sample.Table/preview"
          },
          {
            "id": "sap.m.sample.TableColumnWidth",
            "name": "Table - Defining Column Width",
            "description": "While defining the column width you can use percent values but you should be careful with them. Click to see some traps and tipps.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.Table",
                "nextSampleId": "sap.m.sample.TableBreadcrumb"
              }
            },
            "key": "#/sample/sap.m.sample.TableColumnWidth/preview"
          },
          {
            "id": "sap.m.sample.TableBreadcrumb",
            "name": "Table - Breadcrumb",
            "description": "With an InfoToolbar and some crumb logic you can navigate simple hierarchies with a breadcrumb table approach.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableColumnWidth",
                "nextSampleId": "sap.m.sample.TableLayout"
              }
            },
            "key": "#/sample/sap.m.sample.TableBreadcrumb/preview"
          },
          {
            "id": "sap.m.sample.TableLayout",
            "name": "Table - Fixed vs Auto Layout",
            "description": "You can use fixedLayout property to define the layout algorithm to be used for the table cells, rows, and columns.\nWhen fixedLayout property is set to false, the width of the table and its cells depends on the content thereof. The column width is set by the widest unbreakable content in the cells.\nBy default, table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableBreadcrumb",
                "nextSampleId": "sap.m.sample.TableMergeCells"
              }
            },
            "key": "#/sample/sap.m.sample.TableLayout/preview"
          },
          {
            "id": "sap.m.sample.TableMergeCells",
            "name": "Table - Merge Cells",
            "description": "With column duplicate merging, you can improve the display of repeated data. See the effect of mergeDuplicates on the Supplier column, space permitting.\nNote: This feature is ignored if a column is shown in the pop-in.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableLayout",
                "nextSampleId": "sap.m.sample.TablePerso"
              }
            },
            "key": "#/sample/sap.m.sample.TableMergeCells/preview"
          },
          {
            "id": "sap.m.sample.TablePerso",
            "name": "Table - Personalization",
            "description": "The Table Perso Dialog is a simple dialog to be used for allowing the user to set table personalizations, specifically column visibility and order. Use the Table Perso Controller in conjunction with a persistence service based on the abstract Table Perso Provider to have changes made and persisted.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableMergeCells",
                "nextSampleId": "sap.m.sample.TableVerticalAlignment"
              }
            },
            "key": "#/sample/sap.m.sample.TablePerso/preview"
          },
          {
            "id": "sap.m.sample.TableVerticalAlignment",
            "name": "Table - Vertical Alignment",
            "description": "This is a good example of how to vertically align different elements within a Table's ColumnListItem row template.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TablePerso",
                "nextSampleId": "sap.m.sample.TableViewSettingsDialog"
              }
            },
            "key": "#/sample/sap.m.sample.TableVerticalAlignment/preview"
          },
          {
            "id": "sap.m.sample.TableViewSettingsDialog",
            "name": "Table - View Settings & Context Menu",
            "description": "The View Settings Dialog is standard UI pattern for specifying sorting, grouping and filtering. For a table it should be triggered by a button in the table header with the 'drop-down-list' icon. The active filter should be shown with the table's info bar. This example also shows the context menu for the items in the Table control.",
            "entityId": "sap.m.ViewSettingsDialog",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableVerticalAlignment",
                "nextSampleId": "sap.m.sample.TableExport"
              },
              "sap.m.ViewSettingsDialog": {
                "previousSampleId": "sap.m.sample.ViewSettingsDialogCustomFilterDetails"
              }
            },
            "key": "#/sample/sap.m.sample.TableViewSettingsDialog/preview"
          },
          {
            "id": "sap.m.sample.TableExport",
            "name": "Table - Export",
            "description": "The table control provides export capabilities for downloading your data as a csv file. However, for huge tables, it is recommended that you provide an export mechanism on the server side.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableViewSettingsDialog",
                "nextSampleId": "sap.m.sample.TableOutdated"
              }
            },
            "key": "#/sample/sap.m.sample.TableExport/preview"
          },
          {
            "id": "sap.m.sample.TableOutdated",
            "name": "Table - Outdated Data",
            "description": "You can use the 'showOverlay' property to indicate that the table data is no longer up to date. When the user modifies the filter values of the table, this results in displaying an overlay, which disables operations on the table. Once the user chooses 'Search', the filter values and table data are synchronized again and the overlay is removed.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableExport",
                "nextSampleId": "sap.m.sample.TableEditable"
              }
            },
            "key": "#/sample/sap.m.sample.TableOutdated/preview"
          },
          {
            "id": "sap.m.sample.TableEditable",
            "name": "Table - Editable",
            "description": "Table with edit/display togglable scenario.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableOutdated",
                "nextSampleId": "sap.m.sample.TableAlternateRowColors"
              }
            },
            "key": "#/sample/sap.m.sample.TableEditable/preview"
          },
          {
            "id": "sap.m.sample.TableAlternateRowColors",
            "name": "Table - Alternate Row Colors",
            "description": "Table with alternating light and dark background colors. Note: The effect of this feature is only visible in the SAP Belize and Belize Deep themes.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableEditable",
                "nextSampleId": "sap.m.sample.TableDnD"
              }
            },
            "key": "#/sample/sap.m.sample.TableAlternateRowColors/preview"
          },
          {
            "id": "sap.m.sample.TableDnD",
            "name": "Table - Drag and Drop",
            "description": "Shows the different kinds of drag-and-drop capabilities across view boundaries along with custom context menu alternatives to perform these action.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableAlternateRowColors",
                "nextSampleId": "sap.m.sample.TableContextualWidthDynamic"
              }
            },
            "key": "#/sample/sap.m.sample.TableDnD/preview"
          },
          {
            "id": "sap.m.sample.TableContextualWidthDynamic",
            "name": "Table - ContextualWidth (Dynamic)",
            "description": "This example shows the container-based pop-in behavior. The container has dynamic width.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableDnD",
                "nextSampleId": "sap.m.sample.TableContextualWidthStatic"
              }
            },
            "key": "#/sample/sap.m.sample.TableContextualWidthDynamic/preview"
          },
          {
            "id": "sap.m.sample.TableContextualWidthStatic",
            "name": "Table - ContextualWidth (Static)",
            "description": "This example shows the container-based pop-in behavior. The container has static width.",
            "entityId": "sap.m.Table",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableContextualWidthDynamic"
              }
            },
            "key": "#/sample/sap.m.sample.TableContextualWidthStatic/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Responsive Table ResponsiveTable List Table - Columns The table shares many features with the list and, in addition, introduces columns. The table is fully responsive and can hide columns or shown them in-place if the screen space is not sufficient. This example also demonstrates the different table pop-in layout options along with sticky column headers, header toolbar and info toolbar options. Table - Defining Column Width While defining the column width you can use percent values but you should be careful with them. Click to see some traps and tipps. Table - Breadcrumb With an InfoToolbar and some crumb logic you can navigate simple hierarchies with a breadcrumb table approach. Table - Fixed vs Auto Layout You can use fixedLayout property to define the layout algorithm to be used for the table cells, rows, and columns.\nWhen fixedLayout property is set to false, the width of the table and its cells depends on the content thereof. The column width is set by the widest unbreakable content in the cells.\nBy default, table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. Table - Merge Cells With column duplicate merging, you can improve the display of repeated data. See the effect of mergeDuplicates on the Supplier column, space permitting.\nNote: This feature is ignored if a column is shown in the pop-in. Table - Personalization The Table Perso Dialog is a simple dialog to be used for allowing the user to set table personalizations, specifically column visibility and order. Use the Table Perso Controller in conjunction with a persistence service based on the abstract Table Perso Provider to have changes made and persisted. Table - Vertical Alignment This is a good example of how to vertically align different elements within a Table's ColumnListItem row template. Table - View Settings & Context Menu The View Settings Dialog is standard UI pattern for specifying sorting, grouping and filtering. For a table it should be triggered by a button in the table header with the 'drop-down-list' icon. The active filter should be shown with the table's info bar. This example also shows the context menu for the items in the Table control. Table - Export The table control provides export capabilities for downloading your data as a csv file. However, for huge tables, it is recommended that you provide an export mechanism on the server side. Table - Outdated Data You can use the 'showOverlay' property to indicate that the table data is no longer up to date. When the user modifies the filter values of the table, this results in displaying an overlay, which disables operations on the table. Once the user chooses 'Search', the filter values and table data are synchronized again and the overlay is removed. Table - Editable Table with edit/display togglable scenario. Table - Alternate Row Colors Table with alternating light and dark background colors. Note: The effect of this feature is only visible in the SAP Belize and Belize Deep themes. Table - Drag and Drop Shows the different kinds of drag-and-drop capabilities across view boundaries along with custom context menu alternatives to perform these action. Table - ContextualWidth (Dynamic) This example shows the container-based pop-in behavior. The container has dynamic width. Table - ContextualWidth (Static) This example shows the container-based pop-in behavior. The container has static width. Table - Columns Table - Defining Column Width Table - Breadcrumb Table - Fixed vs Auto Layout Table - Merge Cells Table - Personalization Table - Vertical Alignment Table - View Settings & Context Menu Table - Export Table - Outdated Data Table - Editable Table - Alternate Row Colors Table - Drag and Drop Table - ContextualWidth (Dynamic) Table - ContextualWidth (Static)",
        "sampleCount": 15,
        "key": "#/entity/sap.m.Table"
      },
      {
        "id": "sap.m.TableSelectDialog",
        "name": "Table Select Dialog",
        "category": "Popup",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.m.sample.TableSelectDialog",
            "name": "Table Select Dialog",
            "description": "Similar to the Select Dialog, the Table Select Dialog presents selectable items in a table-based dialog, with filter functions. You can have single select or multi select mode. The dialog can remember the selections previously set on the dialog.",
            "entityId": "sap.m.TableSelectDialog",
            "contexts": {
              "sap.m.TableSelectDialog": {
                "nextSampleId": "sap.m.sample.TableSelectDialogGrowing"
              }
            },
            "key": "#/sample/sap.m.sample.TableSelectDialog/preview"
          },
          {
            "id": "sap.m.sample.TableSelectDialogGrowing",
            "name": "Table Select Dialog Growing",
            "description": "Table Select Dialog can be created with property growing set to true or false.",
            "entityId": "sap.m.TableSelectDialog",
            "contexts": {
              "sap.m.TableSelectDialog": {
                "previousSampleId": "sap.m.sample.TableSelectDialog"
              }
            },
            "key": "#/sample/sap.m.sample.TableSelectDialogGrowing/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Table Select Dialog TableSelectDialog Popup Table Select Dialog Similar to the Select Dialog, the Table Select Dialog presents selectable items in a table-based dialog, with filter functions. You can have single select or multi select mode. The dialog can remember the selections previously set on the dialog. Table Select Dialog Growing Table Select Dialog can be created with property growing set to true or false. Table Select Dialog Table Select Dialog Growing",
        "sampleCount": 2,
        "key": "#/entity/sap.m.TableSelectDialog"
      },
      {
        "id": "sap.m.Text",
        "name": "Text",
        "category": "Display",
        "since": "1.10",
        "formFactors": "Condensed, Compact, Cozy",
        "samples": [
          {
            "id": "sap.m.sample.Text",
            "name": "Text",
            "description": "The text control can be used for embedding longer paragraphs of text into your application, that need text wrapping.",
            "entityId": "sap.m.Text",
            "contexts": {
              "sap.m.Text": {
                "nextSampleId": "sap.m.sample.TextMaxLines"
              }
            },
            "key": "#/sample/sap.m.sample.Text/preview"
          },
          {
            "id": "sap.m.sample.TextMaxLines",
            "name": "Text - Max Lines",
            "description": "The Text control has a property to limit the number of lines for wrapping texts.",
            "entityId": "sap.m.Text",
            "contexts": {
              "sap.m.Text": {
                "previousSampleId": "sap.m.sample.Text",
                "nextSampleId": "sap.m.sample.TextRenderWhitespace"
              }
            },
            "key": "#/sample/sap.m.sample.TextMaxLines/preview"
          },
          {
            "id": "sap.m.sample.TextRenderWhitespace",
            "name": "Text - Render Whitespace",
            "description": "The Text control has a property allowing browsers to render whitespace and tabs.",
            "entityId": "sap.m.Text",
            "contexts": {
              "sap.m.Text": {
                "previousSampleId": "sap.m.sample.TextMaxLines",
                "nextSampleId": "sap.m.sample.TextHyphenation"
              }
            },
            "key": "#/sample/sap.m.sample.TextRenderWhitespace/preview"
          },
          {
            "id": "sap.m.sample.TextHyphenation",
            "name": "Text - Hyphenation",
            "description": "The Text control has a property allowing hyphenation.",
            "entityId": "sap.m.Text",
            "contexts": {
              "sap.m.Text": {
                "previousSampleId": "sap.m.sample.TextRenderWhitespace"
              }
            },
            "key": "#/sample/sap.m.sample.TextHyphenation/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Text Text Display Text The text control can be used for embedding longer paragraphs of text into your application, that need text wrapping. Text - Max Lines The Text control has a property to limit the number of lines for wrapping texts. Text - Render Whitespace The Text control has a property allowing browsers to render whitespace and tabs. Text - Hyphenation The Text control has a property allowing hyphenation. Text Text - Max Lines Text - Render Whitespace Text - Hyphenation",
        "sampleCount": 4,
        "key": "#/entity/sap.m.Text"
      },
      {
        "id": "sap.m.TextArea",
        "name": "Text Area",
        "category": "User Input",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.TextArea",
            "name": "Text Area",
            "description": "The Text Area allows to enter multi-line text and automatically breaks to a new line for overflow text. If the text gets too big to be displayed at once the user can scroll up and down.",
            "entityId": "sap.m.TextArea",
            "contexts": {
              "sap.m.TextArea": {
                "nextSampleId": "sap.m.sample.TextAreaMaxLength"
              }
            },
            "key": "#/sample/sap.m.sample.TextArea/preview"
          },
          {
            "id": "sap.m.sample.TextAreaMaxLength",
            "name": "TextArea with MaxLength = true",
            "description": "Shows the behavior of the control with the new showExceededText property (since 1.48) and maxLength = true",
            "entityId": "sap.m.TextArea",
            "contexts": {
              "sap.m.TextArea": {
                "previousSampleId": "sap.m.sample.TextArea",
                "nextSampleId": "sap.m.sample.TextAreaValueUpdate"
              }
            },
            "key": "#/sample/sap.m.sample.TextAreaMaxLength/preview"
          },
          {
            "id": "sap.m.sample.TextAreaValueUpdate",
            "name": "TextArea - Value Update",
            "description": "Since 1.30 the value property of sap.m.TextArea is not updated on every keystroke, but first when the user presses Enter or leaves the input. The change was necessary to fully support the standard UI5 data binding with formatters and types. If you still need immediate update you have 2 options: Handle liveChange events or enable the boolean property valueLiveUpdate.",
            "entityId": "sap.m.TextArea",
            "contexts": {
              "sap.m.TextArea": {
                "previousSampleId": "sap.m.sample.TextAreaMaxLength",
                "nextSampleId": "sap.m.sample.TextAreaGrowing"
              }
            },
            "key": "#/sample/sap.m.sample.TextAreaValueUpdate/preview"
          },
          {
            "id": "sap.m.sample.TextAreaGrowing",
            "name": "TextArea - Growing",
            "description": "Since 1.38 the growing property of sap.m.TextArea gives the ability of a control to automatically grow and shrink dynamically with its content.",
            "entityId": "sap.m.TextArea",
            "contexts": {
              "sap.m.TextArea": {
                "previousSampleId": "sap.m.sample.TextAreaValueUpdate"
              }
            },
            "key": "#/sample/sap.m.sample.TextAreaGrowing/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Text Area TextArea User Input Text Area The Text Area allows to enter multi-line text and automatically breaks to a new line for overflow text. If the text gets too big to be displayed at once the user can scroll up and down. TextArea with MaxLength = true Shows the behavior of the control with the new showExceededText property (since 1.48) and maxLength = true TextArea - Value Update Since 1.30 the value property of sap.m.TextArea is not updated on every keystroke, but first when the user presses Enter or leaves the input. The change was necessary to fully support the standard UI5 data binding with formatters and types. If you still need immediate update you have 2 options: Handle liveChange events or enable the boolean property valueLiveUpdate. TextArea - Growing Since 1.38 the growing property of sap.m.TextArea gives the ability of a control to automatically grow and shrink dynamically with its content. Text Area TextArea with MaxLength = true TextArea - Value Update TextArea - Growing",
        "sampleCount": 4,
        "key": "#/entity/sap.m.TextArea"
      },
      {
        "id": "sap.m.TileContainer",
        "name": "Tile Container",
        "category": "Tile",
        "since": "1.12",
        "formFactors": "Cozy",
        "samples": [
          {
            "id": "sap.m.sample.TileContainer",
            "name": "Tile Container",
            "description": "Tiles: a modern UI design pattern for overview & navigation.",
            "entityId": "sap.m.TileContainer",
            "contexts": {
              "sap.m.StandardTile": {},
              "sap.m.TileContainer": {}
            },
            "key": "#/sample/sap.m.sample.TileContainer/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Tile Container TileContainer Tile Tile Container Tiles: a modern UI design pattern for overview & navigation. Tile Container",
        "sampleCount": 1,
        "key": "#/entity/sap.m.TileContainer"
      },
      {
        "id": "sap.m.TileContent",
        "name": "Tile Content",
        "category": "Tile",
        "since": "1.34",
        "samples": [
          {
            "id": "sap.m.sample.TileContent",
            "name": "Tile Content",
            "description": "Shows the universal container for different content types and context information in the footer area.",
            "entityId": "sap.m.TileContent",
            "contexts": {
              "sap.m.TileContent": {}
            },
            "key": "#/sample/sap.m.sample.TileContent/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Tile Content TileContent Tile Tile Content Shows the universal container for different content types and context information in the footer area. Tile Content",
        "sampleCount": 1,
        "key": "#/entity/sap.m.TileContent"
      },
      {
        "id": "sap.m.TimePicker",
        "name": "Time Picker",
        "category": "User Input",
        "since": "1.32",
        "samples": [
          {
            "id": "sap.m.sample.TimePicker",
            "name": "Time Picker",
            "description": "TimePicker examples displaying the four time formats: \nHH : mm, \nHH : mm : ss, \nHH : mm : pp, \nHH : mm : ss : pp",
            "entityId": "sap.m.TimePicker",
            "contexts": {
              "sap.m.TimePicker": {}
            },
            "key": "#/sample/sap.m.sample.TimePicker/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Time Picker TimePicker User Input Time Picker TimePicker examples displaying the four time formats: \nHH : mm, \nHH : mm : ss, \nHH : mm : pp, \nHH : mm : ss : pp Time Picker",
        "sampleCount": 1,
        "key": "#/entity/sap.m.TimePicker"
      },
      {
        "id": "sap.m.Title",
        "name": "Title",
        "category": "Display",
        "since": "1.28",
        "samples": [
          {
            "id": "sap.m.sample.Title",
            "name": "Title",
            "description": "The Title control is a simple one line text with additional semantic information about the level of the following section in the page structure for accessibility purposes.",
            "entityId": "sap.m.Title",
            "contexts": {
              "sap.m.Title": {
                "nextSampleId": "sap.m.sample.TitleWrapping"
              }
            },
            "key": "#/sample/sap.m.sample.Title/preview"
          },
          {
            "id": "sap.m.sample.TitleWrapping",
            "name": "Title Properties",
            "description": "This sample shows the different behaviors of a title.",
            "entityId": "sap.m.Title",
            "contexts": {
              "sap.m.Title": {
                "previousSampleId": "sap.m.sample.Title"
              }
            },
            "key": "#/sample/sap.m.sample.TitleWrapping/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Title Title Display Title The Title control is a simple one line text with additional semantic information about the level of the following section in the page structure for accessibility purposes. Title Properties This sample shows the different behaviors of a title. Title Title Properties",
        "sampleCount": 2,
        "key": "#/entity/sap.m.Title"
      },
      {
        "id": "sap.m.ToggleButton",
        "name": "Toggle Button",
        "category": "Action",
        "since": "1.22",
        "samples": [
          {
            "id": "sap.m.sample.ToggleButton",
            "name": "Toggle Button",
            "description": "Toggle Buttons can be toggled between pressed and normal state.",
            "entityId": "sap.m.ToggleButton",
            "contexts": {
              "sap.m.ToggleButton": {}
            },
            "key": "#/sample/sap.m.sample.ToggleButton/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Toggle Button ToggleButton Action Toggle Button Toggle Buttons can be toggled between pressed and normal state. Toggle Button",
        "sampleCount": 1,
        "key": "#/entity/sap.m.ToggleButton"
      },
      {
        "id": "sap.m.Toolbar",
        "name": "Toolbar",
        "category": "Container",
        "since": "1.20",
        "samples": [
          {
            "id": "sap.m.sample.ToolbarShrinkable",
            "name": "Toolbar - Shrinkable items",
            "description": "Toolbar items can shrink/expand when the toolbar is resized. This behavior is enabled/disabled via the ToolbarLayoutData layout. It is also possible to set min/max width for shrinkable items.",
            "entityId": "sap.m.Toolbar",
            "contexts": {
              "sap.m.Toolbar": {
                "nextSampleId": "sap.m.sample.ToolbarVsBar"
              }
            },
            "key": "#/sample/sap.m.sample.ToolbarShrinkable/preview"
          },
          {
            "id": "sap.m.sample.ToolbarVsBar",
            "name": "Toolbar vs Bar vs OverflowToolbar",
            "description": "Toolbar handles overflow by shrinking items. OverflowToolbar provides an overflow menu. Bar is able to perfectly center a text if nothing overflows.",
            "entityId": "sap.m.Toolbar",
            "contexts": {
              "sap.m.Bar": {
                "previousSampleId": "sap.m.sample.Page"
              },
              "sap.m.Toolbar": {
                "previousSampleId": "sap.m.sample.ToolbarShrinkable"
              }
            },
            "key": "#/sample/sap.m.sample.ToolbarVsBar/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Toolbar Toolbar Container Toolbar - Shrinkable items Toolbar items can shrink/expand when the toolbar is resized. This behavior is enabled/disabled via the ToolbarLayoutData layout. It is also possible to set min/max width for shrinkable items. Toolbar vs Bar vs OverflowToolbar Toolbar handles overflow by shrinking items. OverflowToolbar provides an overflow menu. Bar is able to perfectly center a text if nothing overflows. Toolbar - Shrinkable items Toolbar vs Bar vs OverflowToolbar",
        "sampleCount": 2,
        "key": "#/entity/sap.m.Toolbar"
      },
      {
        "id": "sap.m.Tree",
        "name": "Tree",
        "category": "Container",
        "since": "1.42",
        "samples": [
          {
            "id": "sap.m.sample.Tree",
            "name": "Tree - Basic",
            "description": "Tree displays data in hierarchical structure.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "nextSampleId": "sap.m.sample.TreeIcon"
              }
            },
            "key": "#/sample/sap.m.sample.Tree/preview"
          },
          {
            "id": "sap.m.sample.TreeIcon",
            "name": "Tree - Icon & Context Menu",
            "description": "Tree item with icon. This example also shows the context menu for the items in the Tree control.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "previousSampleId": "sap.m.sample.Tree",
                "nextSampleId": "sap.m.sample.TreeSelection"
              }
            },
            "key": "#/sample/sap.m.sample.TreeIcon/preview"
          },
          {
            "id": "sap.m.sample.TreeSelection",
            "name": "Tree - Selection",
            "description": "This example shows different selection modes of Tree.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "previousSampleId": "sap.m.sample.TreeIcon",
                "nextSampleId": "sap.m.sample.TreeExpandTo"
              }
            },
            "key": "#/sample/sap.m.sample.TreeSelection/preview"
          },
          {
            "id": "sap.m.sample.TreeExpandTo",
            "name": "Tree - InitialExpand & CollapseAll",
            "description": "This example shows the initial expand state and how to collapse all nodes.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "previousSampleId": "sap.m.sample.TreeSelection",
                "nextSampleId": "sap.m.sample.TreeExpandMulti"
              }
            },
            "key": "#/sample/sap.m.sample.TreeExpandTo/preview"
          },
          {
            "id": "sap.m.sample.TreeExpandMulti",
            "name": "Tree - Multi Expand & Collapse",
            "description": "This example shows how to expand/collapse multiple nodes and demonstrates the sticky header toolbar and info toolbar options.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "previousSampleId": "sap.m.sample.TreeExpandTo",
                "nextSampleId": "sap.m.sample.TreeOData"
              }
            },
            "key": "#/sample/sap.m.sample.TreeExpandMulti/preview"
          },
          {
            "id": "sap.m.sample.TreeOData",
            "name": "Tree - OData",
            "description": "This example shows Tree with OData service.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "previousSampleId": "sap.m.sample.TreeExpandMulti",
                "nextSampleId": "sap.m.sample.TreeJSONLazyLoading"
              }
            },
            "key": "#/sample/sap.m.sample.TreeOData/preview"
          },
          {
            "id": "sap.m.sample.TreeJSONLazyLoading",
            "name": "Tree - Lazy loading with a JSON model",
            "description": "Shows how lazy loading with a JSON model can be done using the toggleOpenState event.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "previousSampleId": "sap.m.sample.TreeOData",
                "nextSampleId": "sap.m.sample.TreeDnD"
              }
            },
            "key": "#/sample/sap.m.sample.TreeJSONLazyLoading/preview"
          },
          {
            "id": "sap.m.sample.TreeDnD",
            "name": "Tree - Drag and Drop",
            "description": "This example shows drag-and-drop capability.",
            "entityId": "sap.m.Tree",
            "contexts": {
              "sap.m.Tree": {
                "previousSampleId": "sap.m.sample.TreeJSONLazyLoading"
              }
            },
            "key": "#/sample/sap.m.sample.TreeDnD/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Tree Tree Container Tree - Basic Tree displays data in hierarchical structure. Tree - Icon & Context Menu Tree item with icon. This example also shows the context menu for the items in the Tree control. Tree - Selection This example shows different selection modes of Tree. Tree - InitialExpand & CollapseAll This example shows the initial expand state and how to collapse all nodes. Tree - Multi Expand & Collapse This example shows how to expand/collapse multiple nodes and demonstrates the sticky header toolbar and info toolbar options. Tree - OData This example shows Tree with OData service. Tree - Lazy loading with a JSON model Shows how lazy loading with a JSON model can be done using the toggleOpenState event. Tree - Drag and Drop This example shows drag-and-drop capability. Tree - Basic Tree - Icon & Context Menu Tree - Selection Tree - InitialExpand & CollapseAll Tree - Multi Expand & Collapse Tree - OData Tree - Lazy loading with a JSON model Tree - Drag and Drop",
        "sampleCount": 8,
        "key": "#/entity/sap.m.Tree"
      },
      {
        "id": "sap.m.ViewSettingsDialog",
        "name": "View Settings Dialog",
        "category": "Popup",
        "since": "1.16",
        "samples": [
          {
            "id": "sap.m.sample.ViewSettingsDialog",
            "name": "View Settings Dialog - Standard",
            "description": "The View Settings Dialog is a standard UI pattern for specifying sorting, grouping and filtering.",
            "entityId": "sap.m.ViewSettingsDialog",
            "contexts": {
              "sap.m.ViewSettingsDialog": {
                "nextSampleId": "sap.m.sample.ViewSettingsDialogCustom"
              }
            },
            "key": "#/sample/sap.m.sample.ViewSettingsDialog/preview"
          },
          {
            "id": "sap.m.sample.ViewSettingsDialogCustom",
            "name": "View Settings Dialog - Custom Filters",
            "description": "You can have custom filters in your View Settings Dialog, as shown in this example here.",
            "entityId": "sap.m.ViewSettingsDialog",
            "contexts": {
              "sap.m.ViewSettingsDialog": {
                "previousSampleId": "sap.m.sample.ViewSettingsDialog",
                "nextSampleId": "sap.m.sample.ViewSettingsDialogCustomTabs"
              }
            },
            "key": "#/sample/sap.m.sample.ViewSettingsDialogCustom/preview"
          },
          {
            "id": "sap.m.sample.ViewSettingsDialogCustomTabs",
            "name": "View Settings Dialog - Custom Tabs",
            "description": "You can have custom tabs with your own defined content in the View Settings Dialog, as shown in this example.",
            "entityId": "sap.m.ViewSettingsDialog",
            "contexts": {
              "sap.m.ViewSettingsDialog": {
                "previousSampleId": "sap.m.sample.ViewSettingsDialogCustom",
                "nextSampleId": "sap.m.sample.ViewSettingsDialogCustomFilterDetails"
              }
            },
            "key": "#/sample/sap.m.sample.ViewSettingsDialogCustomTabs/preview"
          },
          {
            "id": "sap.m.sample.ViewSettingsDialogCustomFilterDetails",
            "name": "View Settings Dialog - Custom Search",
            "description": "You can filter the items in the filter details page using different string filter operators.",
            "entityId": "sap.m.ViewSettingsDialog",
            "contexts": {
              "sap.m.ViewSettingsDialog": {
                "previousSampleId": "sap.m.sample.ViewSettingsDialogCustomTabs",
                "nextSampleId": "sap.m.sample.TableViewSettingsDialog"
              }
            },
            "key": "#/sample/sap.m.sample.ViewSettingsDialogCustomFilterDetails/preview"
          },
          {
            "id": "sap.m.sample.TableViewSettingsDialog",
            "name": "Table - View Settings & Context Menu",
            "description": "The View Settings Dialog is standard UI pattern for specifying sorting, grouping and filtering. For a table it should be triggered by a button in the table header with the 'drop-down-list' icon. The active filter should be shown with the table's info bar. This example also shows the context menu for the items in the Table control.",
            "entityId": "sap.m.ViewSettingsDialog",
            "contexts": {
              "sap.m.Table": {
                "previousSampleId": "sap.m.sample.TableVerticalAlignment",
                "nextSampleId": "sap.m.sample.TableExport"
              },
              "sap.m.ViewSettingsDialog": {
                "previousSampleId": "sap.m.sample.ViewSettingsDialogCustomFilterDetails"
              }
            },
            "key": "#/sample/sap.m.sample.TableViewSettingsDialog/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "View Settings Dialog ViewSettingsDialog Popup View Settings Dialog - Standard The View Settings Dialog is a standard UI pattern for specifying sorting, grouping and filtering. View Settings Dialog - Custom Filters You can have custom filters in your View Settings Dialog, as shown in this example here. View Settings Dialog - Custom Tabs You can have custom tabs with your own defined content in the View Settings Dialog, as shown in this example. View Settings Dialog - Custom Search You can filter the items in the filter details page using different string filter operators. Table - View Settings & Context Menu The View Settings Dialog is standard UI pattern for specifying sorting, grouping and filtering. For a table it should be triggered by a button in the table header with the 'drop-down-list' icon. The active filter should be shown with the table's info bar. This example also shows the context menu for the items in the Table control. View Settings Dialog - Standard View Settings Dialog - Custom Filters View Settings Dialog - Custom Tabs View Settings Dialog - Custom Search Table - View Settings & Context Menu",
        "sampleCount": 5,
        "key": "#/entity/sap.m.ViewSettingsDialog"
      },
      {
        "id": "sap.m.URLHelper",
        "name": "Url Helper",
        "category": "Action",
        "since": "1.10",
        "samples": [
          {
            "id": "sap.m.sample.UrlHelper",
            "name": "URL Helper",
            "description": "The URL Helper can be used to easily trigger a phone's native apps like Email, Telephone and SMS. It can be used with any UI control but typically an active Display List Item is chosen.",
            "entityId": "sap.m.URLHelper",
            "contexts": {
              "sap.m.URLHelper": {}
            },
            "key": "#/sample/sap.m.sample.UrlHelper/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Url Helper UrlHelper Action URL Helper The URL Helper can be used to easily trigger a phone's native apps like Email, Telephone and SMS. It can be used with any UI control but typically an active Display List Item is chosen. URL Helper",
        "sampleCount": 1,
        "key": "#/entity/sap.m.URLHelper"
      },
      {
        "id": "sap.ui.core.StandardMargins",
        "name": "Standard Margins",
        "category": "Layout",
        "since": "1.28",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.StandardMarginsAll",
            "name": "Margins All Around",
            "description": "Use standard margin classes 'sapUiTinyMargin', 'sapUiSmallMargin', 'sapUiMediumMargin' or 'sapUiLargeMargin' to add a 8px (0.5rem), 16px (1rem), 32px (2rem) or 48px (3rem) margin to your control. This will clear the area all around your control (outside its border).",
            "entityId": "sap.ui.core.StandardMargins",
            "contexts": {
              "sap.ui.core.StandardMargins": {
                "nextSampleId": "sap.m.sample.StandardMarginsSingleSided"
              }
            },
            "key": "#/sample/sap.m.sample.StandardMarginsAll/preview"
          },
          {
            "id": "sap.m.sample.StandardMarginsSingleSided",
            "name": "Single-Sided Margins",
            "description": "Clear the space to the left, right, top or bottom of your control. Choose a size ('Tiny', 'Small', 'Medium' or 'Large', which stands for 8px (0.5rem), 16px (1rem), 32px (2rem) or 48px (3rem) respectively) and a direction ('Begin', 'End', 'Top' or 'Bottom', where 'Begin' is left and 'End' is right and vice versa in right-to-left mode). If you would like to clear a 32px space to the left (resp. right in rtl mode), you would add class 'sapUiMediumMarginBegin'. You may also add several classes which have to point to different directions though, for example you would add classes 'sapUiLargeMarginEnd sapUiLargeMarginBottom' to clear a 48px space to the bottom and to the right (resp. to the left in rtl mode).",
            "entityId": "sap.ui.core.StandardMargins",
            "contexts": {
              "sap.ui.core.StandardMargins": {
                "previousSampleId": "sap.m.sample.StandardMarginsAll",
                "nextSampleId": "sap.m.sample.StandardMarginsTwoSided"
              }
            },
            "key": "#/sample/sap.m.sample.StandardMarginsSingleSided/preview"
          },
          {
            "id": "sap.m.sample.StandardMarginsTwoSided",
            "name": "Two-Sided Margins",
            "description": "Clear the space to the left and right, top and bottom of your control. Choose a size ('Tiny', 'Small', 'Medium' or 'Large', which stands for 8px (0.5rem), 16px (1rem), 32px (2rem) or 48px (3rem) respectively) and an orientation ('BeginEnd', 'TopBottom'). If you would like to clear a 32px space to the left and right, you would add class 'sapUiMediumMarginBeginEnd'.",
            "entityId": "sap.ui.core.StandardMargins",
            "contexts": {
              "sap.ui.core.StandardMargins": {
                "previousSampleId": "sap.m.sample.StandardMarginsSingleSided",
                "nextSampleId": "sap.m.sample.StandardMarginsEnforceWidthAuto"
              }
            },
            "key": "#/sample/sap.m.sample.StandardMarginsTwoSided/preview"
          },
          {
            "id": "sap.m.sample.StandardMarginsEnforceWidthAuto",
            "name": "Enforce Width 'auto'",
            "description": "Some controls (for example the IconTabBar) do not have a 'width' property but still have a default width of 100%. We provide css class 'sapUiForceWidthAuto' to overwrite the control's width in such a case.",
            "entityId": "sap.ui.core.StandardMargins",
            "contexts": {
              "sap.ui.core.StandardMargins": {
                "previousSampleId": "sap.m.sample.StandardMarginsTwoSided",
                "nextSampleId": "sap.m.sample.StandardMarginsResponsive"
              }
            },
            "key": "#/sample/sap.m.sample.StandardMarginsEnforceWidthAuto/preview"
          },
          {
            "id": "sap.m.sample.StandardMarginsResponsive",
            "name": "Responsive Margins",
            "description": "Clear the space around your control, where the margin depends on the device your are using.",
            "entityId": "sap.ui.core.StandardMargins",
            "contexts": {
              "sap.ui.core.StandardMargins": {
                "previousSampleId": "sap.m.sample.StandardMarginsEnforceWidthAuto",
                "nextSampleId": "sap.m.sample.StandardMarginsCollapse"
              }
            },
            "key": "#/sample/sap.m.sample.StandardMarginsResponsive/preview"
          },
          {
            "id": "sap.m.sample.StandardMarginsCollapse",
            "name": "Collapsing Margins",
            "description": "See how adjacent margins collapse to a single margin.",
            "entityId": "sap.ui.core.StandardMargins",
            "contexts": {
              "sap.ui.core.StandardMargins": {
                "previousSampleId": "sap.m.sample.StandardMarginsResponsive",
                "nextSampleId": "sap.m.sample.StandardNoMargins"
              }
            },
            "key": "#/sample/sap.m.sample.StandardMarginsCollapse/preview"
          },
          {
            "id": "sap.m.sample.StandardNoMargins",
            "name": "Remove Margins",
            "description": "Use our standard 'No-Margins' classes to remove existing margins from your control. You can either remove all margins at once or remove the margin on one or more sides.",
            "entityId": "sap.ui.core.StandardMargins",
            "contexts": {
              "sap.ui.core.StandardMargins": {
                "previousSampleId": "sap.m.sample.StandardMarginsCollapse"
              }
            },
            "key": "#/sample/sap.m.sample.StandardNoMargins/preview"
          }
        ],
        "namespace": "sap.ui.core",
        "library": "sap.m",
        "searchTags": "Standard Margins StandardMargins Layout Margins All Around Use standard margin classes 'sapUiTinyMargin', 'sapUiSmallMargin', 'sapUiMediumMargin' or 'sapUiLargeMargin' to add a 8px (0.5rem), 16px (1rem), 32px (2rem) or 48px (3rem) margin to your control. This will clear the area all around your control (outside its border). Single-Sided Margins Clear the space to the left, right, top or bottom of your control. Choose a size ('Tiny', 'Small', 'Medium' or 'Large', which stands for 8px (0.5rem), 16px (1rem), 32px (2rem) or 48px (3rem) respectively) and a direction ('Begin', 'End', 'Top' or 'Bottom', where 'Begin' is left and 'End' is right and vice versa in right-to-left mode). If you would like to clear a 32px space to the left (resp. right in rtl mode), you would add class 'sapUiMediumMarginBegin'. You may also add several classes which have to point to different directions though, for example you would add classes 'sapUiLargeMarginEnd sapUiLargeMarginBottom' to clear a 48px space to the bottom and to the right (resp. to the left in rtl mode). Two-Sided Margins Clear the space to the left and right, top and bottom of your control. Choose a size ('Tiny', 'Small', 'Medium' or 'Large', which stands for 8px (0.5rem), 16px (1rem), 32px (2rem) or 48px (3rem) respectively) and an orientation ('BeginEnd', 'TopBottom'). If you would like to clear a 32px space to the left and right, you would add class 'sapUiMediumMarginBeginEnd'. Enforce Width 'auto' Some controls (for example the IconTabBar) do not have a 'width' property but still have a default width of 100%. We provide css class 'sapUiForceWidthAuto' to overwrite the control's width in such a case. Responsive Margins Clear the space around your control, where the margin depends on the device your are using. Collapsing Margins See how adjacent margins collapse to a single margin. Remove Margins Use our standard 'No-Margins' classes to remove existing margins from your control. You can either remove all margins at once or remove the margin on one or more sides. Margins All Around Single-Sided Margins Two-Sided Margins Enforce Width 'auto' Responsive Margins Collapsing Margins Remove Margins",
        "sampleCount": 7,
        "key": "#/entity/sap.ui.core.StandardMargins"
      },
      {
        "id": "sap.ui.core.ContainerPadding",
        "name": "Standard Paddings",
        "category": "Layout",
        "since": "1.28",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.ContainerNoPadding",
            "name": "No Container Content Padding",
            "description": "Many UI5 containers support the standard container content padding CSS classes. Apply the CSS class 'sapUiNoContentPadding' on a UI5 container control (e.g. Panel, IconTabBar, ...) to remove the default padding around the container content area.",
            "entityId": "sap.ui.core.ContainerPadding",
            "contexts": {
              "sap.ui.core.ContainerPadding": {
                "nextSampleId": "sap.m.sample.ContainerPadding"
              }
            },
            "key": "#/sample/sap.m.sample.ContainerNoPadding/preview"
          },
          {
            "id": "sap.m.sample.ContainerPadding",
            "name": "Container Content Padding",
            "description": "Apply the CSS class 'sapUiContentPadding' on a UI5 container control (e.g. Page, List, Dialog, Popover, ...) to add a default padding of 1rem (16px) around the container content area.",
            "entityId": "sap.ui.core.ContainerPadding",
            "contexts": {
              "sap.ui.core.ContainerPadding": {
                "previousSampleId": "sap.m.sample.ContainerNoPadding",
                "nextSampleId": "sap.m.sample.ContainerResponsivePadding"
              }
            },
            "key": "#/sample/sap.m.sample.ContainerPadding/preview"
          },
          {
            "id": "sap.m.sample.ContainerResponsivePadding",
            "name": "Responsive Container Content Padding",
            "description": "Apply the CSS class 'sapUiResponsiveContentPadding' on a UI5 container control (e.g. Page, List, Dialog, Popover, ...) to add a responsive padding based on the screen size around the container content area.",
            "entityId": "sap.ui.core.ContainerPadding",
            "contexts": {
              "sap.ui.core.ContainerPadding": {
                "previousSampleId": "sap.m.sample.ContainerPadding",
                "nextSampleId": "sap.m.sample.ContainerPaddingAndMargin"
              }
            },
            "key": "#/sample/sap.m.sample.ContainerResponsivePadding/preview"
          },
          {
            "id": "sap.m.sample.ContainerPaddingAndMargin",
            "name": "Container Content Padding and Margins",
            "description": "By combining the margin and padding concepts you can flexibly design your application layout without having to write any custom CSS. This example shows a HorizontalLayout that is layouted with the standard margin and padding classes provided by UI5.",
            "entityId": "sap.ui.core.ContainerPadding",
            "contexts": {
              "sap.ui.core.ContainerPadding": {
                "previousSampleId": "sap.m.sample.ContainerResponsivePadding"
              }
            },
            "key": "#/sample/sap.m.sample.ContainerPaddingAndMargin/preview"
          }
        ],
        "namespace": "sap.ui.core",
        "library": "sap.m",
        "searchTags": "Standard Paddings StandardPaddings Layout No Container Content Padding Many UI5 containers support the standard container content padding CSS classes. Apply the CSS class 'sapUiNoContentPadding' on a UI5 container control (e.g. Panel, IconTabBar, ...) to remove the default padding around the container content area. Container Content Padding Apply the CSS class 'sapUiContentPadding' on a UI5 container control (e.g. Page, List, Dialog, Popover, ...) to add a default padding of 1rem (16px) around the container content area. Responsive Container Content Padding Apply the CSS class 'sapUiResponsiveContentPadding' on a UI5 container control (e.g. Page, List, Dialog, Popover, ...) to add a responsive padding based on the screen size around the container content area. Container Content Padding and Margins By combining the margin and padding concepts you can flexibly design your application layout without having to write any custom CSS. This example shows a HorizontalLayout that is layouted with the standard margin and padding classes provided by UI5. No Container Content Padding Container Content Padding Responsive Container Content Padding Container Content Padding and Margins",
        "sampleCount": 4,
        "key": "#/entity/sap.ui.core.ContainerPadding"
      },
      {
        "id": "sap.m.MessagePage",
        "name": "Message Page",
        "category": "Display",
        "since": "1.28",
        "formFactors": "Independent",
        "samples": [
          {
            "id": "sap.m.sample.MessagePage",
            "name": "Message Page",
            "description": "This sample displays the MessagePage with basic information.",
            "entityId": "sap.m.MessagePage",
            "contexts": {
              "sap.m.MessagePage": {
                "nextSampleId": "sap.m.sample.MessagePageWithButtons"
              }
            },
            "key": "#/sample/sap.m.sample.MessagePage/preview"
          },
          {
            "id": "sap.m.sample.MessagePageWithButtons",
            "name": "Message Page With FormattedText and Buttons",
            "description": "This sample displays the MessagePage with FormattedText and buttons.",
            "entityId": "sap.m.MessagePage",
            "contexts": {
              "sap.m.MessagePage": {
                "previousSampleId": "sap.m.sample.MessagePage"
              }
            },
            "key": "#/sample/sap.m.sample.MessagePageWithButtons/preview"
          }
        ],
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Message Page MessagePage Display Message Page This sample displays the MessagePage with basic information. Message Page With FormattedText and Buttons This sample displays the MessagePage with FormattedText and buttons. Message Page Message Page With FormattedText and Buttons",
        "sampleCount": 2,
        "key": "#/entity/sap.m.MessagePage"
      },
      {
        "id": "sap.m.Wizard",
        "name": "Wizard",
        "category": "Container",
        "since": "1.30",
        "samples": [
          {
            "id": "sap.m.sample.Wizard",
            "name": "Wizard standard use case",
            "description": "The Wizard is useful for breaking down complex tasks into smaller steps.",
            "entityId": "sap.m.Wizard",
            "contexts": {
              "sap.m.Wizard": {
                "nextSampleId": "sap.m.sample.WizardBranching"
              }
            },
            "key": "#/sample/sap.m.sample.Wizard/preview"
          },
          {
            "id": "sap.m.sample.WizardBranching",
            "name": "Wizard branching use case",
            "description": "The Wizard could be used in branching mode, where the choice of next step depends on the decision made for the current one.",
            "entityId": "sap.m.Wizard",
            "contexts": {
              "sap.m.Wizard": {
                "previousSampleId": "sap.m.sample.Wizard",
                "nextSampleId": "sap.m.sample.WizardCurrentStep"
              }
            },
            "key": "#/sample/sap.m.sample.WizardBranching/preview"
          },
          {
            "id": "sap.m.sample.WizardCurrentStep",
            "name": "Wizard edit mode",
            "description": "Demonstrates the usage of the setCurrentStep association, which controlls the current step of the wizard. This association could be used to simulate 'edit mode' for the wizard by showing all steps in the wizard, without need from the user click next button on each of them.",
            "entityId": "sap.m.Wizard",
            "contexts": {
              "sap.m.Wizard": {
                "previousSampleId": "sap.m.sample.WizardBranching"
              }
            },
            "key": "#/sample/sap.m.sample.WizardCurrentStep/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Wizard Wizard Container Wizard standard use case The Wizard is useful for breaking down complex tasks into smaller steps. Wizard branching use case The Wizard could be used in branching mode, where the choice of next step depends on the decision made for the current one. Wizard edit mode Demonstrates the usage of the setCurrentStep association, which controlls the current step of the wizard. This association could be used to simulate 'edit mode' for the wizard by showing all steps in the wizard, without need from the user click next button on each of them. Wizard standard use case Wizard branching use case Wizard edit mode",
        "sampleCount": 3,
        "key": "#/entity/sap.m.Wizard"
      },
      {
        "id": "sap.m.SplitApp",
        "name": "Split App",
        "category": "Container",
        "since": "1.11",
        "samples": [
          {
            "id": "sap.m.sample.SplitApp",
            "name": "SplitApp standard use case",
            "description": "The SplitApp is the base for each master detail application. It extends the sap.m.SplitContainer control.",
            "entityId": "sap.m.SplitApp",
            "contexts": {
              "sap.m.SplitApp": {}
            },
            "key": "#/sample/sap.m.sample.SplitApp/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Split App SplitApp Container SplitApp standard use case The SplitApp is the base for each master detail application. It extends the sap.m.SplitContainer control. SplitApp standard use case",
        "sampleCount": 1,
        "key": "#/entity/sap.m.SplitApp"
      },
      {
        "id": "sap.m.SplitContainer",
        "name": "Split Container",
        "category": "Container",
        "since": "1.11",
        "samples": [
          {
            "id": "sap.m.sample.SplitContainer",
            "name": "SplitContainer standard use case",
            "description": "SplitContainer maintains two NavContainers if running on tablet or desktop and one NavContainer - on phone. The display of master NavContainer depends on the portrait/landscape orientation of the device and the mode of SplitContainer.",
            "entityId": "sap.m.SplitContainer",
            "contexts": {
              "sap.m.SplitContainer": {}
            },
            "key": "#/sample/sap.m.sample.SplitContainer/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Split Container SplitContainer Container SplitContainer standard use case SplitContainer maintains two NavContainers if running on tablet or desktop and one NavContainer - on phone. The display of master NavContainer depends on the portrait/landscape orientation of the device and the mode of SplitContainer. SplitContainer standard use case",
        "sampleCount": 1,
        "key": "#/entity/sap.m.SplitContainer"
      },
      {
        "id": "sap.m.ColorPalette",
        "name": "Color Palette",
        "category": "User Input",
        "since": "1.54",
        "samples": [
          {
            "id": "sap.m.sample.ColorPalettePopover",
            "name": "Color Palette as popover",
            "description": "The ColorPalette in a popover (by use of thin wrapper control <code>sap.m.ColorPalettePopover</code>).",
            "entityId": "sap.m.ColorPalette",
            "contexts": {
              "sap.m.ColorPalette": {
                "nextSampleId": "sap.m.sample.ColorPalette"
              }
            },
            "key": "#/sample/sap.m.sample.ColorPalettePopover/preview"
          },
          {
            "id": "sap.m.sample.ColorPalette",
            "name": "Color Palette in a form",
            "description": "The standalone ColorPalette in a container (<code>sap.ui.layout.SimpleForm</code>).",
            "entityId": "sap.m.ColorPalette",
            "contexts": {
              "sap.m.ColorPalette": {
                "previousSampleId": "sap.m.sample.ColorPalettePopover"
              }
            },
            "key": "#/sample/sap.m.sample.ColorPalette/preview"
          }
        ],
        "formFactors": "Compact, Cozy",
        "namespace": "sap.m",
        "library": "sap.m",
        "searchTags": "Color Palette ColorPalette User Input Color Palette as popover The ColorPalette in a popover (by use of thin wrapper control <code>sap.m.ColorPalettePopover</code>). Color Palette in a form The standalone ColorPalette in a container (<code>sap.ui.layout.SimpleForm</code>). Color Palette as popover Color Palette in a form",
        "sampleCount": 2,
        "key": "#/entity/sap.m.ColorPalette"
      },
      {
        "id": "sap.m.tutorial.quickstart",
        "name": "Quickstart",
        "category": "Tutorial",
        "since": "1.61",
        "formFactors": "Independent",
        "description": "Unleash your SAPUI5 skills with this simple three step tutorial.",
        "docuLink": "#/topic/592f36fd077b45349a67dcb3efb46ab1",
        "samplesAsSteps": [
          "Ready",
          "Steady",
          "Go!"
        ],
        "namespace": "sap.m.tutorial",
        "library": "sap.m",
        "searchTags": "Quickstart Quickstart Tutorial Quickstart - Step 1 - Ready Quickstart - Step 2 - Steady Quickstart - Step 3 - Go!",
        "samples": [
          {
            "id": "sap.m.tutorial.quickstart.01",
            "name": "Quickstart - Step 1 - Ready",
            "nextSampleId": "sap.m.tutorial.quickstart.02",
            "entityId": "sap.m.tutorial.quickstart",
            "key": "#/sample/sap.m.tutorial.quickstart.01/preview"
          },
          {
            "id": "sap.m.tutorial.quickstart.02",
            "name": "Quickstart - Step 2 - Steady",
            "previousSampleId": "sap.m.tutorial.quickstart.01",
            "nextSampleId": "sap.m.tutorial.quickstart.03",
            "entityId": "sap.m.tutorial.quickstart",
            "key": "#/sample/sap.m.tutorial.quickstart.02/preview"
          },
          {
            "id": "sap.m.tutorial.quickstart.03",
            "name": "Quickstart - Step 3 - Go!",
            "previousSampleId": "sap.m.tutorial.quickstart.02",
            "entityId": "sap.m.tutorial.quickstart",
            "key": "#/sample/sap.m.tutorial.quickstart.03/preview"
          }
        ],
        "sampleCount": 3,
        "key": "#/entity/sap.m.tutorial.quickstart"
      },
      {
        "id": "sap.m.tutorial.walkthrough",
        "name": "Walkthrough",
        "category": "Tutorial",
        "since": "1.30",
        "formFactors": "Independent",
        "description": "In this tutorial we are introducing you to all major development paradigms of SAPUI5.",
        "docuLink": "#docs/guide/3da5f4be63264db99f2e5b04c5e853db.html",
        "samplesAsSteps": [
          "Hello World!",
          "Bootstrap",
          "Controls",
          "XML Views",
          "Controllers",
          "Modules",
          "JSON Model",
          "Translatable Texts",
          "Component Configuration",
          "Descriptor for Applications",
          "Pages and Panels",
          "Shell Control as Container",
          "Margins and Paddings",
          "Custom CSS and Theme Colors",
          "Nested Views",
          "Dialogs and Fragments",
          "Fragment Callbacks",
          "Icons",
          "Reuse Dialogs",
          "Aggregation Binding",
          "Data Types",
          "Expression Binding",
          "Custom Formatters",
          "Filtering",
          "Sorting and Grouping",
          "(Optional) Remote OData Service",
          "Mock Server Configuration",
          "Unit Test with QUnit",
          "Integration Test with OPA",
          "Debugging Tools",
          "Routing and Navigation",
          "Routing with Parameters",
          "Routing Back and History",
          "Custom Controls",
          "Responsiveness",
          "Device Adaptation",
          "Content Density",
          "Accessibility"
        ],
        "namespace": "sap.m.tutorial",
        "library": "sap.m",
        "searchTags": "Walkthrough Walkthrough Tutorial Walkthrough - Step 1 - Hello World! Walkthrough - Step 2 - Bootstrap Walkthrough - Step 3 - Controls Walkthrough - Step 4 - XML Views Walkthrough - Step 5 - Controllers Walkthrough - Step 6 - Modules Walkthrough - Step 7 - JSON Model Walkthrough - Step 8 - Translatable Texts Walkthrough - Step 9 - Component Configuration Walkthrough - Step 10 - Descriptor for Applications Walkthrough - Step 11 - Pages and Panels Walkthrough - Step 12 - Shell Control as Container Walkthrough - Step 13 - Margins and Paddings Walkthrough - Step 14 - Custom CSS and Theme Colors Walkthrough - Step 15 - Nested Views Walkthrough - Step 16 - Dialogs and Fragments Walkthrough - Step 17 - Fragment Callbacks Walkthrough - Step 18 - Icons Walkthrough - Step 19 - Reuse Dialogs Walkthrough - Step 20 - Aggregation Binding Walkthrough - Step 21 - Data Types Walkthrough - Step 22 - Expression Binding Walkthrough - Step 23 - Custom Formatters Walkthrough - Step 24 - Filtering Walkthrough - Step 25 - Sorting and Grouping Walkthrough - Step 26 - (Optional) Remote OData Service Walkthrough - Step 27 - Mock Server Configuration Walkthrough - Step 28 - Unit Test with QUnit Walkthrough - Step 29 - Integration Test with OPA Walkthrough - Step 30 - Debugging Tools Walkthrough - Step 31 - Routing and Navigation Walkthrough - Step 32 - Routing with Parameters Walkthrough - Step 33 - Routing Back and History Walkthrough - Step 34 - Custom Controls Walkthrough - Step 35 - Responsiveness Walkthrough - Step 36 - Device Adaptation Walkthrough - Step 37 - Content Density Walkthrough - Step 38 - Accessibility",
        "samples": [
          {
            "id": "sap.m.tutorial.walkthrough.01",
            "name": "Walkthrough - Step 1 - Hello World!",
            "nextSampleId": "sap.m.tutorial.walkthrough.02",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.01/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.02",
            "name": "Walkthrough - Step 2 - Bootstrap",
            "previousSampleId": "sap.m.tutorial.walkthrough.01",
            "nextSampleId": "sap.m.tutorial.walkthrough.03",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.02/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.03",
            "name": "Walkthrough - Step 3 - Controls",
            "previousSampleId": "sap.m.tutorial.walkthrough.02",
            "nextSampleId": "sap.m.tutorial.walkthrough.04",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.03/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.04",
            "name": "Walkthrough - Step 4 - XML Views",
            "previousSampleId": "sap.m.tutorial.walkthrough.03",
            "nextSampleId": "sap.m.tutorial.walkthrough.05",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.04/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.05",
            "name": "Walkthrough - Step 5 - Controllers",
            "previousSampleId": "sap.m.tutorial.walkthrough.04",
            "nextSampleId": "sap.m.tutorial.walkthrough.06",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.05/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.06",
            "name": "Walkthrough - Step 6 - Modules",
            "previousSampleId": "sap.m.tutorial.walkthrough.05",
            "nextSampleId": "sap.m.tutorial.walkthrough.07",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.06/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.07",
            "name": "Walkthrough - Step 7 - JSON Model",
            "previousSampleId": "sap.m.tutorial.walkthrough.06",
            "nextSampleId": "sap.m.tutorial.walkthrough.08",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.07/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.08",
            "name": "Walkthrough - Step 8 - Translatable Texts",
            "previousSampleId": "sap.m.tutorial.walkthrough.07",
            "nextSampleId": "sap.m.tutorial.walkthrough.09",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.08/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.09",
            "name": "Walkthrough - Step 9 - Component Configuration",
            "previousSampleId": "sap.m.tutorial.walkthrough.08",
            "nextSampleId": "sap.m.tutorial.walkthrough.10",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.09/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.10",
            "name": "Walkthrough - Step 10 - Descriptor for Applications",
            "previousSampleId": "sap.m.tutorial.walkthrough.09",
            "nextSampleId": "sap.m.tutorial.walkthrough.11",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.10/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.11",
            "name": "Walkthrough - Step 11 - Pages and Panels",
            "previousSampleId": "sap.m.tutorial.walkthrough.10",
            "nextSampleId": "sap.m.tutorial.walkthrough.12",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.11/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.12",
            "name": "Walkthrough - Step 12 - Shell Control as Container",
            "previousSampleId": "sap.m.tutorial.walkthrough.11",
            "nextSampleId": "sap.m.tutorial.walkthrough.13",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.12/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.13",
            "name": "Walkthrough - Step 13 - Margins and Paddings",
            "previousSampleId": "sap.m.tutorial.walkthrough.12",
            "nextSampleId": "sap.m.tutorial.walkthrough.14",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.13/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.14",
            "name": "Walkthrough - Step 14 - Custom CSS and Theme Colors",
            "previousSampleId": "sap.m.tutorial.walkthrough.13",
            "nextSampleId": "sap.m.tutorial.walkthrough.15",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.14/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.15",
            "name": "Walkthrough - Step 15 - Nested Views",
            "previousSampleId": "sap.m.tutorial.walkthrough.14",
            "nextSampleId": "sap.m.tutorial.walkthrough.16",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.15/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.16",
            "name": "Walkthrough - Step 16 - Dialogs and Fragments",
            "previousSampleId": "sap.m.tutorial.walkthrough.15",
            "nextSampleId": "sap.m.tutorial.walkthrough.17",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.16/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.17",
            "name": "Walkthrough - Step 17 - Fragment Callbacks",
            "previousSampleId": "sap.m.tutorial.walkthrough.16",
            "nextSampleId": "sap.m.tutorial.walkthrough.18",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.17/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.18",
            "name": "Walkthrough - Step 18 - Icons",
            "previousSampleId": "sap.m.tutorial.walkthrough.17",
            "nextSampleId": "sap.m.tutorial.walkthrough.19",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.18/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.19",
            "name": "Walkthrough - Step 19 - Reuse Dialogs",
            "previousSampleId": "sap.m.tutorial.walkthrough.18",
            "nextSampleId": "sap.m.tutorial.walkthrough.20",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.19/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.20",
            "name": "Walkthrough - Step 20 - Aggregation Binding",
            "previousSampleId": "sap.m.tutorial.walkthrough.19",
            "nextSampleId": "sap.m.tutorial.walkthrough.21",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.20/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.21",
            "name": "Walkthrough - Step 21 - Data Types",
            "previousSampleId": "sap.m.tutorial.walkthrough.20",
            "nextSampleId": "sap.m.tutorial.walkthrough.22",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.21/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.22",
            "name": "Walkthrough - Step 22 - Expression Binding",
            "previousSampleId": "sap.m.tutorial.walkthrough.21",
            "nextSampleId": "sap.m.tutorial.walkthrough.23",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.22/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.23",
            "name": "Walkthrough - Step 23 - Custom Formatters",
            "previousSampleId": "sap.m.tutorial.walkthrough.22",
            "nextSampleId": "sap.m.tutorial.walkthrough.24",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.23/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.24",
            "name": "Walkthrough - Step 24 - Filtering",
            "previousSampleId": "sap.m.tutorial.walkthrough.23",
            "nextSampleId": "sap.m.tutorial.walkthrough.25",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.24/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.25",
            "name": "Walkthrough - Step 25 - Sorting and Grouping",
            "previousSampleId": "sap.m.tutorial.walkthrough.24",
            "nextSampleId": "sap.m.tutorial.walkthrough.26",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.25/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.26",
            "name": "Walkthrough - Step 26 - (Optional) Remote OData Service",
            "previousSampleId": "sap.m.tutorial.walkthrough.25",
            "nextSampleId": "sap.m.tutorial.walkthrough.27",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.26/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.27",
            "name": "Walkthrough - Step 27 - Mock Server Configuration",
            "previousSampleId": "sap.m.tutorial.walkthrough.26",
            "nextSampleId": "sap.m.tutorial.walkthrough.28",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.27/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.28",
            "name": "Walkthrough - Step 28 - Unit Test with QUnit",
            "previousSampleId": "sap.m.tutorial.walkthrough.27",
            "nextSampleId": "sap.m.tutorial.walkthrough.29",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.28/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.29",
            "name": "Walkthrough - Step 29 - Integration Test with OPA",
            "previousSampleId": "sap.m.tutorial.walkthrough.28",
            "nextSampleId": "sap.m.tutorial.walkthrough.30",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.29/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.30",
            "name": "Walkthrough - Step 30 - Debugging Tools",
            "previousSampleId": "sap.m.tutorial.walkthrough.29",
            "nextSampleId": "sap.m.tutorial.walkthrough.31",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.30/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.31",
            "name": "Walkthrough - Step 31 - Routing and Navigation",
            "previousSampleId": "sap.m.tutorial.walkthrough.30",
            "nextSampleId": "sap.m.tutorial.walkthrough.32",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.31/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.32",
            "name": "Walkthrough - Step 32 - Routing with Parameters",
            "previousSampleId": "sap.m.tutorial.walkthrough.31",
            "nextSampleId": "sap.m.tutorial.walkthrough.33",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.32/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.33",
            "name": "Walkthrough - Step 33 - Routing Back and History",
            "previousSampleId": "sap.m.tutorial.walkthrough.32",
            "nextSampleId": "sap.m.tutorial.walkthrough.34",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.33/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.34",
            "name": "Walkthrough - Step 34 - Custom Controls",
            "previousSampleId": "sap.m.tutorial.walkthrough.33",
            "nextSampleId": "sap.m.tutorial.walkthrough.35",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.34/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.35",
            "name": "Walkthrough - Step 35 - Responsiveness",
            "previousSampleId": "sap.m.tutorial.walkthrough.34",
            "nextSampleId": "sap.m.tutorial.walkthrough.36",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.35/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.36",
            "name": "Walkthrough - Step 36 - Device Adaptation",
            "previousSampleId": "sap.m.tutorial.walkthrough.35",
            "nextSampleId": "sap.m.tutorial.walkthrough.37",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.36/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.37",
            "name": "Walkthrough - Step 37 - Content Density",
            "previousSampleId": "sap.m.tutorial.walkthrough.36",
            "nextSampleId": "sap.m.tutorial.walkthrough.38",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.37/preview"
          },
          {
            "id": "sap.m.tutorial.walkthrough.38",
            "name": "Walkthrough - Step 38 - Accessibility",
            "previousSampleId": "sap.m.tutorial.walkthrough.37",
            "entityId": "sap.m.tutorial.walkthrough",
            "key": "#/sample/sap.m.tutorial.walkthrough.38/preview"
          }
        ],
        "sampleCount": 38,
        "key": "#/entity/sap.m.tutorial.walkthrough"
      },
      {
        "id": "sap.m.tutorial.testing",
        "name": "Testing",
        "category": "Tutorial",
        "since": "1.30",
        "formFactors": "Independent",
        "description": "In this tutorial we will test application functionality with QUnit, OPA5, and the mock server.",
        "docuLink": "#docs/guide/291c9121e6044ab381e0b51716f97f52.html",
        "samplesAsSteps": [
          "Overview and Testing Strategy",
          "A First Unit Test",
          "Adding the Price Formatter",
          "Testing a New Module",
          "Adding a Flag Button",
          "A First OPA Test",
          "Changing the table to a Growing Table",
          "Testing Navigation",
          "Adding the Post Page",
          "Test Suite and Automated Testing",
          "Testing User Input",
          "Adding a Search",
          "Testing User Interactions",
          "Adding Tabs",
          "Writing a Short Date Formatter Using TDD ",
          "Adding the Date Formatter"
        ],
        "namespace": "sap.m.tutorial",
        "library": "sap.m",
        "searchTags": "Testing Testing Tutorial Testing - Step 1 - Overview and Testing Strategy Testing - Step 2 - A First Unit Test Testing - Step 3 - Adding the Price Formatter Testing - Step 4 - Testing a New Module Testing - Step 5 - Adding a Flag Button Testing - Step 6 - A First OPA Test Testing - Step 7 - Changing the table to a Growing Table Testing - Step 8 - Testing Navigation Testing - Step 9 - Adding the Post Page Testing - Step 10 - Test Suite and Automated Testing Testing - Step 11 - Testing User Input Testing - Step 12 - Adding a Search Testing - Step 13 - Testing User Interactions Testing - Step 14 - Adding Tabs Testing - Step 15 - Writing a Short Date Formatter Using TDD  Testing - Step 16 - Adding the Date Formatter",
        "samples": [
          {
            "id": "sap.m.tutorial.testing.01",
            "name": "Testing - Step 1 - Overview and Testing Strategy",
            "nextSampleId": "sap.m.tutorial.testing.02",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.01/preview"
          },
          {
            "id": "sap.m.tutorial.testing.02",
            "name": "Testing - Step 2 - A First Unit Test",
            "previousSampleId": "sap.m.tutorial.testing.01",
            "nextSampleId": "sap.m.tutorial.testing.03",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.02/preview"
          },
          {
            "id": "sap.m.tutorial.testing.03",
            "name": "Testing - Step 3 - Adding the Price Formatter",
            "previousSampleId": "sap.m.tutorial.testing.02",
            "nextSampleId": "sap.m.tutorial.testing.04",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.03/preview"
          },
          {
            "id": "sap.m.tutorial.testing.04",
            "name": "Testing - Step 4 - Testing a New Module",
            "previousSampleId": "sap.m.tutorial.testing.03",
            "nextSampleId": "sap.m.tutorial.testing.05",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.04/preview"
          },
          {
            "id": "sap.m.tutorial.testing.05",
            "name": "Testing - Step 5 - Adding a Flag Button",
            "previousSampleId": "sap.m.tutorial.testing.04",
            "nextSampleId": "sap.m.tutorial.testing.06",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.05/preview"
          },
          {
            "id": "sap.m.tutorial.testing.06",
            "name": "Testing - Step 6 - A First OPA Test",
            "previousSampleId": "sap.m.tutorial.testing.05",
            "nextSampleId": "sap.m.tutorial.testing.07",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.06/preview"
          },
          {
            "id": "sap.m.tutorial.testing.07",
            "name": "Testing - Step 7 - Changing the table to a Growing Table",
            "previousSampleId": "sap.m.tutorial.testing.06",
            "nextSampleId": "sap.m.tutorial.testing.08",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.07/preview"
          },
          {
            "id": "sap.m.tutorial.testing.08",
            "name": "Testing - Step 8 - Testing Navigation",
            "previousSampleId": "sap.m.tutorial.testing.07",
            "nextSampleId": "sap.m.tutorial.testing.09",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.08/preview"
          },
          {
            "id": "sap.m.tutorial.testing.09",
            "name": "Testing - Step 9 - Adding the Post Page",
            "previousSampleId": "sap.m.tutorial.testing.08",
            "nextSampleId": "sap.m.tutorial.testing.10",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.09/preview"
          },
          {
            "id": "sap.m.tutorial.testing.10",
            "name": "Testing - Step 10 - Test Suite and Automated Testing",
            "previousSampleId": "sap.m.tutorial.testing.09",
            "nextSampleId": "sap.m.tutorial.testing.11",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.10/preview"
          },
          {
            "id": "sap.m.tutorial.testing.11",
            "name": "Testing - Step 11 - Testing User Input",
            "previousSampleId": "sap.m.tutorial.testing.10",
            "nextSampleId": "sap.m.tutorial.testing.12",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.11/preview"
          },
          {
            "id": "sap.m.tutorial.testing.12",
            "name": "Testing - Step 12 - Adding a Search",
            "previousSampleId": "sap.m.tutorial.testing.11",
            "nextSampleId": "sap.m.tutorial.testing.13",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.12/preview"
          },
          {
            "id": "sap.m.tutorial.testing.13",
            "name": "Testing - Step 13 - Testing User Interactions",
            "previousSampleId": "sap.m.tutorial.testing.12",
            "nextSampleId": "sap.m.tutorial.testing.14",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.13/preview"
          },
          {
            "id": "sap.m.tutorial.testing.14",
            "name": "Testing - Step 14 - Adding Tabs",
            "previousSampleId": "sap.m.tutorial.testing.13",
            "nextSampleId": "sap.m.tutorial.testing.15",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.14/preview"
          },
          {
            "id": "sap.m.tutorial.testing.15",
            "name": "Testing - Step 15 - Writing a Short Date Formatter Using TDD ",
            "previousSampleId": "sap.m.tutorial.testing.14",
            "nextSampleId": "sap.m.tutorial.testing.16",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.15/preview"
          },
          {
            "id": "sap.m.tutorial.testing.16",
            "name": "Testing - Step 16 - Adding the Date Formatter",
            "previousSampleId": "sap.m.tutorial.testing.15",
            "entityId": "sap.m.tutorial.testing",
            "key": "#/sample/sap.m.tutorial.testing.16/preview"
          }
        ],
        "sampleCount": 16,
        "key": "#/entity/sap.m.tutorial.testing"
      },
      {
        "id": "sap.m.tutorial.worklist",
        "name": "Worklist App",
        "category": "Tutorial",
        "since": "1.32",
        "formFactors": "Independent",
        "description": "In this tutorial we implement typical features of a full-screen worklist app, a typical SAP Fiori design pattern.",
        "docuLink": "#docs/guide/6a6a621c978145ad9eef2b221d2cf21d.html",
        "samplesAsSteps": [
          "Creating the Initial App",
          "Custom Mock Data",
          "Extending the Worklist Table",
          "Quick Filter for the Worklist",
          "Adding Actions to the Worklist",
          "Extending the Detail Page",
          "Adding a Comments Section"
        ],
        "namespace": "sap.m.tutorial",
        "library": "sap.m",
        "searchTags": "Worklist App WorklistApp Tutorial Worklist App - Step 1 - Creating the Initial App Worklist App - Step 2 - Custom Mock Data Worklist App - Step 3 - Extending the Worklist Table Worklist App - Step 4 - Quick Filter for the Worklist Worklist App - Step 5 - Adding Actions to the Worklist Worklist App - Step 6 - Extending the Detail Page Worklist App - Step 7 - Adding a Comments Section",
        "samples": [
          {
            "id": "sap.m.tutorial.worklist.01",
            "name": "Worklist App - Step 1 - Creating the Initial App",
            "nextSampleId": "sap.m.tutorial.worklist.02",
            "entityId": "sap.m.tutorial.worklist",
            "key": "#/sample/sap.m.tutorial.worklist.01/preview"
          },
          {
            "id": "sap.m.tutorial.worklist.02",
            "name": "Worklist App - Step 2 - Custom Mock Data",
            "previousSampleId": "sap.m.tutorial.worklist.01",
            "nextSampleId": "sap.m.tutorial.worklist.03",
            "entityId": "sap.m.tutorial.worklist",
            "key": "#/sample/sap.m.tutorial.worklist.02/preview"
          },
          {
            "id": "sap.m.tutorial.worklist.03",
            "name": "Worklist App - Step 3 - Extending the Worklist Table",
            "previousSampleId": "sap.m.tutorial.worklist.02",
            "nextSampleId": "sap.m.tutorial.worklist.04",
            "entityId": "sap.m.tutorial.worklist",
            "key": "#/sample/sap.m.tutorial.worklist.03/preview"
          },
          {
            "id": "sap.m.tutorial.worklist.04",
            "name": "Worklist App - Step 4 - Quick Filter for the Worklist",
            "previousSampleId": "sap.m.tutorial.worklist.03",
            "nextSampleId": "sap.m.tutorial.worklist.05",
            "entityId": "sap.m.tutorial.worklist",
            "key": "#/sample/sap.m.tutorial.worklist.04/preview"
          },
          {
            "id": "sap.m.tutorial.worklist.05",
            "name": "Worklist App - Step 5 - Adding Actions to the Worklist",
            "previousSampleId": "sap.m.tutorial.worklist.04",
            "nextSampleId": "sap.m.tutorial.worklist.06",
            "entityId": "sap.m.tutorial.worklist",
            "key": "#/sample/sap.m.tutorial.worklist.05/preview"
          },
          {
            "id": "sap.m.tutorial.worklist.06",
            "name": "Worklist App - Step 6 - Extending the Detail Page",
            "previousSampleId": "sap.m.tutorial.worklist.05",
            "nextSampleId": "sap.m.tutorial.worklist.07",
            "entityId": "sap.m.tutorial.worklist",
            "key": "#/sample/sap.m.tutorial.worklist.06/preview"
          },
          {
            "id": "sap.m.tutorial.worklist.07",
            "name": "Worklist App - Step 7 - Adding a Comments Section",
            "previousSampleId": "sap.m.tutorial.worklist.06",
            "entityId": "sap.m.tutorial.worklist",
            "key": "#/sample/sap.m.tutorial.worklist.07/preview"
          }
        ],
        "sampleCount": 7,
        "key": "#/entity/sap.m.tutorial.worklist"
      }
    ]
    }